<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>通过直接添加或者手动编译添加库，解决 library not found for -lxxx 等的问题</title>
    <url>/2017/08/23/AddLibraryToSolveLibraryNotFound/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文基本上能完美解决这种库文件无法找到问题。</p>
<p>文中以<code>IceUtil</code>库为例子，你可以推广到其他库，方法相同。</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在 Mac 下用 Homebrew 安装 ZeroC Ice 这个中间件后发现 IceUtil 库缺失，IDE 报了个链接错误，如下图：</p>
<span id="more"></span>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/LibraryNoFoundForIIceUtil.jpg"></p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>这个问题是说链接器在链接的时候找不到 IceUtil 这个库，那我们就告诉它（添加库的路径），让它找到就好啦！</p>
<p>扩展：</p>
<ul>
<li><p>静态库无法链接报错：</p>
<pre><code>  library not found for -lxxx
</code></pre>
</li>
<li><p>动态库无法装载报错：</p>
<pre><code>  dyld: library not loaded …/libxxx.dylib
</code></pre>
</li>
</ul>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="方法一：直接添加库"><a href="#方法一：直接添加库" class="headerlink" title="方法一：直接添加库"></a>方法一：直接添加库</h3><p>通常解决办法是：库存在，直接添加路径。</p>
<p>也就是通常遇到这个问题的时候，库是已经编译安装好了的，但是 IED 不能找到。这样的话就直接添加库的路径就好了。</p>
<h4 id="第一步：找库"><a href="#第一步：找库" class="headerlink" title="第一步：找库"></a>第一步：找库</h4><p>第一步，自己找到这个库。</p>
<p>库一般放在系统默认处或者安装到特定地方。</p>
<ol>
<li><p>Linux 系统默认库放在：</p>
<pre><code> /lib
 /usr/lib
 /usr/local/lib
 ...
</code></pre>
</li>
<li><p>安装到特定地方，如我 Mac 的用 Homebrew 安装到：</p>
<pre><code> /usr/local/Cellar/ice/3.7.0/lib
</code></pre>
</li>
</ol>
<h4 id="第二步：添加路径"><a href="#第二步：添加路径" class="headerlink" title="第二步：添加路径"></a>第二步：添加路径</h4><p>添加库一般以下三种方法任选其一：</p>
<ol>
<li>系统环境变量添加<ol>
<li>系统级：修改<code>/etc/profile</code>或者<code>/etc/bashrc</code></li>
<li>用户级：修改<code>~/.bashrc</code>或者<code>~/.bash_profile</code></li>
</ol>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#添加库的bin文件夹路径</span><br><span class="line">export PATH =$PATH:$HOME/bin</span><br><span class="line"></span><br><span class="line">#添加到gcc头文件</span><br><span class="line">export C_INCLUDE_PATH=$C_INCLUDE_PATH:/MyLib</span><br><span class="line"></span><br><span class="line">#添加到g++头文件路径</span><br><span class="line">export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/MyLib</span><br><span class="line"></span><br><span class="line">#添加到动态库</span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/MyLib</span><br><span class="line"></span><br><span class="line">#添加到静态库</span><br><span class="line">export LIBRARY_PATH=$LIBRARY_PATH:/MyLib</span><br></pre></td></tr></table></figure>


<ol start="2">
<li><p>IED 编译环境添加</p>
<p> 因 IDE 不同而不同，如 Qt 在<code>项目</code>-<code>构建设置</code>-<code>构建环境</code>处添加</p>
<p> 具体请参考：<a href="https://blog.huihut.com/2017/06/05/QtDyldLibraryNotLoaded/">QT 无法链接动态库 dyld library not loaded … libhdf5.100.dylib</a></p>
</li>
<li><p>代码添加</p>
<pre><code> # 如 Qt pro 文件添加
 LIBS += -L/usr/local/Cellar/ice/3.7.0/lib -lIceUtil
</code></pre>
</li>
</ol>
<p>这样，IDE就能找到库啦！</p>
<h3 id="方法二：手动编译添加库"><a href="#方法二：手动编译添加库" class="headerlink" title="方法二：手动编译添加库"></a>方法二：手动编译添加库</h3><p>若是你的库不存在，也就是说安装的时候没有编译生成这个库文件或者安装后莫名的不见了，这样只能重新安装或者手动编译添加库。以下讲手动编译添加库。</p>
<p>思路是：找库，如果找不到，手动编译生成库文件，拷贝到库文件目录，用上面<code>添加路径</code>的方法添加路径让IDE找到。</p>
<h4 id="第一步：找库-1"><a href="#第一步：找库-1" class="headerlink" title="第一步：找库"></a>第一步：找库</h4><p>对的，还是要找找的，不然怎么知道没有呢！[捂脸]</p>
<p>可以在一些常放库的文件夹下找，尽量靠近根目录，如：</p>
<pre><code>sudo find /usr -name &quot;libIceUtil*&quot;
</code></pre>
<p>扩展：</p>
<p>如果找到名为<code>libIceUtil.3.7.0.a</code>的库，但是找不到<code>libIceUtil.a</code>的库，可以试着拷贝<code>libIceUtil.3.7.0.a</code>库成名为<code>libIceUtil.a</code>的库</p>
<pre><code>cp ./libIceUtil.3.7.0.a ./libIceUtil.a
</code></pre>
<p>这个方法适用于：</p>
<ul>
<li>同版本下，缺失没版本号的库文件</li>
<li>不同版本下，库文件没因为版本的改变而发生改变</li>
</ul>
<h4 id="第二步，手动编译"><a href="#第二步，手动编译" class="headerlink" title="第二步，手动编译"></a>第二步，手动编译</h4><pre><code>#因为IceUtil是Ice的库，所以克隆下Ice来
git clone https://github.com/zeroc-ice/ice.git

#因为我需要的是C++版
cd ice/cpp

#直接编译
make
</code></pre>
<p>编译好后就能找到这个库了：<code>cpp/lib/libIceUtil.a</code></p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MakeLibIceUtil.jpg"></p>
<p>其他库请参考官方的编译安装教程</p>
<p>附：<a href="https://github.com/zeroc-ice/ice/blob/master/cpp/BuildInstructionsMacOS.md">Building Ice for C++ on macOS</a></p>
<h4 id="第三步，拷贝库到安装后的文件夹"><a href="#第三步，拷贝库到安装后的文件夹" class="headerlink" title="第三步，拷贝库到安装后的文件夹"></a>第三步，拷贝库到安装后的文件夹</h4><p>到<code>ice/cpp/lib</code>目录下：</p>
<pre><code> cp ./libIceUtil.a /usr/local/Cellar/ice/3.7.0/lib
 
</code></pre>
<h4 id="第四步：添加路径"><a href="#第四步：添加路径" class="headerlink" title="第四步：添加路径"></a>第四步：添加路径</h4><p>上面已经说了三种方法，这里直接代码添加：</p>
<pre><code> # 如 Qt pro 文件添加
LIBS += -L/usr/local/Cellar/ice/3.7.0/lib -lIceUtil
</code></pre>
<p>这样就解决了！</p>
<h2 id="唠叨"><a href="#唠叨" class="headerlink" title="唠叨"></a>唠叨</h2><p>以上这些方法基本上能完美解决这种库文件无法找到问题，如果有本文没有提及的欢迎留言讨论。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>链接装载库</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 解压压缩包及 7z 库缺失导致 Can not load 7-zip library or internal COM error!</title>
    <url>/2018/11/07/CSharpUnzipAnd7zLibraryMissingError/</url>
    <content><![CDATA[<h2 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h2><p>C# 程序解压 7z 文件的时候抛出异常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Can not load 7-zip library or internal COM error! Message: DLL file does not exist.</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>程序无法找到 7z 库，导致无法解压 7z 文件</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="方法一：使用-NuGet-包管理器下载安装"><a href="#方法一：使用-NuGet-包管理器下载安装" class="headerlink" title="方法一：使用 NuGet 包管理器下载安装"></a>方法一：使用 NuGet 包管理器下载安装</h3><p>选择 Visual Studio 某个项目 - 右键引用 - 管理 NuGet 程序包 - 浏览 - 搜索 <code>7z</code>，选择一个 <code>7z</code> 包，如 <code>7z.Libs</code> 安装即可。</p>
<h3 id="方法二：手动下载安装"><a href="#方法二：手动下载安装" class="headerlink" title="方法二：手动下载安装"></a>方法二：手动下载安装</h3><p>在官网 <a href="https://www.7-zip.org/download.html">Download 7-Zip </a> 下载下面的 7z 库</p>
<table>
<thead>
<tr>
<th>Link</th>
<th>Type</th>
<th>Windows</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.7-zip.org/a/7z1805-extra.7z">Download</a></td>
<td>.7z</td>
<td>x86 &#x2F; x64</td>
<td>7-Zip Extra: standalone console version, 7z DLL, Plugin for Far Manager</td>
</tr>
</tbody></table>
<p>解压重命名到 <code>C:\Program Files\7-Zip</code></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解压压缩包</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;file_path&quot;&gt;</span>压缩包路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;save_path&quot;&gt;</span>解压后保存路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>是否解压成功<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">UncompressFile</span>(<span class="params"><span class="built_in">string</span> file_path, <span class="built_in">string</span> save_path</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (System.IO.Directory.Exists(save_path))</span><br><span class="line">        &#123;</span><br><span class="line">            System.IO.Directory.Delete(save_path, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若手动安装，需要指定路径</span></span><br><span class="line">        <span class="comment">//SevenZip.SevenZipExtractor.SetLibraryPath(@&quot;C:\Program Files\7-Zip\7za.dll&quot;);</span></span><br><span class="line">        SevenZip.SevenZipExtractor extractor = <span class="keyword">new</span> SevenZip.SevenZipExtractor(file_path);</span><br><span class="line">        extractor.ExtractArchive(save_path);</span><br><span class="line">        extractor.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e1)</span><br><span class="line">    &#123;</span><br><span class="line">        System.Diagnostics.Debug.WriteLine(e1.Message);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Dotnet</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Launcher 启动 UE4 引擎出现 An Unreal process has crashed 的问题</title>
    <url>/2017/07/28/AnUnrealProcessHasCrashed/</url>
    <content><![CDATA[<h2 id="Launcher-启动-UE4-引擎出现-An-Unreal-process-has-crashed-的问题"><a href="#Launcher-启动-UE4-引擎出现-An-Unreal-process-has-crashed-的问题" class="headerlink" title="Launcher 启动 UE4 引擎出现 An Unreal process has crashed 的问题"></a>Launcher 启动 UE4 引擎出现 An Unreal process has crashed 的问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在 Launcher 启动 UE4 引擎，引擎奔溃，出现奔溃报告： An Unreal process has crashed:UE4-……</p>
<span id="more"></span>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/AnUnrealProcessHasCrashed.png"></p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>以管理员身份运行 Launcher，并启动 UE4 引擎则能正常启动。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Unreal</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 7 挂载 NTFS 分区</title>
    <url>/2017/03/29/Centos7NTFS/</url>
    <content><![CDATA[<h1 id="NTFS-3G"><a href="#NTFS-3G" class="headerlink" title="NTFS-3G"></a>NTFS-3G</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用 NTFS-3G 实现，可以挂载 NTFS，还可以挂载 HFS+ 等，以下是在 Centos 7 下安装 NTFS-3G 及挂载 NTFS 分区</p>
<pre><code>wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo

sudo yum update

sudo yum install ntfs-3g
</code></pre>
<h2 id="查看分区"><a href="#查看分区" class="headerlink" title="查看分区"></a>查看分区</h2><pre><code>fdisk -l
</code></pre>
<span id="more"></span>

<h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><pre><code># d、e、f改成你想要挂的盘符名字
mkdir /mnt/windows/d
mkdir /mnt/windows/e
mkdir /mnt/windows/f

# d、e、f改成你想要挂的盘符名字，sdb3这些改为要挂的分区
mount -t ntfs-3g /dev/sdb3 /mnt/windows/d
mount -t ntfs-3g /dev/sdb4 /mnt/windows/e
mount -t ntfs-3g /dev/sdb5 /mnt/windows/f
</code></pre>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><pre><code>umount /mnt
</code></pre>
<h2 id="设置开机自动挂载"><a href="#设置开机自动挂载" class="headerlink" title="设置开机自动挂载"></a>设置开机自动挂载</h2><pre><code>sudo vim /etc/fstab

#只读式挂载：
/dev/sda1 /mnt/windows/c ntfs-3g ro,umask=0222,defaults 0 0

#读写式挂载：
/dev/sda1 /mnt/windows/c ntfs-3g rw,umask=0000,defaults 0 0
#或者： 
/dev/sda1 /mnt/windows/c ntfs-3g defaults 0 0
</code></pre>
<h2 id="设置后开机无法启动（无法挂载）"><a href="#设置后开机无法启动（无法挂载）" class="headerlink" title="设置后开机无法启动（无法挂载）"></a>设置后开机无法启动（无法挂载）</h2><p>网上很多教程都是如上几步就好了~</p>
<p>然而我的无法开机。</p>
<p>如下图：</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/centosNTFSError.jpeg"></p>
<p>这样应该需要输入root密码，用root账户登录修复模式，</p>
<p>然后 <code>vim /etc/fstab</code> 删除刚刚添加的东西，</p>
<p><code>reboot</code> 就能进入系统了</p>
<p>所以之前之前忙活的都没用了？</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/biaoqing1.gif"></p>
<p>后来试了下原来</p>
<pre><code>mount -t ntfs-3g /dev/sdb3 /mnt/windows/d
</code></pre>
<p>这句本身就无法挂载！</p>
<p>然后可以通过</p>
<pre><code>sudo mount -o ro /dev/sdb3 /mnt/windows/d
</code></pre>
<p>挂载，但是只能通过终端访问，就是下面这个👇</p>
<h2 id="其他问题无法挂载的解决办法"><a href="#其他问题无法挂载的解决办法" class="headerlink" title="其他问题无法挂载的解决办法"></a>其他问题无法挂载的解决办法</h2><p>实现了只能在终端访问</p>
<pre><code>#创建挂载点
mkdir /mnt/windows/d
mkdir /mnt/windows/e
mkdir /mnt/windows/f

#挂载分区
sudo mount -o ro /dev/sdb3 /mnt/windows/d
sudo mount -o ro /dev/sdb4 /mnt/windows/e
sudo mount -o ro /dev/sdb5 /mnt/windows/f

#添加上面挂载分区到这里面
sudo vim /etc/rc.d/rc.local 

#更改权限
chmod +x /etc/rc.d/rc.local
</code></pre>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><p><a href="http://www.cnblogs.com/gbyukg/archive/2011/11/02/2232343.html">http://www.cnblogs.com/gbyukg/archive/2011/11/02/2232343.html</a></p>
<p><a href="http://www.jianshu.com/p/f578b575fcaa">http://www.jianshu.com/p/f578b575fcaa</a></p>
<p><a href="http://askubuntu.com/questions/462381/cant-mount-ntfs-drive-the-disk-contains-an-unclean-file-system">http://askubuntu.com/questions/462381/cant-mount-ntfs-drive-the-disk-contains-an-unclean-file-system</a></p>
<p><a href="https://www.techbrown.com/mount-ntfs-file-system-centos-7-rhel-7.shtml">https://www.techbrown.com/mount-ntfs-file-system-centos-7-rhel-7.shtml</a>  </p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CloudCompare功能概要</title>
    <url>/2017/03/21/CloudCompareFunction/</url>
    <content><![CDATA[<h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><ul>
<li>open：打开</li>
<li>save：保存</li>
<li>Global Shift settings：设置最大绝对坐标，最大实体对角线</li>
<li>Primitive Factory：对点云进行原始加工，改变原始点云的形状</li>
<li>3D mouse：对3D鼠标（如3Dconnexion）的支持</li>
<li>Close all：关闭所有打开的实体</li>
<li>Quit：退出</li>
</ul>
<span id="more"></span>

<h2 id="Edit："><a href="#Edit：" class="headerlink" title="Edit："></a>Edit：</h2><ul>
<li>Clone：克隆选中的点云</li>
<li>Merge：合并两个或者多个实体。可以合并点云（原始云会被删除）；可以合并网格（原始网不会修改，CC会创建一个新的网格结构）</li>
<li>Subsample：采集原始点云的子样本，可以用随机、立体、基于八叉树的方式采集，子样本会保持原始点云的标量、颜色、法线等性质。</li>
<li>Apply Transformation：可以对选中的实体做变换（4*4矩阵、轴线角，欧拉角）</li>
<li>Multiply &#x2F; Scale：让选中实体的坐标倍增。</li>
<li>Translate &#x2F; Rotate (Interactive Transformation Tool)：可以相对于另外一个实体或者坐标系移动选中的实体</li>
<li>Segment (Interactive Segmentation Tool)：通过画2D多边形分隔选中的实体</li>
<li>Crop：分割一个或多个在3D-Box里面的点云。</li>
<li>Edit global shift and scale：进行全局变换和和比例缩放。</li>
<li>Toggle (recursive)：用于控制键盘的快捷键。</li>
<li>Delete：删除选中的实体。</li>
<li>Colors &gt; Set Unique：为所选实体设置唯一一个的颜色</li>
<li>Colors &gt; Colorize：为所选实体着色，具体表现为分别用所选颜色乘以当前颜色的RGB而得到新的颜色</li>
<li>Colors &gt; Levels：通过调整颜色的柱形图变色，类似于Photoshop的Levels方法</li>
<li>Colors &gt; Height Ramp：为所选实体设置颜色渐变（线形、梯形、环形）</li>
<li>Colors &gt; Convert to Scalar Field：将当前的 RGB 颜色字段转换为一个或几个标量字段</li>
<li>Colors &gt; Interpolate from another entity：在所选实体中插入另外一个实体的颜色</li>
<li>Colors &gt; Clear：移除所选实体的颜色域</li>
<li>Normals &gt; Compute：计算所选实体的法线</li>
<li>Normals &gt; Invert：反转所选实体的法线</li>
<li>Normals &gt; Orient Normals &gt; With Minimum Spanning Tree：用同样的方法重新定位点云的全部法线（最小生成树）</li>
<li>Normals &gt; Orient Normals &gt; With Fast Marching：用同样的方法重新定位点云的全部法线（快速行进法）</li>
<li>Normals &gt; Convert to &gt; HSV：将云的法线转换到 HSV 颜色字段</li>
<li>Normals &gt; Convert to &gt; Dip and Dip direction SFs：转换点云的法线到两个标量域</li>
<li>Normals &gt; Clear：为选定的实体移除法线</li>
<li>Octree &gt; Compute：强制计算给定实体的八叉树</li>
<li>Octree &gt; Resample：通过代替每个八叉树单元内的所有点来重新取样</li>
<li>Mesh &gt; Delaunay 2.5D (XY plane)：计算点云在xy平面上的2.5D三角剖分（Delaunay 2.5D triangulation，德洛内2.5D三角算法）</li>
<li>Mesh &gt; Delaunay 2.5D (best fit plane)：计算点云在最佳平面的2.5D三角剖分（Delaunay 2.5D triangulation，德洛内2.5D三角算法）</li>
<li>Mesh &gt; Convert texture&#x2F;material to RGB：将选定网格的网格材料和纹理信息转换为逐个点的 RGB 字段</li>
<li>Mesh &gt; Sample points：在一个网格中随机取样</li>
<li>Mesh &gt; Smooth (Laplacian)：平滑一个网格（Laplacian smoothing，拉普拉斯平滑算法）</li>
<li>Mesh &gt; Subdivide：细分网格，此算法递归细分网格三角形，直到他们的表面细分到用户指定值之下。</li>
<li>Mesh &gt; Measure surface：测量网格的总体表面积和每个三角形的平均表面积，在控制台输出</li>
<li>Mesh &gt; Measure volume：测量闭合网格的体积，在控制台输出</li>
<li>Mesh &gt; Flag vertices：检查网格的基本特性，为每个网格样本做标志：0 &#x3D; normal，1 &#x3D; border，2 &#x3D; non-manifold</li>
<li>Mesh &gt; Scalar field &gt; Smooth：平滑网格顶点相关联的标量场。此方法与高斯滤波（Gaussian Filter）相反。运用qPCV插件后，此方法特别有用</li>
<li>Mesh &gt; Scalar field &gt; Enhance：增强与网格顶点相关联的标量场。运用qPCV插件后，此方法特别有用</li>
<li>Sensors &gt; Edit：修改指定传感器内外在参数</li>
<li>Sensors &gt; Ground Based Lidar &gt; Create：创建’Ground Based Lidar’ (&#x3D; TLS)传感器实体，附加到所选的点云</li>
<li>Sensors &gt; Ground Based Lidar &gt; Show Depth Buffer：显示选中的Ground Based Lidar的深度</li>
<li>Sensors &gt; Ground Based Lidar &gt; Export Depth Buffer：以ASCII文件的形式导出选中的Ground Based Lidar传感器的深度图</li>
<li>Sensors &gt; Camera Sensor &gt; Create：创建影像传感器</li>
<li>Sensors &gt; Camera Sensor &gt; Project uncertainty：输出影像模块不确定的点云，输出不确定的x、y、z、3D信息</li>
<li>Sensors &gt; Camera Sensor &gt; Compute points visibility (with octree)：统计选中影像传感器选中的点云。0&#x3D;NOT VISIBLE，1&#x3D;VISIBLE</li>
<li>Sensors &gt; View from sensor：更改当前的 3D 视图影像设置以匹配选定的传感器的设置 （用泡沫视图模式）</li>
<li>Sensors &gt; Compute ranges：计算全部点（对于任何点云）相对于指定传感器的范围</li>
<li>Sensors &gt; Compute scattering angles：计算全部点（对于任何有法线的云）相对于选中传感器分散的角度</li>
<li>Scalar fields &gt; Show histogram：对当前选中的实体显示有效标量域的柱形图</li>
<li>Scalar fields &gt; Compute statistical parameters：计算统计分布（高斯分布、威布尔分布）</li>
<li>Scalar fields &gt; Gradient：计算标量域的梯度</li>
<li>Scalar fields &gt; Gaussian filter：通过应用一个立体高斯滤镜，平滑一个标量域</li>
<li>Scalar fields &gt; Bilateral filter：用双边滤镜平滑一个标量域</li>
<li>Scalar fields &gt; Filter by Value：用标量值筛选选定的云</li>
<li>Scalar fields &gt; Convert to RGB：将有效的标量场转化为RGB颜色域</li>
<li>Scalar fields &gt; Convert to random RGB：将有效的标量场转化为随机的RGB颜色域</li>
<li>Scalar fields &gt; Rename：对选中实体重命名有效的标量域</li>
<li>Scalar fields &gt; Add constant SF：用一个常数添加一个标量域</li>
<li>Scalar fields &gt; Add point indexes as SF：用点索引的方式为所选点云创建一个新的标量域</li>
<li>Scalar fields &gt; Export coordinate(s) to SF(s)：导出坐标到标量域</li>
<li>Scalar fields &gt; Set SF as coordinate(s)：为选中的点云设置标量域的坐标</li>
<li>Scalar fields &gt; Arithmetic：可以对在同一个点云的两个标量域进行标准运算（+，-，*，&#x2F;），或者对单个标量域进行函数运算</li>
<li>Scalar fields &gt; Color Scales Manager：色阶管理，可以管理和创建新色域</li>
<li>Scalar fields &gt; Delete：对选中的实体删除有效的标量域</li>
<li>Scalar fields &gt; Delete all (!)：对选中的实体删除全部的有效标量域</li>
</ul>
<h2 id="Tools："><a href="#Tools：" class="headerlink" title="Tools："></a>Tools：</h2><ul>
<li>Level：可以选择三个点确定一个平面来操作</li>
<li>Point picking：可以选择一个、两个、三个点来得到各种信息，如点的坐标、RGB、标量值、距离、角度等信息（尤其是两点间的距离）</li>
<li>Point list picking：可以选择多个点创建一个点列表，可以输出为一个文件、一个新点云、一个折线</li>
<li>Clean &gt; Noise filter：类似于qPCL插件的S.O.R.滤镜，但又更多功能</li>
<li>Projection &gt; Unroll：展开圆柱或圆锥体的点云成一个平面</li>
<li>Projection &gt; Rasterize：栅格化点云（转化为2.5D网格），然后可以导出为一个新点云或者一个光栅图像</li>
<li>Projection &gt; Contour plot to mesh：可以把一组折线转化为网格，输出边缘轮廓线</li>
<li>Projection &gt; Export coordinate(s) to SF(s)：导出坐标到标量域</li>
<li>Registration &gt; Match bounding-box centers：调整所有选中的实体，让它们的中心在一个地方</li>
<li>Registration &gt; Match scales：匹配所有选中实体的规模</li>
<li>Registration &gt; Align (point pairs picking)：在两个实体中挑选至少三个对应的点来对齐两个实体</li>
<li>Registration &gt; Fine registration (ICP)：自动精确地融合两个实体。前提是：①两个云大体上相融；②表现为同样的对象或者至少有同样的形状</li>
<li>Distances &gt; Cloud&#x2F;Cloud dist. (cloud-to-cloud distance)：计算两个点云之间的距离</li>
<li>Distances &gt; Cloud&#x2F;Mesh dist. (cloud-to-mesh distance)：计算点云和网格之间的距离</li>
<li>Distances &gt; Closest Point Set：计算两个点云之间最近的点的集合</li>
<li>Statistics &gt; Local Statistical Test：可以以标量域的局部统计为基础进行分割和过滤点云</li>
<li>Statistics &gt; Compute Stat. Params：计算统计分布（高斯分布、威布尔分布）</li>
<li>Segmentation &gt; Label Connected Components：设置最小距离，把所选的云分割成更小的部分，每一部分相互连接</li>
<li>Segmentation &gt; Cross Section：用户可以定义一个裁剪框，可调整框的范围和方向，来裁剪点云。可以用来：①在一个或多个维度重复分割过程；②获取多边形的轮廓</li>
<li>Segmentation &gt; Extract Sections：可以在一个点云的顶部画或者导入多边形来提取截面和轮廓</li>
<li>Fit &gt; Plane：匹配点云中的一个平面和输出各种信息，如拟合 RMS、 垂直平面、地质的倾角、倾角方向值等</li>
<li>Fit &gt; Sphere：适配点云中的一个球体</li>
<li>Fit &gt; 2D Polygon：适配点云中的二维多边形</li>
<li>Fit &gt; Quadric：适配点云中的2.5D曲面</li>
<li>Other &gt; Density：估量一个点云的密度</li>
<li>Other &gt; Curvature：估量一个点云的曲率</li>
<li>Other &gt; Roughness：估量一个点云的粗糙程度</li>
<li>Other &gt; Remove duplicate points：通过设置两点之间最小距离来删除重复的点</li>
</ul>
<h2 id="Display："><a href="#Display：" class="headerlink" title="Display："></a>Display：</h2><ul>
<li>Full screen：全屏</li>
<li>Refresh：刷新，强制刷新有效的3D视图的内容（OpenGL图形重绘）</li>
<li>Toggle Centered Perspective：在正交视图和对象中心视图模式中切换</li>
<li>Toggle Viewer Based Perspective：在正交视图和透视图中切换</li>
<li>Lock rotation about vert. axis：锁定围绕Z轴的影像旋转</li>
<li>Enter bubble-view mode：进入泡沫视图模式</li>
<li>Render to File：可以渲染当前的3D视图成一个图像文件（支持多数标准文件格式），还可以缩放以适应更大分辨率的屏幕</li>
<li>Display settings：对各种显示进行设置：颜色和材质、色阶、标签、其他</li>
<li>Camera settings：影像设置</li>
<li>Save viewport as object：保存当前3D视图的可视体的参数（影像位置和方、透视状态）为一个可视实体，这个实体自动地添加DB树的根</li>
<li>Adjust zoom：调整缩放比例</li>
<li>Test Frame Rate：测试帧速率，让有效的3D视图在一个较短时间旋转从而估量平均帧数，结果在控制台显示</li>
<li>Lights &gt; Toggle Sun Light：切换太阳光</li>
<li>Lights &gt; Toggle Custom Light：切换自定义的光</li>
<li>Shaders and Filters &gt; Remove filter：禁用任何活动的着色器或者OpenGL过滤器</li>
<li>Active scalar field &gt; Toggle color scale：为所选活动的实体切换色阶</li>
<li>Active scalar field &gt; Show previous SF：改变当前所选对象的标量域，激活先前的标量域</li>
<li>Active scalar field &gt; Show next SF：改变当前所选对象的标量域，激活下一个的标量域</li>
<li>Console：控制台（显示&#x2F;隐藏）</li>
<li>Toolbars：工具栏，包括主工具栏、标量域、视图、插件、GL滤镜</li>
<li>Reset all GUI elements：退出钱自动存储当前GUI信息（位置和工具栏的可见性等），可以恢复原始配置</li>
</ul>
<h2 id="Plugins："><a href="#Plugins：" class="headerlink" title="Plugins："></a>Plugins：</h2><h4 id="Standard-plugins："><a href="#Standard-plugins：" class="headerlink" title="Standard plugins："></a>Standard plugins：</h4><ul>
<li>qHPR (Hidden Point Removal)：如果点云是闭合曲面，则可以过滤（删除）掉通过当前3D影像不能看到的云</li>
<li>qPCL (Point Cloud Library Wrapper)：有PCL库一些方法的接口，主要包括：①计算法线和曲率②异常点和噪声点的去除③平滑点云（移动最小二乘法）</li>
<li>qPCV (ShadeVis &#x2F; Ambient Occlusion)：计算点云的明亮度，类似于光线来自于对象周围的半球或球体（可以自定义光线距离）</li>
<li>qPoissonRecon (Poisson Surface Reconstruction)：Poisson表面重建，用三角网络生成算法构建的简单的表面</li>
<li>qRansacSD (RANSAC Shape Detection)：随机抽样一致形状检测，运用自动形状检测算法的简单接口</li>
<li>qSRA (Surface of Revolution Analysis)：计算一个点云和一个假定旋转平面之间的距离（旋转平面用2D轮廓定义），距离计算好后，用户可以创建一个偏差的2D图或者圆柱或圆锥的投影</li>
<li>qCANUPO (Point Cloud Classification)：可自动对点云进行分类，也可以手动分类</li>
<li>qM3C2 (Robust C2C Distances Computation)：用独特的方法计算两个点云之间的有向（稳健）距离</li>
<li>qCork (Boolean Operations on Meshes)：可以执行网格中的布尔操作（也称CSG &#x3D; 构造实体几何），它基于Cork库</li>
<li>qAnimation：动画渲染插件</li>
<li>qFacets：可以从点云中自动提取二维切面，以它们的垂直距离分开</li>
<li>qCSF (Cloth Simulation Filter)：基于布模拟滤波算法，能实现地面点与非地面点的分离，去除非地面点</li>
<li>qCompass：简单地实现点云中地质结构的它的轨迹的数字化</li>
<li>qBroom (qVirtualBroom)：高效地扫描和清理</li>
<li>qHoughNormals：计算法法线</li>
<li>qGMMREG：对小型实体的非刚性云的匹配</li>
<li>qLAS_FWF：这个插件可以读写标准雷达文件，可以在命令模式下打开LAS 1.3+文件</li>
<li>qPoissonRecon：可以让输入的点云颜色映射到成网格（快速直接地分配到颜色接近输入点颜色的网格顶点）</li>
</ul>
<h4 id="OpenGL-‘shaders’-plugins："><a href="#OpenGL-‘shaders’-plugins：" class="headerlink" title="OpenGL ‘shaders’ plugins："></a>OpenGL ‘shaders’ plugins：</h4><ul>
<li>qEDL (Eye Dome Lighting)：实时底纹滤镜，用来在空白的点云或者网格中增强少量特质（除了几何信息外，它不依赖于其他信息）</li>
<li>qSSAO (Screen Space Ambient Occlusion)：实时底纹滤镜，与环境相似的遮挡</li>
<li>qBlur：一个简单的模糊处理滤镜，主要用于开发人员的演示</li>
</ul>
<h4 id="Deprecated"><a href="#Deprecated" class="headerlink" title="Deprecated"></a>Deprecated</h4><ul>
<li>qKinect (Point Cloud Acquisition with a Kinect)：可以用Kinect设备获取（有色的）点云</li>
</ul>
<h2 id="3D-Views："><a href="#3D-Views：" class="headerlink" title="3D Views："></a>3D Views：</h2><ul>
<li>New：创建3D视图</li>
<li>Close：关闭3D视图</li>
<li>Close All：关闭所有3D视图</li>
<li>Tile：共享的所有 3D 视图之间的显示空间</li>
<li>Cascade：用串联的方式重新排列所有 3D 视图</li>
<li>Next：激活顺序创建的下一个3D视图</li>
<li>Previous：激活顺序创建的上一个3D视图</li>
</ul>
<h2 id="Help："><a href="#Help：" class="headerlink" title="Help："></a>Help：</h2><ul>
<li>Help：<a href="http://www.cloudcompare.org/doc">帮助文档</a></li>
<li>About：CloudCompare版本信息</li>
<li>About Plugins：插件信息</li>
</ul>
<h2 id="Thanks："><a href="#Thanks：" class="headerlink" title="Thanks："></a>Thanks：</h2><ul>
<li><a href="http://www.danielgm.net/cc/">CloudCompare Documentation</a></li>
<li><a href="http://www.cloudcompare.org/doc/wiki">CloudCompare Wiki</a></li>
<li><a href="https://www.wikipedia.org/">Wikipedia</a></li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>CloudCompare</tag>
      </tags>
  </entry>
  <entry>
    <title>CloudCompare插件编写一（插件框架）</title>
    <url>/2017/04/27/CloudCompareSAFPlugin_1_Framework/</url>
    <content><![CDATA[<h2 id="唠叨"><a href="#唠叨" class="headerlink" title="唠叨"></a>唠叨</h2><p>本文唠叨了些CloudComapre这个开源软件的插件编写。</p>
<p>虽然这篇是入门教程，但是作为一只有梦想的程序猿，怎能像很多入门教程那样写个残缺的入门教程呢！</p>
<p>所以这是一个完整插件的入门教程，我们要写的插件是qSAF(Scan Angle Filter)，这是可以过滤给定范围内点的扫描角度的插件。</p>
<p>下面分三篇来介绍，分别是<a href="https://blog.huihut.com/2017/04/27/CloudCompareSAFPlugin_1_Framework/">插件框架篇</a>、<a href="https://blog.huihut.com/2017/04/27/CloudCompareSAFPlugin_2_DataStructure/">数据结构篇</a>、<a href="https://blog.huihut.com/2017/04/27/CloudCompareSAFPlugin_3_Algorithm/">算法实现篇</a>。</p>
<p>这是第一篇，<strong>插件框架篇</strong>，你可以根据本文改成自己的插件，待卿临幸。</p>
<p><strong>特别注意</strong>：本文的CloudCompare源码构建的是Qt工程并使用Qt Creator开发，并不是Visual Studio。</p>
<p>qSAF源码：<a href="https://github.com/huihut/qSAF">Github . qSAF</a></p>
<h2 id="CloudComapre"><a href="#CloudComapre" class="headerlink" title="CloudComapre"></a>CloudComapre</h2><p>CloudComapre是一个开源的3D点云和网格的处理软件，开可以处理各类点云格式的数据。</p>
<blockquote>
<ul>
<li>官网：<a href="http://www.cloudcompare.org/">http://www.cloudcompare.org/</a></li>
<li>Github：<a href="https://github.com/cloudcompare/cloudcompare">https://github.com/cloudcompare/cloudcompare</a></li>
</ul>
</blockquote>
<span id="more"></span>


<p><img src="http://www.cloudcompare.org/images/snapshot2_small.jpg"></p>
<h2 id="CloudComapre插件编写"><a href="#CloudComapre插件编写" class="headerlink" title="CloudComapre插件编写"></a>CloudComapre插件编写</h2><h3 id="使用qDummyPlugin插件模板创建自己的插件"><a href="#使用qDummyPlugin插件模板创建自己的插件" class="headerlink" title="使用qDummyPlugin插件模板创建自己的插件"></a>使用qDummyPlugin插件模板创建自己的插件</h3><p>【2018年5月30日改：现在Github上CloudComapre仓库的master分支已经移除qDummyPlugin插件，取而代之的是 ExamplePlugin插件： <a href="https://github.com/CloudCompare/CloudCompare/tree/master/plugins/example/ExamplePlugin">CloudCompare&#x2F;plugins&#x2F;example&#x2F;ExamplePlugin</a> ，原qDummyPlugin插件可在2.9.x分支或者其他早期分支上找到：<a href="https://github.com/CloudCompare/CloudCompare/tree/2.9.x/plugins/qDummyPlugin">qDummyPlugin</a>】</p>
<p>首先在Github上git下CloudComapre的源码，</p>
<p>再到 <code>CloudComapre/plugins/qDummyPlugin</code> 下</p>
<p>这个<code>qDummyPlugin</code>就是个插件的模板，用它来写自己的插件。</p>
<p>我们把这个模板插件文件夹拷贝一份，改为自己的插件名<code>qSAF</code>（当然，你也可以改为其他你喜欢的，以下不做累述）</p>
<p>现在<code>qSAF</code>里面有如下几个文件</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/qSAFFile.jpg" alt="qSAFFile.jpg"></p>
<p>我们需要做的是**把里面的<code>qDummyPlugin</code>及类似的名字改为自己的<code>qSAF</code>**。</p>
<p><strong>注意：文件名和文件里面内容都要修改！</strong></p>
<p>如：</p>
<p>原本<code>CMakeLists.txt</code>文件里面是这样的：</p>
<pre><code>cmake_minimum_required(VERSION 3.0)

#REPLACE ALL &#39;DUMMY&#39; OCCURENCES BY YOUR PLUGIN NAME
#AND ADAPT THE CODE BELOW TO YOUR OWN NEEDS!

option( INSTALL_QDUMMY_PLUGIN &quot;Check to install qDUMMY plugin&quot; OFF )

# CloudCompare &#39;DUMMY&#39; plugin
if (INSTALL_QDUMMY_PLUGIN)
    project( QDUMMY_PLUGIN )

    #load necessary libraries (see qPCV for an example)
    #add_subdirectory (LIB1)

    #if the plugin is an &#39;OpenGL filter&#39;, uncomment the line below
    #set( CC_OPENGL_FILTER ON BOOL)
    include( ../CMakePluginTpl.cmake )

    #set dependencies to necessary libraries (see qPCV for an example)
    #target_link_libraries( $&#123;PROJECT_NAME&#125; LIB1 )
    #include_directories( $&#123;LIB1_INCLUDE_DIR&#125; )
endif()
</code></pre>
<p>修改后的<code>CMakeLists.txt</code>文件里面是这样的：</p>
<pre><code>cmake_minimum_required(VERSION 3.0)

option( INSTALL_QSAF_PLUGIN &quot;Check to install qSAF plugin&quot; OFF )

if (INSTALL_QSAF_PLUGIN)

    #CloudCompare ‘SAF’ plugin

    project( QSAF_PLUGIN )

    include( ../CMakePluginTpl.cmake )

endif()
</code></pre>
<p>剩下的<code>qSAF.h</code>、<code>qSAF.cpp</code>和<code>qSAF.qrc</code>就不一一列出了</p>
<p>修改后变成这样：</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/qSAFFile2.jpg" alt="qSAFFile2"></p>
<h3 id="使用qmake构建pro文件"><a href="#使用qmake构建pro文件" class="headerlink" title="使用qmake构建pro文件"></a>使用qmake构建pro文件</h3><p>在终端进入到你的插件的<code>qSAF</code>目录，执行：</p>
<pre><code>qmake -project -r CMakeLists.txt
</code></pre>
<p>就会在<code>qSAF</code>目录下构建一个项目的pro文件。</p>
<h3 id="导入工程到QT"><a href="#导入工程到QT" class="headerlink" title="导入工程到QT"></a>导入工程到QT</h3><p>现在把CloudComapre导入到QT，</p>
<p>在<code>CloudComapre-plugins-plugins.pro</code>中，加上自己的插件：</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/QTqSAFPluginsPro.jpg"></p>
<p>保存刷新后就会在项目上看到了。</p>
<h3 id="pro文件编写"><a href="#pro文件编写" class="headerlink" title="pro文件编写"></a>pro文件编写</h3><p>由于qmake自动生成的pro文件不适合我们要写的插件，所以要自己修改pro文件。</p>
<p>pro文件的编写可以参考：</p>
<p><a href="https://blog.huihut.com/2017/04/26/QTProFile/">QT的pro文件编写</a></p>
<p>里面的常规pro文件就是qSAF的。</p>
<p>里面的路径可以不用修改，具体看你项目的Release生成的位置，</p>
<p><em><strong>特别注意：指定生成路径中的libs和plugins要正确</strong></em></p>
<h3 id="完成模板插件框架"><a href="#完成模板插件框架" class="headerlink" title="完成模板插件框架"></a>完成模板插件框架</h3><p>没错！这就完成了，你的插件已经做出来了！现在可以Run一下或者Debug一下看看啦~</p>
<p>选中点云，使用<code>qSAF</code>，会这样：</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/qSAFShoudNotBeUsedAsIs.jpg"></p>
<p>莫慌！这是正常现象，因为你的<code>qSAF</code>具体实现还没有写呢！</p>
<h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><h4 id="1-编译出错"><a href="#1-编译出错" class="headerlink" title="1. 编译出错"></a>1. 编译出错</h4><p>可能原因：</p>
<ul>
<li><code>qSAF.h</code>、<code>qSAF.cpp</code>和<code>qSAF.qrc</code>这三个文件里面的**<code>qDummyPlugin</code>及类似的名字要改为自己的<code>qSAF</code>**，如果改错或没改，可能报错。</li>
<li>自己写的代码有错，这个视情况而定</li>
</ul>
<h4 id="2-运行的CloudComapre插件上没有你编写的插件的快捷方式"><a href="#2-运行的CloudComapre插件上没有你编写的插件的快捷方式" class="headerlink" title="2. 运行的CloudComapre插件上没有你编写的插件的快捷方式"></a>2. 运行的CloudComapre插件上没有你编写的插件的快捷方式</h4><p>可能原因</p>
<ul>
<li>插件的生成路径出错了，自己插件的pro文件中的plugins指定生成路径要正确。</li>
</ul>
<h3 id="个性化插件"><a href="#个性化插件" class="headerlink" title="个性化插件"></a>个性化插件</h3><p>现在来个性化一下我们的插件</p>
<p>在<code>qSAF.h</code>中：</p>
<pre><code>// 设置插件的唯一ID
Q_PLUGIN_METADATA(IID &quot;cccorp.cloudcompare.plugin.qSAF&quot;)

// 设置插件名字
virtual QString getName() const override &#123; return &quot;SAF&quot;; &#125;

// 设置插件的描述
virtual QString getDescription() const override &#123; return &quot;Filter the scanning angle in a range of points&quot;; &#125;

// 设置插件图标，这个要在 qSAF.cpp 里设置图标路径
virtual QIcon getIcon() const override;

// 设置插件要执行的操作（重点）
void doAction();
</code></pre>
<h3 id="插件doAction"><a href="#插件doAction" class="headerlink" title="插件doAction()"></a>插件doAction()</h3><p>我们编写插件是要做些事情，在<code>CloudComapre</code>插件中就是在doAction()中实现按下插件<code>SAF</code>后要做的事。</p>
<p>这个函数在<code>qSAF.cpp</code>中，你会发现复制的模板插件的<code>doAction()</code>是这样的（把<code>qDummyPlugin</code>改为<code>qSAF</code>啦）：</p>
<pre><code>void qSAF::doAction()
&#123;
    //m_app should have already been initialized by CC when plugin is loaded!
    //(--&gt; pure internal check)
    assert(m_app);
    if (!m_app)
        return;

    /*** HERE STARTS THE ACTION ***/

    //put your code here
    //--&gt; you may want to start by asking parameters (with a custom dialog, etc.)

    //This is how you can output messages
    m_app-&gt;dispToConsole(&quot;[qSAF] Hello world!&quot;,ccMainAppInterface::STD_CONSOLE_MESSAGE); //a standard message is displayed in the console
    m_app-&gt;dispToConsole(&quot;[qSAF] Warning: qSAF plugin shouldn&#39;t be used as is!&quot;,ccMainAppInterface::WRN_CONSOLE_MESSAGE); //a warning message is displayed in the console
    m_app-&gt;dispToConsole(&quot;qSAF plugin shouldn&#39;t be used as is!&quot;,ccMainAppInterface::ERR_CONSOLE_MESSAGE); //an error message is displayed in the console AND an error box will pop-up!

    /*** HERE ENDS THE ACTION ***/

&#125;
</code></pre>
<p>我们要做的就是在</p>
<pre><code>/*** HERE STARTS THE ACTION ***/
</code></pre>
<p>下面写自己的插件代码。</p>
<p>刚才你看的错误信息就是这句：</p>
<pre><code>m_app-&gt;dispToConsole(&quot;qSAF plugin shouldn&#39;t be used as is!&quot;,ccMainAppInterface::ERR_CONSOLE_MESSAGE); 
</code></pre>
<p>这是控制台输出的错误信息。</p>
<p>错误信息(<code>ERR_CONSOLE_MESSAGE</code>)同时在控制台和窗体形式出现，而其他标准信息(<code>STD_CONSOLE_MESSAGE</code>)、警告信息(<code>WRN_CONSOLE_MESSAGE</code>)，则只在控制台显示。</p>
<p>现在删掉<code>/*** HERE STARTS THE ACTION ***/</code>下面的，改为自己的一句：</p>
<pre><code>m_app-&gt;dispToConsole(&quot;[qSAF] 程序是从错误开始的！&quot;,ccMainAppInterface::ERR_CONSOLE_MESSAGE);
</code></pre>
<p>结果如下：</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/qSAFStartFromError.jpg"></p>
<h2 id="插件框架完成"><a href="#插件框架完成" class="headerlink" title="插件框架完成"></a>插件框架完成</h2><p>现在已经完成了插件框架的编写啦。</p>
<p>其实只要使用<code>CloudComapre</code>提供的插件模板<code>qDummyPlugin</code>，改成自己的就可以啦。</p>
<p>现在可以发挥你的想象力，在<code>doAction()</code>里面随心所欲地做各种事情啦。</p>
<p>但是只有框架还不够，要想对点云进行操作，和SAF功能的具体实现，还需要了解<code>CloudComapre</code>中点云的数据结构：</p>
<p><a href="https://blog.huihut.com/2017/04/27/CloudCompareSAFPlugin_2_DataStructure/">CloudComapre插件编写二（数据结构）</a></p>
<p>如果你对点云数据结构虐它如虐狗，可以戳这里：</p>
<p><a href="https://blog.huihut.com/2017/04/27/CloudCompareSAFPlugin_3_Algorithm/">CloudComapre插件编写三（算法实现）</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>CloudCompare</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>CloudCompare插件编写二（数据结构）</title>
    <url>/2017/04/27/CloudCompareSAFPlugin_2_DataStructure/</url>
    <content><![CDATA[<h2 id="唠叨"><a href="#唠叨" class="headerlink" title="唠叨"></a>唠叨</h2><p>本文分三篇来介绍一个完整的CloudComapre插件的编写教程，分别是<a href="https://blog.huihut.com/2017/04/27/CloudCompareSAFPlugin_1_Framework/">插件框架篇</a>、<a href="https://blog.huihut.com/2017/04/27/CloudCompareSAFPlugin_2_DataStructure/">数据结构篇</a>、<a href="https://blog.huihut.com/2017/04/27/CloudCompareSAFPlugin_3_Algorithm/">算法实现篇</a>。</p>
<p>这是第二篇，<strong>数据结构篇</strong>，你可以根据本文改成自己的插件，待卿临幸。</p>
<p><strong>特别注意</strong>：本文的CloudCompare源码构建的是Qt工程并使用Qt Creator开发，并不是Visual Studio。</p>
<p>qSAF源码：<a href="https://github.com/huihut/qSAF">Github . qSAF</a></p>
<h2 id="前文概要"><a href="#前文概要" class="headerlink" title="前文概要"></a>前文概要</h2><p>在上回中，我们已经实现了插件的框架，现在要在<code>doAction()</code>中写插件的具体实现。</p>
<h2 id="插件需求"><a href="#插件需求" class="headerlink" title="插件需求"></a>插件需求</h2><p>我们要做的是一个qSAF(Scan Angle Filter)插件，它可以过滤给定范围内点的扫描角度。</p>
<p>也就是用户输入两个角度值，如<code>20</code>度、<code>70</code>度，</p>
<p>过滤输出每个点的扫描角度在大于等于<code>20</code>度、小于等于<code>70</code>度的范围的点云。</p>
<span id="more"></span>

<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>要实现这个功能，我们需要有一个界面，可以让<strong>用户输入两个角度</strong>，然后获取两个角度值，接着<strong>遍历每个点</strong>，获取<strong>每个点的扫描角度</strong>，然后获得角度在<strong>大于等于<code>20</code>度、小于等于<code>70</code>度范围</strong>的点云，显示输出。</p>
<p>简单地说，就是要：</p>
<ol>
<li>输入界面</li>
<li>遍历角度</li>
<li>输出点云</li>
</ol>
<p><code>1. 输入界面</code>是QT基础；<code>3. 输出点云</code>是CC套路；只有<code>2. 遍历角度</code>有点纠结。</p>
<p>因此本文第二篇主要介绍<code>2. 遍历角度</code>，即介绍点云中点的数据结构。</p>
<p><em><strong>注意：不同类型文件的数据结构不同，本文以激光雷达文件(<code>.las</code>)来做介绍。</strong></em></p>
<h2 id="las文件的读入"><a href="#las文件的读入" class="headerlink" title="las文件的读入"></a>las文件的读入</h2><p>首先，我们从宇宙的起源开始说起……</p>
<p>额，还是从<code>.las</code>文件的读入开始说起吧~</p>
<p><code>.las</code>文件的读入首先进过<code>FileIOFilter</code>这个类，判断是雷达文件(<code>.las</code>)后，进入<code>LASFilter</code>类，并从它的<code>loadFile()</code>函数读入。</p>
<p>先看下<code>loadFile()</code>函数声明：</p>
<pre><code>virtual CC_FILE_ERROR loadFile(QString filename, ccHObject&amp; container, LoadParameters&amp; parameters) override;
</code></pre>
<p>特别注意三个传入参数！我就是忽视了这里才找了好久。。。</p>
<ul>
<li><code>QString filename</code> 是点云文件名（包括路径）</li>
<li><code>ccHObject&amp; container</code> 是一个实体（ccHObject），可以添加点云（ccPointCloud）</li>
<li><code>LoadParameters&amp; parameters</code> 是选择读入文件后提示要勾选雷达的哪些信息</li>
</ul>
<p>然后看下<code>loadFile()</code>函数体</p>
<p><code>.las</code>文件首先从io流读入，再使用<code>liblas</code>这个外部库存储：</p>
<pre><code>liblas::Reader reader(liblas::ReaderFactory().CreateWithStream(ifs));
</code></pre>
<p>这里说下<code>liblas</code>：</p>
<p><code>liblas</code>是用于读取和编写非常常见的LAS LiDAR格式的C&#x2F;C++库，我们使用它来做对LAS的直接读取。</p>
<p>官网如下：</p>
<blockquote>
<p><a href="https://www.liblas.org/">https://www.liblas.org/</a></p>
</blockquote>
<p>然后把<code>liblas</code>读入的文件进行各种处理和封装，最终封装成<code>ccPointCloud</code></p>
<pre><code>ccPointCloud* loadedCloud = 0;

int sfIndex = loadedCloud-&gt;addScalarField(field-&gt;sf);
...
loadedCloud-&gt;setName(chunkName);
...
loadedCloud-&gt;setMetaData(LAS_SCALE_X_META_DATA, QVariant(lasScale.x));
...
loadedCloud-&gt;addPoint(P);
...
</code></pre>
<p>然后通过：</p>
<pre><code>container.addChild(loadedCloud);
</code></pre>
<p>添加到<code>ccHObject</code>中</p>
<p>所以：<strong>点云的信息，都是存储在ccPointCloud中的！</strong></p>
<p>而<strong>扫描角度存储在<code>ccPointCloud</code>的标量域中(<code>ccScalarField</code>)</strong></p>
<h2 id="ccPointCloud"><a href="#ccPointCloud" class="headerlink" title="ccPointCloud"></a>ccPointCloud</h2><p>前面已经说了很多<code>ccPointCloud</code>了，它就是CloudCompare中存储点云的类。</p>
<p>我们看看它的说明</p>
<pre><code>//! A 3D cloud and its associated features (color, normals, scalar fields, etc.)
/** A point cloud can have multiple features:
    - colors (RGB)
    - normals (compressed)
    - scalar fields
    - an octree strucutre
    - per-point visibility information (to hide/display subsets of points)
    - other children objects (meshes, calibrated pictures, etc.)
**/
</code></pre>
<p>我要的扫描角度就在<code>scalar fields</code></p>
<p>然而在<code>ccPointCloud</code>没有直接的方法获得众多标量域中的扫描角度</p>
<p>终于在它的父类<code>ChunkedPointCloud</code>中发现了</p>
<h2 id="ChunkedPointCloud"><a href="#ChunkedPointCloud" class="headerlink" title="ChunkedPointCloud"></a>ChunkedPointCloud</h2><p><code>ccPointCloud</code>的父类<code>ChunkedPointCloud</code>中有如下两个函数：</p>
<pre><code># 通过标量域名字获得其在标量域数组中的索引
int ChunkedPointCloud::getScalarFieldIndexByName(const char* name) const

# 通过索引获得特定标量域的指针
ScalarField* ChunkedPointCloud::getScalarField(int index) const
</code></pre>
<p>通过这两个函数就可以获得指向扫描角度的指针了，要想访问扫描角度中每个点的值，需要使用<code>ScalarField</code>父类<code>GenericChunkedArray</code>的方法</p>
<h2 id="GenericChunkedArray"><a href="#GenericChunkedArray" class="headerlink" title="GenericChunkedArray"></a>GenericChunkedArray</h2><pre><code># 通过每个点的索引访问特定标量域的每个的的值
inline const ElementType* getValue(unsigned index) const
</code></pre>
<h2 id="LASOpenDlg"><a href="#LASOpenDlg" class="headerlink" title="LASOpenDlg"></a>LASOpenDlg</h2><p>标量域中扫描角度的名字可以在<code>LASOpenDlg.h</code>中找到</p>
<pre><code>&quot;Scan Angle Rank&quot;
</code></pre>
<h2 id="整理下思路"><a href="#整理下思路" class="headerlink" title="整理下思路"></a>整理下思路</h2><ol>
<li>用<code>Scan Angle Rank</code>，通过<code>getScalarFieldIndexByName()</code>获得扫描角度在标量域中的索引</li>
<li>用索引，通过<code>getScalarField()</code>获得扫描角度标量域指针</li>
<li>用指针，通过<code>getValue()</code>获得每个点的值</li>
</ol>
<p>这样就获取到了每个点的扫描角度值，然后：</p>
<ol start="4">
<li>比较扫描角度值与用户输入区间的大小，把合适的值存储起来</li>
<li>把合适值封装成点云实体</li>
<li>显示在界面上</li>
</ol>
<p>上面整理的思路在下篇实现，现在我们已经知道怎么获取点云中扫描角度的值了，那其他信息呢？</p>
<h2 id="点云其他信息的获取"><a href="#点云其他信息的获取" class="headerlink" title="点云其他信息的获取"></a>点云其他信息的获取</h2><p>看下在QT的调试信息：</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/ccPointCloudDataStructure.jpg"></p>
<p>我们可以发现，其实点云的信息都能在<code>ccPointCloud</code>中获取，比如点容量、点数量、点坐标、标量域、颜色值等。</p>
<p>其中，标量域<code>vector</code>中有9项信息，存储的标量域顺序为：</p>
<ul>
<li>[0] Point Source ID</li>
<li>[1] Scan Angle Rank</li>
<li>[2] Flightline Edge</li>
<li>[3] Scan Direction</li>
<li>[4] Number of Returns</li>
<li>[5] Return Number</li>
<li>[6] Time</li>
<li>[7] Intensity</li>
<li>[8] Classification</li>
</ul>
<p>至于如何获取每种数据，都有相应的方法实现，不是在<code>ccPointCloud</code>，就是在它的父类中，耐心点总能找到的~</p>
<h2 id="下篇概要"><a href="#下篇概要" class="headerlink" title="下篇概要"></a>下篇概要</h2><p>下篇是算法实现篇，主要说了qSAF插件的具体实现，包括上面说的：</p>
<ol>
<li>输入界面</li>
<li>遍历角度</li>
<li>输出点云</li>
</ol>
<p>请戳这里：</p>
<p><a href="https://blog.huihut.com/2017/04/27/CloudCompareSAFPlugin_3_Algorithm/">CloudComapre插件编写三（算法实现）</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>CloudCompare</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>CloudCompare插件编写三（算法实现）</title>
    <url>/2017/04/27/CloudCompareSAFPlugin_3_Algorithm/</url>
    <content><![CDATA[<h2 id="唠叨"><a href="#唠叨" class="headerlink" title="唠叨"></a>唠叨</h2><p>本文分三篇来介绍一个完整的CloudComapre插件的编写教程，分别是<a href="https://blog.huihut.com/2017/04/27/CloudCompareSAFPlugin_1_Framework/">插件框架篇</a>、<a href="https://blog.huihut.com/2017/04/27/CloudCompareSAFPlugin_2_DataStructure/">数据结构篇</a>、<a href="https://blog.huihut.com/2017/04/27/CloudCompareSAFPlugin_3_Algorithm/">算法实现篇</a>。</p>
<p>这是第三篇，<strong>算法实现篇</strong>，你可以根据本文改成自己的插件，待卿临幸。</p>
<p><strong>特别注意</strong>：本文的CloudCompare源码构建的是Qt工程并使用Qt Creator开发，并不是Visual Studio。</p>
<p>qSAF源码：<a href="https://github.com/huihut/qSAF">Github . qSAF</a></p>
<h2 id="前文概要"><a href="#前文概要" class="headerlink" title="前文概要"></a>前文概要</h2><p>在上回中，我们知道了点云中扫描角度的存储结构，下面我们来讲qSAF的具体实现。</p>
<h2 id="UI界面"><a href="#UI界面" class="headerlink" title="UI界面"></a>UI界面</h2><p>新建QT设计器界面类，命名为<code>ccSAFDlg</code>，在<code>ccSAFDlg.ui</code>文件设计简单的界面。</p>
<p>因为我们只需要一个范围，一个确认取消键，所以我把它弄成这样子：</p>
<span id="more"></span>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/SAFDlg.ui.jpg"></p>
<p><code>doubleSpinBox</code>要设置范围：<code>0.00</code>到<code>90.00</code>，默认值分别设为<code>20.00</code>和<code>70.00</code>。</p>
<p><code>ccSAFDlg.h</code>：</p>
<pre><code>#ifndef CCSAFDLG_H
#define CCSAFDLG_H

#include &quot;ui_SAFDlg.h&quot;
#include &lt;QDialog&gt;

namespace Ui &#123;
class ccSAFDlg;
&#125;

class ccSAFDlg : public QDialog, public Ui::ccSAFDlg
&#123;
    Q_OBJECT

public:
    explicit ccSAFDlg(QWidget *parent = 0);

protected slots:

    //! Saves (temporarily) the dialog paramters on acceptation
    void saveSettings();
&#125;;

#endif // CCSAFDLG_H
</code></pre>
<p><code>ccSAFDlg.cpp</code>：</p>
<pre><code>#include &quot;ccSAFDlg.h&quot;

//定义两个静态阈值，并初始化
static double threshold_1 = 20;
static double threshold_2 = 70;

ccSAFDlg::ccSAFDlg(QWidget *parent) : QDialog(parent), Ui::ccSAFDlg()
&#123;
    setupUi(this);

    //关联信号槽
    connect(buttonBox, SIGNAL(accepted()), this, SLOT(saveSettings()));

    //初始化设置阈值
    doubleSpinBox_1-&gt;setValue(threshold_1);
    doubleSpinBox_2-&gt;setValue(threshold_2);
&#125;

void ccSAFDlg::saveSettings()
&#123;
    //OK后重新赋值
    threshold_1 = doubleSpinBox_1-&gt;value();
    threshold_2 = doubleSpinBox_2-&gt;value();
&#125;
</code></pre>
<p>现在界面就做好了。</p>
<h2 id="插件doAction实现"><a href="#插件doAction实现" class="headerlink" title="插件doAction实现"></a>插件doAction实现</h2><p>至于doAction的实现，点云其中的数据结构，可以参考第二篇，<a href="https://blog.huihut.com/2017/04/27/CloudCompareSAFPlugin_2_DataStructure/">数据结构篇</a></p>
<p>简单地说，我们需要：</p>
<ol>
<li>用<code>Scan Angle Rank</code>，通过<code>getScalarFieldIndexByName()</code>获得扫描角度在标量域中的索引</li>
<li>用索引，通过<code>getScalarField()</code>获得扫描角度标量域指针</li>
<li>用指针，通过<code>getValue()</code>获得每个点的值</li>
<li>比较扫描角度值与用户输入区间的大小，把合适的值存储起来</li>
<li>把合适值封装成点云实体</li>
<li>显示在界面上</li>
</ol>
<p>大体的算法思路上是没有问题的，但是有个纠结的地方，就是是否使用进度条。</p>
<p>实测SAF处理一个雷达文件，</p>
<ul>
<li>使用进度条耗时：129.1s</li>
<li>不用进度条耗时：3.5s</li>
</ul>
<p>这种压倒性的差距让我果断砍掉真·进度条，没错！我使用假·进度条，就是不会动的进度条。</p>
<p>这样短时间的处理使用假·进度条，既不会降低处理速度，也不会降低用户体验~</p>
<p>下面就是完整代码，注释中有真·进度条的实现（<code>[进度条]</code>），但不推荐使用</p>
<pre><code>void qSAF::doAction()
&#123;
    //当插件加载时，m_app应该已经被CC初始化了
    assert(m_app);
    if (!m_app)
        return;

    //获取选择的实体
    const ccHObject::Container&amp; selectedEntities = m_app-&gt;getSelectedEntities();
    //获取选择的实体数量
    size_t selNum = selectedEntities.size();
    //确保只选择一个实体
    if (selNum != 1)
    &#123;
        m_app-&gt;dispToConsole(&quot;[SAF] Select only one cloud!&quot;, ccMainAppInterface::ERR_CONSOLE_MESSAGE);
        return;
    &#125;

    ccHObject* ent = selectedEntities[0];
    assert(ent);
    //确保选择的实体是POINT_CLOUD类型
    if (!ent || !ent-&gt;isA(CC_TYPES::POINT_CLOUD))
    &#123;
        m_app-&gt;dispToConsole(&quot;[SAF] Select a real point cloud!&quot;, ccMainAppInterface::ERR_CONSOLE_MESSAGE);
        return;
    &#125;

    //从选择的实体中转换成ccPointCloud*类型
    ccPointCloud* pc = static_cast&lt;ccPointCloud*&gt;(ent);

    //获取点云的数量m_count
    unsigned count = pc-&gt;size();

    //初始化阈值变量
    static double threshold_1 = 20;
    static double threshold_2 = 70;
    double threshold_temp = 0;

    //显示插件ui窗体
    &#123;
        ccSAFDlg safDlg(m_app-&gt;getMainWindow());
        safDlg.doubleSpinBox_1-&gt;setValue(threshold_1);
        safDlg.doubleSpinBox_2-&gt;setValue(threshold_2);

        if(!safDlg.exec())
        &#123;
            return;
        &#125;

        //存储阈值
        threshold_1 = safDlg.doubleSpinBox_1-&gt;value();
        threshold_2 = safDlg.doubleSpinBox_2-&gt;value();
    &#125;

    //显示进度条窗体
    QProgressDialog pDlg;
    pDlg.setWindowTitle(&quot;SAF&quot;);
    pDlg.setLabelText(QString(&quot;Scan Angle Filter\nfrom %1 to %2&quot;).arg(threshold_1).arg(threshold_2));
    //[进度条]设置进度条总范围
    //pDlg.setRange(0, count);
    pDlg.setCancelButton(0);
    pDlg.show();
    QApplication::processEvents();
    
    QElapsedTimer timer;
    //计时开始
    timer.start();

    ScalarType scanAngle;

    CCLib::ReferenceCloud rangeAnglerc(pc);

    //确保 threshold_1 小于 threshold_2
    if(threshold_1 &gt; threshold_2)
    &#123;
        threshold_temp = threshold_1;
        threshold_1 = threshold_2;
        threshold_2 = threshold_temp;
    &#125;

    //[进度条]进度条的取消SAF按钮
    //bool wasCancelled = false;

    //获取 Scan Angle Rank 的索引
    int scanAngleSFIndex = pc-&gt;getScalarFieldIndexByName(&quot;Scan Angle Rank&quot;);

    //[重点]遍历每个点的操作
    for(unsigned i = 0; i &lt; count; ++i)
    &#123;
        //获取每个点的扫描角度
        scanAngle = pc-&gt;getScalarField(scanAngleSFIndex)-&gt;getValue(i);

        //取扫描角度的绝对值
        if(scanAngle &lt; 0)
        &#123;
            scanAngle = -scanAngle;
        &#125;

        //如果扫描角度在给定的阈值范围，则添加它的索引到参考云
        if(threshold_1 &lt;= scanAngle &amp;&amp; scanAngle &lt;= threshold_2)
        &#123;
            rangeAnglerc.addPointIndex(i);
        &#125;

//        //[进度条]重置进度条
//        pDlg.setValue(i);
//        QCoreApplication::processEvents();

//        //[进度条]取消SAF处理
//        if (pDlg.wasCanceled())
//        &#123;
//            wasCancelled = true;
//            break;
//        &#125;
    &#125;

    //把 ReferenceCloud 类型克隆成 ccPointCloud 类型
    ccPointCloud* rangeAnglepc = pc-&gt;partialClone(&amp;rangeAnglerc);

    //判断rangeAnglepc是否为空，即所选范围内是否有点
    if(!rangeAnglepc)
    &#123;
        m_app-&gt;dispToConsole(&quot;[SAF] Failed to extract the range angle subset.&quot;, ccMainAppInterface::ERR_CONSOLE_MESSAGE);
        return;
    &#125;
    //计算SAF后点数所占的百分比和SAF过程所花的时间
    m_app-&gt;dispToConsole(QString(&quot;[SAF] %1% of scan angle points are filtered&quot;).arg((rangeAnglerc.size() * 100.0) / count, 0, &#39;f&#39;, 2), ccMainAppInterface::STD_CONSOLE_MESSAGE);
    m_app-&gt;dispToConsole(QString(&quot;[SAF] Timing: %1 s.&quot;).arg(timer.elapsed() / 1000.0, 0, &#39;f&#39;, 1), ccMainAppInterface::STD_CONSOLE_MESSAGE);

    //关闭进度条
    pDlg.close();
    QApplication::processEvents();

//		//[进度条]取消SAF	
//    if (wasCancelled)
//    &#123;
//        m_app-&gt;dispToConsole(&quot;[SAF] SAF was cancelled&quot;, ccMainAppInterface::STD_CONSOLE_MESSAGE);
//        return;
//    &#125;

    //隐藏原始点云
    pc-&gt;setEnabled(false);

    //添加新的一组DB实体
    ccHObject* cloudContainer = new ccHObject(pc-&gt;getName() + QString(&quot;_saf&quot;));

    //设置新点云并添加到实体
    rangeAnglepc-&gt;setVisible(true);
    rangeAnglepc-&gt;setName(&quot;SAF Point Cloud&quot;);
    cloudContainer-&gt;addChild(rangeAnglepc);

    //添加实体到DB树
    m_app-&gt;addToDB(cloudContainer);

    //刷新
    m_app-&gt;refreshAll();
  &#125;
  
</code></pre>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/SAFDemo.jpg" width = "99%" />
      
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>经过了三篇的学习，终于实现了个完整的插件。</p>
<p>回顾我们学习的路线：<strong>插件框架</strong> -&gt; <strong>数据结构</strong> -&gt; <strong>算法实现</strong></p>
<p>我们不仅从中学会了CC插件的编写，也学到了QT的pro文件编写、QT界面设计、CC运作流程、点云数据结构等。</p>
<p>而我在学习这个插件编写的过程收获更多，因为我是看代码两个月，写代码两小时，Debug两天（差不多啦<del>不要纠结为什么222</del>）</p>
<p>看代码的过程是非常痛苦的，CC里面大量的模板编程思想，接口设计思想，还有去他继承谁爸爸的爸爸……</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/biaoqing1.gif"></p>
<p>但是期间确实学到很多，以此作为分享，望共勉！</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>CloudCompare</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>解决源码编译 ZeroC Ice 缺失 mcpp、bzip2、expat 库的问题</title>
    <url>/2017/09/06/CompileIceMissingLibrary/</url>
    <content><![CDATA[<h2 id="缺失-mcpp-库"><a href="#缺失-mcpp-库" class="headerlink" title="缺失 mcpp 库"></a>缺失 mcpp 库</h2><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><pre><code>/usr/bin/ld: cannot find -lmcpp
</code></pre>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol>
<li><p>下载最新的 nux-dextop-release*rpm 包</p>
<p> <a href="http://li.nux.ro/download/nux/dextop/el7/x86_64/">http://li.nux.ro/download/nux/dextop/el7/x86_64/</a></p>
</li>
<li><p>安装 nux-dextop-release 包</p>
<pre><code> sudo rpm -Uvh nux-dextop-release*rpm
</code></pre>
</li>
<li><p>安装 mcpp</p>
<pre><code> sudo yum install libmcpp-devel
</code></pre>
</li>
</ol>
<span id="more"></span>

<h2 id="缺失-bzip2-库"><a href="#缺失-bzip2-库" class="headerlink" title="缺失 bzip2 库"></a>缺失 bzip2 库</h2><h3 id="报错-1"><a href="#报错-1" class="headerlink" title="报错"></a>报错</h3><pre><code>src/Ice/ConnectionI.cpp:32:21: fatal error: bzlib.h: No such file or directory
#  include &lt;bzlib.h&gt;
             ^
compilation terminated.
make: *** [src/Ice/build/x64/shared/pic/ConnectionI.o] Error 1
</code></pre>
<h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><pre><code>sudo yum install bzip2-devel
</code></pre>
<h2 id="缺失-expat-库"><a href="#缺失-expat-库" class="headerlink" title="缺失 expat 库"></a>缺失 expat 库</h2><h3 id="报错-2"><a href="#报错-2" class="headerlink" title="报错"></a>报错</h3><pre><code>src/IceXML/Parser.cpp:12:19: fatal error: expat.h: No such file or directory
#include &lt;expat.h&gt;
               ^
compilation terminated.
make: *** [src/IceXML/build/x64/shared/pic/Parser.o] Error 1
</code></pre>
<h3 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h3><pre><code>sudo yum install expat-devel
</code></pre>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>链接装载库</tag>
        <tag>ZeroC-Ice</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 下源码编译 eos 人脸模型拟合库过程遇到的坑坑坑</title>
    <url>/2019/01/13/CompileEOSOnWindows/</url>
    <content><![CDATA[<p><a href="https://github.com/patrikhuber/eos">eos</a> 是一个用现代 C++11&#x2F;14 编写的轻量级三维形变人脸模型拟合库，下面介绍下编译它的步骤和遇到的一些坑坑坑坑！</p>
<ul>
<li>博文的前半部分是用手动安装的 opencv 和 boost 构建和编译的，一路是坑，最终没有编译成功；</li>
<li>博文的后半部分是用 <a href="https://github.com/Microsoft/vcpkg/">vcpkg</a> 构建系统安装的 opencv 和 boost 然后构建和编译的，最终编译成功，但是运行失败。</li>
</ul>
<p>至今为止，关于运行失败的 <a href="https://github.com/patrikhuber/eos/issues/245">issue</a> 作者也没有回复，希望有朝一日能填坑吧~</p>
<span id="more"></span>

<h2 id="初期编译环境"><a href="#初期编译环境" class="headerlink" title="初期编译环境"></a>初期编译环境</h2><ul>
<li>Windows 10</li>
<li>Visual Studio 2017</li>
<li>CMake 3.12.4</li>
<li>OpenCV 4.0.1</li>
<li>Boost 1.66.0</li>
</ul>
<h2 id="克隆配置"><a href="#克隆配置" class="headerlink" title="克隆配置"></a>克隆配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --recursive git@github.com:patrikhuber/eos.git</span><br><span class="line">mkdir eos_build</span><br></pre></td></tr></table></figure>

<p>打开 CMake-gui，设置</p>
<ul>
<li>Where is the source code: <code>D:/code/VS/BabyCreator/eos</code></li>
<li>Where to build the binaries: <code>D:/code/VS/BabyCreator/eos_build</code></li>
</ul>
<p>点击 Configure，设置编译器</p>
<ul>
<li>Specify the generator for this project: Visual Studio 15 2017</li>
<li>Finish</li>
</ul>
<p>配置过程遇到如下错误。</p>
<h2 id="Found-OpenCV-Windows-Pack-but-it-has-no-binaries-compatible-with-your-configuration-错误"><a href="#Found-OpenCV-Windows-Pack-but-it-has-no-binaries-compatible-with-your-configuration-错误" class="headerlink" title="Found OpenCV Windows Pack but it has no binaries compatible with your configuration. 错误"></a>Found OpenCV Windows Pack but it has no binaries compatible with your configuration. 错误</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Found OpenCV Windows Pack but it has no binaries compatible with your</span><br><span class="line">configuration.</span><br><span class="line"></span><br><span class="line">You should manually point CMake variable OpenCV_DIR to your build of OpenCV</span><br><span class="line">library.</span><br></pre></td></tr></table></figure>

<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/20181229012607.png" alt="20181229012607"></p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>能找到 OpenCV 路径，但找不到兼容的二进制文件。</p>
<p>出错的这个 OpenCV 是在 <a href="https://opencv.org/releases.html">opencv.org&#x2F;releases</a> 下载的 Win pack。</p>
<p>尝试过网友的解决方案【尝试二、三、四】都不能解决，最终通过【尝试五】重新下载源码编译解决，因此可能是构建环境或者编译器的问题。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>【尝试一】重新设置环境变量：<code>E:\opencv-4.0.1\opencv-4.0.1-winpack\opencv\build\x64\vc15\bin</code></p>
<p>【尝试二】在 <code>eos/CMakeCache.txt</code> 设置 OpenCV_DIR，不行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set(OpenCV_DIR &quot;D:\\code\\VS\\BabyCreator\\eos\\3rdparty\\opencv\\build&quot;)</span><br><span class="line">find_package(OpenCV REQUIRED)</span><br></pre></td></tr></table></figure>

<p>【尝试三】在终端设置 OpenCV_DIR，不行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\code\VS\BabyCreator\eos&gt; cmake . -DOpenCV_DIR=D:\\code\\VS\\BabyCreator\\eos\\3rdparty\\opencv\\build\\OpenCVConfig.cmake</span><br></pre></td></tr></table></figure>

<p>【尝试四】在 find_package 前设置 OpenCV_FOUND 为 1，不行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set(OpenCV_FOUND 1)</span><br><span class="line">find_package(OpenCV REQUIRED)</span><br></pre></td></tr></table></figure>

<p>【尝试五】下载源码编译 VS 2017 工程的 opencv，解决。</p>
<ol>
<li>在 CMake Configure、Generate</li>
<li>在 VS ALL_BUILD、INSTALL</li>
<li>执行 <code>install/setup_vars_opencv4.cmd</code></li>
<li>设置环境变量：<code>E:/opencv-4.0.1/opencv-4.0.1-vs-build/install/x86/vc15/bin</code></li>
</ol>
<h2 id="Imported-targets-and-dependency-information-not-available-for-Boost-version-错误"><a href="#Imported-targets-and-dependency-information-not-available-for-Boost-version-错误" class="headerlink" title="Imported targets and dependency information not available for Boost version 错误"></a>Imported targets and dependency information not available for Boost version 错误</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMake Warning at E:/CMake/share/cmake-3.12/Modules/FindBoost.cmake:577 (message):</span><br><span class="line">  Imported targets and dependency information not available for Boost version</span><br><span class="line">  (all versions older than 1.33)</span><br><span class="line">Call Stack (most recent call first):</span><br><span class="line">  E:/CMake/share/cmake-3.12/Modules/FindBoost.cmake:963 (_Boost_COMPONENT_DEPENDENCIES)</span><br><span class="line">  E:/CMake/share/cmake-3.12/Modules/FindBoost.cmake:1622 (_Boost_MISSING_DEPENDENCIES)</span><br><span class="line">  examples/CMakeLists.txt:22 (find_package)</span><br><span class="line">......</span><br><span class="line">Boost found at Boost_INCLUDE_DIR-NOTFOUND</span><br><span class="line">CMake Error: The following variables are used in this project, but they are set to NOTFOUND.</span><br><span class="line">Please set them or make sure they are set and tested correctly in the CMake files:</span><br><span class="line">D:/code/VS/BabyCreator/eos/examples/Boost_INCLUDE_DIR</span><br><span class="line">   used as include directory in directory D:/code/VS/BabyCreator/eos/examples</span><br><span class="line">   used as include directory in directory D:/code/VS/BabyCreator/eos/examples</span><br><span class="line">   used as include directory in directory D:/code/VS/BabyCreator/eos/examples</span><br><span class="line">   used as include directory in directory D:/code/VS/BabyCreator/eos/examples</span><br><span class="line"></span><br><span class="line">Configuring incomplete, errors occurred!</span><br></pre></td></tr></table></figure>

<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/2018-12-29_015957.png" alt="2018-12-29_015957"></p>
<h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3><p>没找到 Boost 库，原因是没配置好。</p>
<h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><p>尝试了如下方式后，这个问题变成了 <code>Unable to find the requested Boost libraries.</code></p>
<ol>
<li>下载 <a href="https://www.boost.org/users/download/">boost</a> </li>
<li>运行 <code>boost_1_66_0/b2.exe</code> 生成静态库</li>
<li>在 <code>eos/CMakeCache.txt</code> 配置 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set(BOOST_ROOT &quot;E:\\boost_1_66_0&quot;)</span><br><span class="line">set(BOOST_LIBRARYDIR $&#123;BOOST_ROOT&#125;/stage/lib)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Unable-to-find-the-requested-Boost-libraries-错误"><a href="#Unable-to-find-the-requested-Boost-libraries-错误" class="headerlink" title="Unable to find the requested Boost libraries. 错误"></a>Unable to find the requested Boost libraries. 错误</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMake Error at E:/CMake/share/cmake-3.12/Modules/FindBoost.cmake:2048 (message):</span><br><span class="line">  Unable to find the requested Boost libraries.</span><br><span class="line"></span><br><span class="line">  Boost version: 1.66.0</span><br><span class="line"></span><br><span class="line">  Boost include path: E:/boost_1_66_0</span><br><span class="line"></span><br><span class="line">  Could not find the following Boost libraries:</span><br><span class="line"></span><br><span class="line">          boost_system</span><br><span class="line">          boost_filesystem</span><br><span class="line">          boost_program_options</span><br><span class="line"></span><br><span class="line">  No Boost libraries were found.  You may need to set BOOST_LIBRARYDIR to the</span><br><span class="line">  directory containing Boost libraries or BOOST_ROOT to the location of</span><br><span class="line">  Boost.</span><br><span class="line">Call Stack (most recent call first):</span><br><span class="line">  examples/CMakeLists.txt:22 (find_package)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Boost found at E:/boost_1_66_0</span><br><span class="line">Configuring incomplete, errors occurred!</span><br></pre></td></tr></table></figure>

<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/2018-12-29_020403.png" alt="2018-12-29_020403"></p>
<h3 id="原因-2"><a href="#原因-2" class="headerlink" title="原因"></a>原因</h3><p>找到了 Boost 库，但是找不到 <code>boost_system</code>、<code>boost_filesystem</code>、<code>boost_program_options</code> 这三个库。</p>
<h3 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h3><p>这个问题太坑了，最终是把 <code>E:\boost_1_66_0\stage\lib</code> 里面的那三个库（每个有四个相关库）的名字分别删掉 <code>lib</code>，如下对 <code>boost_system</code> 的修改：</p>
<ul>
<li><code>libboost_system-vc141-mt-x32-1_66.lib</code> 改为 <code>boost_system-vc141-mt-x32-1_66.lib</code></li>
<li><code>libboost_system-vc141-mt-gd-x32-1_66.lib</code> 改为 <code>boost_system-vc141-mt-gd-x32-1_66.lib</code></li>
<li><code>libboost_system-vc141-mt-x64-1_66.lib</code> 改为 <code>boost_system-vc141-mt-x64-1_66.lib</code></li>
<li><code>libboost_system-vc141-mt-gd-x64-1_66.lib</code> 改为 <code>boost_system-vc141-mt-gd-x64-1_66.lib</code></li>
</ul>
<p>现在终于可以生成工程文件了！</p>
<p>然而 VS 打开工程后编译，又有问题。</p>
<h2 id="error-C2065-“CV-BGR2BGRA”-未声明的标识符"><a href="#error-C2065-“CV-BGR2BGRA”-未声明的标识符" class="headerlink" title="error C2065: “CV_BGR2BGRA”: 未声明的标识符"></a>error C2065: “CV_BGR2BGRA”: 未声明的标识符</h2><p>generate-obj.vcxproj</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eos\include\eos\render\texture.hpp(101): error C2065: “CV_BGR2BGRA”: 未声明的标识符 (undeclared identifier)</span><br></pre></td></tr></table></figure>

<h3 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h3><p>这个问题可以根据这个 <a href="https://github.com/patrikhuber/4dface/issues/40">issue</a>，把 <code>CV_BGR2BGRA</code> 改为 <code>cv::COLOR_BGR2BGRA</code>，或者改为 <code>0</code> 解决。</p>
<h2 id="error-LNK2005-xxx-已经在-xxx-中定义；error-LNK2019-无法解析的外部符号"><a href="#error-LNK2005-xxx-已经在-xxx-中定义；error-LNK2019-无法解析的外部符号" class="headerlink" title="error LNK2005: xxx 已经在 xxx 中定义；error LNK2019: 无法解析的外部符号"></a>error LNK2005: xxx 已经在 xxx 中定义；error LNK2019: 无法解析的外部符号</h2><p>fit-model-simple.vcxproj</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&gt;boost_program_options-vc140-mt-gd.lib(boost_program_options-vc141-mt-gd-x32-1_68.dll) : error LNK2005: &quot;public: __thiscall boost::program_options::value_semantic_codecvt_helper&lt;char&gt;::value_semantic_codecvt_helper&lt;char&gt;(void)&quot; (??0?$value_semantic_codecvt_helper@D@program_options@boost@@QAE@XZ) 已经在 boost_program_options-vc141-mt-gd-x32-1_66.lib(value_semantic.obj) 中定义</span><br><span class="line">1&gt;boost_program_options-vc140-mt-gd.lib(boost_program_options-vc141-mt-gd-x32-1_68.dll) : error LNK2005: &quot;public: virtual __thiscall boost::program_options::value_semantic_codecvt_helper&lt;char&gt;::~value_semantic_codecvt_helper&lt;char&gt;(void)&quot; (??1?$value_semantic_codecvt_helper@D@program_options@boost@@UAE@XZ) 已经在 boost_program_options-vc141-mt-gd-x32-1_66.lib(value_semantic.obj) 中定义</span><br><span class="line">1&gt;boost_program_options-vc140-mt-gd.lib(boost_program_options-vc141-mt-gd-x32-1_68.dll) : error LNK2005: &quot;void __cdecl boost::program_options::validate(class boost::any &amp;,class std::vector&lt;class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt;,class std::allocator&lt;class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; &gt; &gt; const &amp;,class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; *,int)&quot; (?validate@program_options@boost@@YAXAAVany@2@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@H@Z) 已经在 boost_program_options-vc141-mt-gd-x32-1_66.lib(value_semantic.obj) 中定义</span><br><span class="line">1&gt;boost_program_options-vc140-mt-gd.lib(boost_program_options-vc141-mt-gd-x32-1_68.dll) : error LNK2005: &quot;class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; __cdecl boost::program_options::to_internal(class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;)&quot; (?to_internal@program_options@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z) 已经在 boost_program_options-vc141-mt-gd-x32-1_66.lib(convert.obj) 中定义</span><br><span class="line">1&gt;  正在创建库 D:/code/VS/BabyCreator/eos_build/examples/Debug/fit-model-simple.lib 和对象 D:/code/VS/BabyCreator/eos_build/examples/Debug/fit-model-simple.exp</span><br><span class="line">1&gt;fit-model-simple.obj : error LNK2019: 无法解析的外部符号 &quot;class cv::Mat __cdecl cv::imread(class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;,int)&quot; (?imread@cv@@YA?AVMat@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z)，该符号在函数 __catch$_main$0 中被引用</span><br><span class="line">1&gt;fit-model-simple.obj : error LNK2019: 无法解析的外部符号 &quot;bool __cdecl cv::imwrite(class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;,class cv::debug_build_guard::_InputArray const &amp;,class std::vector&lt;int,class std::allocator&lt;int&gt; &gt; const &amp;)&quot; (?imwrite@cv@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV_InputArray@debug_build_guard@1@ABV?$vector@HV?$allocator@H@std@@@3@@Z)，该符号在函数 __catch$_main$6 中被引用</span><br><span class="line">1&gt;D:\code\VS\BabyCreator\eos_build\examples\Debug\fit-model-simple.exe : fatal error LNK1120: 2 个无法解析的外部命令</span><br></pre></td></tr></table></figure>

<h3 id="原因-3"><a href="#原因-3" class="headerlink" title="原因"></a>原因</h3><p>这个问题可能是安装的这个版本的 boost 库与什么东西不兼容吧，又是环境问题，我已经无力吐槽 Windows 了（心累）。</p>
<h3 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h3><p>这个问题我在官方仓库提了个 <a href="https://github.com/patrikhuber/eos/issues/245">issue</a>。</p>
<p>作者的意思是：我没试过你的 boost 和 opencv 的版本，可能是本地配置问题，建议用构建系统（如 <a href="https://github.com/Microsoft/vcpkg/">vcpkg</a>） 或者在 StackOverflow 上提问。</p>
<p>我：emmm……</p>
<p>所以，这个问题未解决，最后是用 vcpkg 安装库解决的。</p>
<h2 id="再次编译环境"><a href="#再次编译环境" class="headerlink" title="再次编译环境"></a>再次编译环境</h2><ul>
<li>Windows 10</li>
<li>Visual Studio 2017</li>
<li>CMake 3.12.4</li>
<li>OpenCV 3.4.3</li>
<li>Boost 1.68.0</li>
<li>vcpkg 2018.11.23-nohash</li>
</ul>
<h2 id="vcpkg-配置安装"><a href="#vcpkg-配置安装" class="headerlink" title="vcpkg 配置安装"></a>vcpkg 配置安装</h2><p>安装 vcpkg、opencv、boost</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Microsoft/vcpkg.git</span><br><span class="line">cd vcpkg</span><br><span class="line">.\bootstrap-vcpkg.bat</span><br><span class="line">.\vcpkg install opencv boost</span><br></pre></td></tr></table></figure>

<p>安装完成后，在 <code>eos</code> 同级目录下创建 build 文件夹 <code>eos_vcpkg_build</code>，如下目录结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- eos</span><br><span class="line">  - CMakeLists.txt</span><br><span class="line">  - ...</span><br><span class="line">- eos_vcpkg_build</span><br><span class="line">  - install</span><br><span class="line">  - eos.sln</span><br><span class="line">  - ...</span><br></pre></td></tr></table></figure>

<p>然后执行下面的命令构建工程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir eos_vcpkg_build</span><br><span class="line">cd eos_vcpkg_build</span><br><span class="line">cmake ../eos -DOpenCV_DIR=D:\\code\\git\\vcpkg\\buildtrees\\opencv\\x86-windows-rel -DBOOST_ROOT=D:\\code\\git\\vcpkg\\installed\\x86-windows\\bin -DBOOST_LIBRARYDIR=D:\\code\\git\\vcpkg\\installed\\x86-windows\\bin -DBOOST_INCLUDEDIR=D:\\code\\git\\vcpkg\\installed\\x86-windows\\include -DCMAKE_INSTALL_PREFIX=install/</span><br></pre></td></tr></table></figure>

<ul>
<li><code>OpenCV_DIR</code> 设为 vcpkg 安装的 <code>opencv 路径</code></li>
<li><code>BOOST_ROOT</code> 设为 vcpkg 安装的 <code>boost 路径</code></li>
<li><code>BOOST_LIBRARYDIR</code> 设为 vcpkg 安装的 <code>boost 库文件路径</code></li>
<li><code>BOOST_INCLUDEDIR</code> 设为 vcpkg 安装的 <code>boost 头文件路径</code></li>
<li><code>CMAKE_INSTALL_PREFIX</code> 即为 <code>make install 的路径</code></li>
</ul>
<p>构建好后，用 VS 打开，右键 <code>解决方案 eos</code> - <code>生成解决方案</code></p>
<p>然后选择 <code>INSTALL</code> 工程 - 右键 <code>设为启动项目</code> - 右键 <code>生成</code></p>
<p>居然成功编译并安装好了（喜极而泣）！</p>
<h2 id="eos-运行示例"><a href="#eos-运行示例" class="headerlink" title="eos 运行示例"></a>eos 运行示例</h2><p>运行下 <code>eos_vcpkg_build\install\bin\fit-model.exe</code> 示例程序吧 ~</p>
<p>根据墨菲定律，必定没这么顺利，果然……</p>
<p>一连跳几个框，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于找不到 opencv_core343.dll、opencv_imgcodecs343.dll、boost_filesystem-vc141-mt-x32-1_68.dll、jpeg62.dll、zlib1.dll 等，无法继续执行代码。重新安装重新可能会解决此问题。</span><br></pre></td></tr></table></figure>

<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/1546520602.jpg"></p>
<p>既然缺少动态库，那就去 vcpkg 安装路径下找，如果没有则用 vcpkg 安装，然后把这些 dll 放到 <code>fit-model.exe</code> 同级目录下。</p>
<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/2019-01-03_213217.png"></p>
<p>然后就……</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">应用程序无法正常启动(0xc000007b)。请点击“确定”关闭应用程序。</span><br></pre></td></tr></table></figure>

<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/2019-01-03_212959.png"></p>
<p>我：emmm……mmp</p>
<p>应该是动态库的链接错误，关于这个问题我再次开了 <a href="https://github.com/patrikhuber/eos/issues/245#issuecomment-451143760">issue</a>，但是作者不再回应了。</p>
<p>所以，在 Windows 上，只是编译成功库，但是示例都无法运行。</p>
<p>最终，在 Ubuntu 上，编译运行起来了。</p>
<p>心累。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>链接装载库</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV使用CMake和MinGW的编译安装及其在Qt配置运行</title>
    <url>/2017/12/03/CompiledOpenCVRunInQt/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博文是使用 32 位的 MinGW 在 Windows 下编译 OpenCV 生成 32 位的 dll。</p>
<p>关于使用 64 位的 MinGW 编译 OpenCV 生成 64 位的 dll，见：<a href="https://blog.huihut.com/2018/07/31/CompiledOpenCVWithMinGW64/">OpenCV使用CMake和MinGW-w64的编译安装</a></p>
<h2 id="编译好的-OpenCV（MinGW-版）："><a href="#编译好的-OpenCV（MinGW-版）：" class="headerlink" title="编译好的 OpenCV（MinGW 版）："></a>编译好的 OpenCV（MinGW 版）：</h2><p><a href="https://github.com/huihut/OpenCV-MinGW-Build">Github . huihut&#x2F;OpenCV-MinGW-Build</a></p>
<span id="more"></span>

<h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><ul>
<li>Windows-10-64bit</li>
<li><a href="https://download.qt.io/archive/qt/">Qt-5.9.3</a></li>
<li><a href="https://sourceforge.net/projects/mingw/">MinGW-5.3.0-32bit</a></li>
<li><a href="https://cmake.org/download/">CMake-3.9.2</a></li>
<li><a href="https://opencv.org/releases.html">OpenCV-3.3.1 &#x2F; 3.4.1 &#x2F; 3.4.5 &#x2F; 3.4.6 &#x2F; 3.4.7 (适用)</a></li>
</ul>
<h2 id="OpenCV-的-MSVC-版及-MinGW-版"><a href="#OpenCV-的-MSVC-版及-MinGW-版" class="headerlink" title="OpenCV 的 MSVC 版及 MinGW 版"></a>OpenCV 的 MSVC 版及 MinGW 版</h2><h3 id="MSVC-版"><a href="#MSVC-版" class="headerlink" title="MSVC 版"></a>MSVC 版</h3><p>下载的 OpenCV 文件夹会有：</p>
<ul>
<li>build （已编译好的库）</li>
<li>sources （源码）</li>
</ul>
<p>使用 MSVC 的话，直接在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">build/x64/vc14</span><br></pre></td></tr></table></figure>
<p>里面就有了，配置好路径就可以使用。</p>
<h3 id="MinGW-版"><a href="#MinGW-版" class="headerlink" title="MinGW 版"></a>MinGW 版</h3><p>OpenCV 没有为我们编译好 MinGW 版，所以我们只能自己编译，下面就是介绍 MinGW 版的编译流程。</p>
<p>也可以直接下载使用我编译好了的 OpenCV （在上文）。</p>
<h2 id="安装及配置-Qt、MinGW、CMake"><a href="#安装及配置-Qt、MinGW、CMake" class="headerlink" title="安装及配置 Qt、MinGW、CMake"></a>安装及配置 Qt、MinGW、CMake</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>CMake 自行安装，Qt 和 MinGW 可以直接使用<code>qt-opensource-windows-x86-5.9.3.exe</code> 安装包安装，注意选择安装的<code>组件(components)</code>的时候勾选 <code>MinGW</code> :</p>
<ul>
<li>Qt-Qt5.9-MingGW 5.3.0 32 bit</li>
<li>Qt-Tools-MinGW 5.3.0</li>
</ul>
<h3 id="配置-Qt、MinGW"><a href="#配置-Qt、MinGW" class="headerlink" title="配置 Qt、MinGW"></a>配置 Qt、MinGW</h3><p>安装好后打开 QtCreator，在<code>工具</code>-<code>选项</code>-<code>构建和运行</code>-<code>构建套件</code>，选中<code>Desktop Qt 5.9.3 MinGW 32bit</code>，设为默认，OK。</p>
<h2 id="添加-MinGW-到环境变量"><a href="#添加-MinGW-到环境变量" class="headerlink" title="添加 MinGW 到环境变量"></a>添加 MinGW 到环境变量</h2><p>为用户变量 <code>Path</code> 添加 <code>E:\Qt\Qt5.9.3\Tools\mingw530_32\bin</code></p>
<h2 id="使环境变量生效"><a href="#使环境变量生效" class="headerlink" title="使环境变量生效"></a>使环境变量生效</h2><p>打开命令提示符 CMD，运行 <code>set PATH=C:</code>，更改当前窗口任务的环境变量，关闭这个 CMD。</p>
<p>再次打开另一个 CMD，运行 <code>echo %PATH%</code>，显示最新的环境变量，会发现刚刚添加的 MinGW 环境变量已经生效。</p>
<h2 id="使用-CMake-生成-OpenCV-的-Makefile"><a href="#使用-CMake-生成-OpenCV-的-Makefile" class="headerlink" title="使用 CMake 生成 OpenCV 的 Makefile"></a>使用 CMake 生成 OpenCV 的 Makefile</h2><p>打开 cmake-gui，设置源码和生成路径：</p>
<ul>
<li>Where is the source code: <code>E:/OpenCV_3.3.1/opencv/sources</code></li>
<li>Where to build the binaries: <code>E:/OpenCV_3.3.1/opencv-build</code></li>
</ul>
<p>点击 Configure，设置编译器</p>
<ul>
<li>Specify the generator for this project: <code>MinGW Makefiles</code></li>
<li>Specify native compilers</li>
<li>Next</li>
<li>Compilers C: <code>E:\Qt\Qt5.9.3\Tools\mingw530_32\bin\gcc.exe</code></li>
<li>Compilers C++: <code>E:\Qt\Qt5.9.3\Tools\mingw530_32\bin\g++.exe</code></li>
<li>Finish</li>
</ul>
<p>编译配置：</p>
<ul>
<li>勾选 <code>WITH_QT</code></li>
<li>勾选 <code>WITH_OPENGL</code></li>
</ul>
<p>点击 Configure，再次配置：</p>
<ul>
<li>不勾选 <code>WITH_IPP</code></li>
<li>设置 <code>QT_MAKE_EXECUTABLE</code> 为 <code>E:\Qt\Qt5.9.3\5.9.3\mingw53_32\bin\qmake.exe</code></li>
<li>设置 <code>Qt5Concurrent_DIR</code> 为 <code>E:\Qt\Qt5.9.3\5.9.3\mingw53_32\lib\cmake\Qt5Concurrent</code></li>
<li>设置 <code>Qt5Core_DIR</code> 为 <code>E:\Qt\Qt5.9.3\5.9.3\mingw53_32\lib\cmake\Qt5Core</code></li>
<li>设置 <code>Qt5Gui_DIR</code> 为 <code>E:\Qt\Qt5.9.3\5.9.3\mingw53_32\lib\cmake\Qt5Gui</code></li>
<li>设置 <code>Qt5Test_DIR</code> 为 <code>E:\Qt\Qt5.9.3\5.9.3\mingw53_32\lib\cmake\Qt5Test</code></li>
<li>设置 <code>Qt5Widgets_DIR</code> 为 <code>E:\Qt\Qt5.9.3\5.9.3\mingw53_32\lib\cmake\Qt5Widgets</code></li>
<li>设置 <code>Qt5OpenGL_DIR</code> 为 <code>E:\Qt\Qt5.9.3\5.9.3\mingw53_32\lib\cmake\Qt5OpenGL</code></li>
<li>设置 <code>CMAKE_BUILD_TYPE</code> 为 <code>Release</code> 或者 <code>RelWithDebInfo</code></li>
</ul>
<p>点击 Generate 生成 Makefile</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/OpenCVCMakeGenerate.png" alt="OpenCVCMakeGenerate"></p>
<h2 id="编译-OpenCV"><a href="#编译-OpenCV" class="headerlink" title="编译 OpenCV"></a>编译 OpenCV</h2><p>打开终端进行编译：（<code>-j</code> 是使用 <code>8</code> 个线程进行编译，请根据你的计算机配置合理设置线程数）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:</span><br><span class="line">cd E:\OpenCV_3.3.1\opencv-build</span><br><span class="line">mingw32-make -j 8</span><br><span class="line">mingw32-make install</span><br></pre></td></tr></table></figure>

<p>如果 <code>mingw32-make -j 8</code> 遇到错误，请看下面的  <strong>编译 OpenCV 常见错误</strong>，否则执行 <code>mingw32-make install</code>，完成安装。</p>
<h2 id="编译-OpenCV-常见错误"><a href="#编译-OpenCV-常见错误" class="headerlink" title="编译 OpenCV 常见错误"></a>编译 OpenCV 常见错误</h2><h3 id="0-多线程编译错误信息不明确"><a href="#0-多线程编译错误信息不明确" class="headerlink" title="0. 多线程编译错误信息不明确"></a>0. 多线程编译错误信息不明确</h3><h4 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h4><p>如果使用了多线程编译，导致错误，但是错误信息不明确，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Makefile:161: recipe for target &#x27;all&#x27; failed</span><br><span class="line">mingw32-make: *** [all] Error 2</span><br></pre></td></tr></table></figure>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MakeOpenCV_cap_dshow.png" alt="MakeOpenCV_cap_dshow"></p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>使用单线程编译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mingw32-make</span><br></pre></td></tr></table></figure>

<p>以查看详细的错误提示，再根据具体情况解决。</p>
<h3 id="1-RC-错误"><a href="#1-RC-错误" class="headerlink" title="1. RC 错误"></a>1. RC 错误</h3><h4 id="表现-1"><a href="#表现-1" class="headerlink" title="表现"></a>表现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">... windres.exe: unknown option -- W ...</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FORMAT is one of rc, res, or coff, and is deduced from the file name</span><br><span class="line">extension if not specified.  A single file name is an input file.</span><br><span class="line">No input-file is stdin, default rc.  No output-file is stdout, default rc.</span><br></pre></td></tr></table></figure>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MakeOpenCVRCError.png" alt="MakeOpenCVRCError"></p>
<h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><p>在 cmake-gui 编译配置中：</p>
<ul>
<li>不勾选 <code>ENABLE_PRECOMPILED_HEADERS</code></li>
</ul>
<p>然后重新 <code>Configure</code>-<code>Generate</code>-<code>mingw32-make</code></p>
<h3 id="2-sprintf-instead-use-StringCbPrintfA-or-StringCchPrintfA-错误"><a href="#2-sprintf-instead-use-StringCbPrintfA-or-StringCchPrintfA-错误" class="headerlink" title="2. sprintf_instead_use_StringCbPrintfA_or_StringCchPrintfA 错误"></a>2. sprintf_instead_use_StringCbPrintfA_or_StringCchPrintfA 错误</h3><h4 id="表现-2"><a href="#表现-2" class="headerlink" title="表现"></a>表现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...opencv/sources/modules/videoio/src/cap_dshow.cpp...</span><br><span class="line">... &#x27;sprintf_instead_use_StringCbPrintfA_or_StringCchPrintfA&#x27; was not declared in this scope ...</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Makefile:161: recipe for target &#x27;all&#x27; failed</span><br><span class="line">mingw32-make: *** [all] Error 2</span><br></pre></td></tr></table></figure>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MakeOpenCV_cap_dshow.png" alt="MakeOpenCV_cap_dshow"></p>
<h4 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h4><p>修改<code>E:\OpenCV_3.3.1\opencv\sources\modules\videoio\src\cap_dshow.cpp</code>文件，在<code>#include &quot;DShow.h&quot;</code>这行的上面加一行<code>#define NO_DSHOW_STRSAFE</code>，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define NO_DSHOW_STRSAFE</span><br><span class="line">#include &quot;DShow.h&quot;</span><br></pre></td></tr></table></figure>

<p>然后重新 <code>Configure</code>-<code>Generate</code>-<code>mingw32-make</code></p>
<h3 id="3-identifier-‘nullptr’-is-a-keyword-in-C-11-错误【2018年3月2日编译OpenCV-3-4-1时遇到并解决】"><a href="#3-identifier-‘nullptr’-is-a-keyword-in-C-11-错误【2018年3月2日编译OpenCV-3-4-1时遇到并解决】" class="headerlink" title="3. identifier ‘nullptr’ is a keyword in C++11 错误【2018年3月2日编译OpenCV 3.4.1时遇到并解决】"></a>3. identifier ‘nullptr’ is a keyword in C++11 错误【2018年3月2日编译OpenCV 3.4.1时遇到并解决】</h3><h4 id="表现-3"><a href="#表现-3" class="headerlink" title="表现"></a>表现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\opencv-3.4.1\opencv-3.4.1\3rdparty\protobuf\src\google\protobuf\stubs\io_win32.cc:94:3: warning: identifier &#x27;nullptr&#x27; is a keyword in C++11 [-Wc++0x-compat]</span><br><span class="line">   return s == nullptr || *s == 0;</span><br><span class="line">   ^</span><br><span class="line">D:\opencv-3.4.1\opencv-3.4.1\3rdparty\protobuf\src\google\protobuf\stubs\io_win32.cc: In function &#x27;bool google::protobuf::internal::win32::&#123;anonymous&#125;::null_or_empty(const char_type*)&#x27;:</span><br><span class="line">D:\opencv-3.4.1\opencv-3.4.1\3rdparty\protobuf\src\google\protobuf\stubs\io_win32.cc:94:15: error: &#x27;nullptr&#x27; was not declared in this scope</span><br><span class="line">   return s == nullptr || *s == 0;</span><br><span class="line">               ^</span><br><span class="line">3rdparty\protobuf\CMakeFiles\libprotobuf.dir\build.make:412: recipe for target &#x27;3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/io_win32.cc.obj&#x27; failed</span><br><span class="line">mingw32-make[2]: *** [3rdparty/protobuf/CMakeFiles/libprotobuf.dir/src/google/protobuf/stubs/io_win32.cc.obj] Error 1</span><br><span class="line">CMakeFiles\Makefile2:710: recipe for target &#x27;3rdparty/protobuf/CMakeFiles/libprotobuf.dir/all&#x27; failed</span><br><span class="line">mingw32-make[1]: *** [3rdparty/protobuf/CMakeFiles/libprotobuf.dir/all] Error 2</span><br><span class="line">Makefile:161: recipe for target &#x27;all&#x27; failed</span><br><span class="line">mingw32-make: *** [all] Error 2</span><br></pre></td></tr></table></figure>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MakeOpenCV_nullptr_Error.png" alt="MakeOpenCV_nullptr_Error"></p>
<h4 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h4><p>在 cmake-gui 编译配置中：</p>
<ul>
<li>勾选 <code>ENABLE_CXX11</code></li>
</ul>
<p>然后重新 <code>Configure</code>-<code>Generate</code>-<code>mingw32-make</code></p>
<h3 id="4-‘chmod’-不是内部或外部命令，也不是可运行的程序-或批处理文件-‘chmod’-is-not-recognized-as-an-internal-or-external-command【2019年9月2日编译OpenCV-3-4-7时遇到并解决】"><a href="#4-‘chmod’-不是内部或外部命令，也不是可运行的程序-或批处理文件-‘chmod’-is-not-recognized-as-an-internal-or-external-command【2019年9月2日编译OpenCV-3-4-7时遇到并解决】" class="headerlink" title="4. ‘chmod’ 不是内部或外部命令，也不是可运行的程序 或批处理文件 | ‘chmod’ is not recognized as an internal or external command【2019年9月2日编译OpenCV 3.4.7时遇到并解决】"></a>4. ‘chmod’ 不是内部或外部命令，也不是可运行的程序 或批处理文件 | ‘chmod’ is not recognized as an internal or external command【2019年9月2日编译OpenCV 3.4.7时遇到并解决】</h3><h4 id="表现-4"><a href="#表现-4" class="headerlink" title="表现"></a>表现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;chmod&#x27; 不是内部或外部命令，也不是可运行的程序 或批处理文件</span><br></pre></td></tr></table></figure>

<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/MakeOpenCV_chmod_Error.png" alt="MakeOpenCV_chmod_Error"></p>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>在 <code>E:\opencv-3.4.7\opencv-3.4.7\cmake\OpenCVPCHSupport.cmake</code> 中使用了 <code>chmod</code> 命令，然而 Windows 下不支持 <code>chmod</code> 命令，因此报错。</p>
<h4 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h4><p>判断系统是否 Windows，若是 Windows，则不使用 <code>COMMAND chmod +x &quot;$&#123;_pch_generate_file_cmd&#125;&quot;</code>，如我提的 PR 中的修改：<a href="https://github.com/opencv/opencv/pull/15433/files">fix ‘chmod’ is not recognized as an internal or external command in Windows #15433</a></p>
<p>修改后再重新 <code>Configure</code>-<code>Generate</code>-<code>mingw32-make</code></p>
<h3 id="5-test-common-hpp-No-such-file-or-directory【2019年9月2日编译OpenCV-3-4-7时遇到并解决】"><a href="#5-test-common-hpp-No-such-file-or-directory【2019年9月2日编译OpenCV-3-4-7时遇到并解决】" class="headerlink" title="5. test_common.hpp: No such file or directory【2019年9月2日编译OpenCV 3.4.7时遇到并解决】"></a>5. test_common.hpp: No such file or directory【2019年9月2日编译OpenCV 3.4.7时遇到并解决】</h3><h4 id="表现-5"><a href="#表现-5" class="headerlink" title="表现"></a>表现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In file included from &lt;command-line&gt;:0:0:</span><br><span class="line">E:/opencv-3.4.7/opencv-3.4.7-build/modules/dnn/test_precomp.hpp:50:10: fatal error: test_common.hpp: No such file or directory</span><br><span class="line"> #include &quot;test_common.hpp&quot;</span><br><span class="line">          ^~~~~~~~~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure>

<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/MakeOpenCV_test_common_Error.png" alt="MakeOpenCV_test_common_Error"></p>
<h4 id="解决-5"><a href="#解决-5" class="headerlink" title="解决"></a>解决</h4><p>方法一：（<a href="https://github.com/opencv/opencv/issues/15381">issues&#x2F;15381</a>）</p>
<p>在 cmake-gui 编译配置中：</p>
<ul>
<li>不勾选 <code>ENABLE_PRECOMPILED_HEADERS</code>（禁用预编译头）</li>
</ul>
<p>然后重新 <code>Configure</code>-<code>Generate</code>-<code>mingw32-make</code></p>
<p>方法二：</p>
<p>把 <code>E:\opencv-3.4.7\opencv-3.4.7\modules\dnn\test\test_common.hpp</code> 复制到 <code>E:\opencv-3.4.7\opencv-3.4.7-build\modules\dnn\</code> 目录下</p>
<p>然后继续 <code>mingw32-make</code></p>
<h2 id="添加-OpenCV-编译的库到环境变量"><a href="#添加-OpenCV-编译的库到环境变量" class="headerlink" title="添加 OpenCV 编译的库到环境变量"></a>添加 OpenCV 编译的库到环境变量</h2><ul>
<li>为系统变量 <code>Path</code> 添加 <code>E:\OpenCV_3.3.1\opencv-build\install\x86\mingw\bin</code></li>
</ul>
<h2 id="新建-OpenCV-的-Qt-项目"><a href="#新建-OpenCV-的-Qt-项目" class="headerlink" title="新建 OpenCV 的 Qt 项目"></a>新建 OpenCV 的 Qt 项目</h2><p>在 <code>.pro</code> 文件里面添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win32 &#123;</span><br><span class="line">INCLUDEPATH += E:\OpenCV_3.3.1\opencv-build\install\include</span><br><span class="line">LIBS += E:\OpenCV_3.3.1\opencv-build\install\x86\mingw\bin\libopencv_*.dll</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者：（区分 debug 和 release 是因为 OpenCV 对其两者有不同的库，你需要把路径改为你自己的，我编译 MinGW 的 OpenCV 只有 release 库）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win32 &#123;</span><br><span class="line">INCLUDEPATH += E:\OpenCV_3.3.1\opencv-build\install\include</span><br><span class="line">CONFIG(debug, debug|release): &#123;</span><br><span class="line">LIBS += E:\OpenCV_3.3.1\opencv-build\install\x86\mingw\bin\libopencv_*d.dll</span><br><span class="line">&#125; else:CONFIG(release, debug|release): &#123;</span><br><span class="line">LIBS += -LE:\OpenCV_3.3.1\opencv-build\install\x86\mingw\bin \</span><br><span class="line">    -llibopencv_core331 \</span><br><span class="line">    -llibopencv_highgui331 \</span><br><span class="line">    -llibopencv_imgcodecs331 \</span><br><span class="line">    -llibopencv_imgproc331 \</span><br><span class="line">    -llibopencv_features2d331 \</span><br><span class="line">    -llibopencv_calib3d331</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/OpenCVMinGWBin.png" alt="OpenCVMinGWBin"></p>
<p>然后在 MainWindow 中如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &quot;ui_mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;opencv2/core/core.hpp&gt;</span><br><span class="line">#include &lt;opencv2/highgui/highgui.hpp&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(new Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line"></span><br><span class="line">    // read an image</span><br><span class="line">    cv::Mat image = cv::imread(&quot;E:/Pictures/H_white.png&quot;, 1);</span><br><span class="line">    // create image window named &quot;My Image&quot;</span><br><span class="line">    cv::namedWindow(&quot;My Image&quot;);</span><br><span class="line">    // show the image on window</span><br><span class="line">    cv::imshow(&quot;My Image&quot;, image);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">    delete ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后运行起来了，效果如图：</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/OpenCVQtDemo.png" alt="OpenCVQtDemo"></p>
<h2 id="官方教程"><a href="#官方教程" class="headerlink" title="官方教程"></a>官方教程</h2><ul>
<li><a href="https://wiki.qt.io/How_to_setup_Qt_and_openCV_on_Windows">How to setup Qt and openCV on Windows</a></li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>链接装载库</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV使用CMake和MinGW-w64的编译安装</title>
    <url>/2018/07/31/CompiledOpenCVWithMinGW64/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写过的一篇博文：<a href="https://blog.huihut.com/2017/12/03/CompiledOpenCVRunInQt/">OpenCV使用CMake和MinGW的编译安装及其在Qt配置运行</a> 是使用 32 位的 MinGW 在 Windows 下编译 OpenCV 生成 32 位的 dll。</p>
<p>而这篇博文是使用 64 位的 MinGW 编译 OpenCV 生成 64 位的 dll。</p>
<p>因为博主没有 64 位 qmake，所以没勾选 <code>WITH_QT</code></p>
<h2 id="编译好的-OpenCV（MinGW-版）："><a href="#编译好的-OpenCV（MinGW-版）：" class="headerlink" title="编译好的 OpenCV（MinGW 版）："></a>编译好的 OpenCV（MinGW 版）：</h2><p><a href="https://github.com/huihut/OpenCV-MinGW-Build">Github . huihut&#x2F;OpenCV-MinGW-Build</a></p>
<span id="more"></span>

<h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><ul>
<li>Windows-10-64bit</li>
<li><a href="http://sourceforge.net/projects/mingwbuilds/files/host-windows/releases/4.8.1/64-bit/threads-posix/seh/x64-4.8.1-release-posix-seh-rev5.7z/download">MinGW-x64-4.8.1-release-posix-seh-rev5</a></li>
<li><a href="https://cmake.org/download/">CMake-3.12.0</a></li>
<li><a href="https://opencv.org/releases.html">OpenCV-3.4.1</a> | <a href="https://opencv.org/releases.html">OpenCV-4.0.0-alpha</a> | <a href="https://opencv.org/releases.html">OpenCV-4.0.0-rc</a> | <a href="https://opencv.org/releases.html">OpenCV-4.1.0</a></li>
</ul>
<h2 id="安装-MinGW-w64-并配置环境变量"><a href="#安装-MinGW-w64-并配置环境变量" class="headerlink" title="安装 MinGW-w64 并配置环境变量"></a>安装 MinGW-w64 并配置环境变量</h2><p>下载安装：<a href="http://sourceforge.net/projects/mingwbuilds/files/host-windows/releases/4.8.1/64-bit/threads-posix/seh/x64-4.8.1-release-posix-seh-rev5.7z/download">MinGW-x64-4.8.1-release-posix-seh-rev5</a></p>
<p>（博文使用 MinGW-x64-4.8.1 为例，但建议使用最新 MinGW：<a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">MinGW-w64 - for 32 and 64 bit Windows</a>）</p>
<p>为用户变量 <code>Path</code> 添加 <code>E:\MinGW-w64\x64-4.8.1-release-posix-seh-rev5\mingw64\bin</code></p>
<h2 id="使环境变量生效"><a href="#使环境变量生效" class="headerlink" title="使环境变量生效"></a>使环境变量生效</h2><p>打开命令提示符 CMD，运行 <code>set PATH=C:</code>，更改当前窗口任务的环境变量，关闭这个 CMD。</p>
<p>再次打开另一个 CMD，运行 <code>echo %PATH%</code>，显示最新的环境变量，会发现刚刚添加的 MinGW 环境变量已经生效。</p>
<h2 id="使用-CMake-生成-OpenCV-的-Makefile"><a href="#使用-CMake-生成-OpenCV-的-Makefile" class="headerlink" title="使用 CMake 生成 OpenCV 的 Makefile"></a>使用 CMake 生成 OpenCV 的 Makefile</h2><p>打开 cmake-gui，设置源码和生成路径：</p>
<ul>
<li>Where is the source code: <code>E:/opencv_341/opencv/sources</code></li>
<li>Where to build the binaries: <code>E:/opencv_341/opencv_mingw64_build</code></li>
</ul>
<p>点击 Configure，设置编译器</p>
<ul>
<li>Specify the generator for this project: <code>MinGW Makefiles</code></li>
<li>Specify native compilers</li>
<li>Next</li>
<li>Compilers C: <code>E:\MinGW-w64\x64-4.8.1-release-posix-seh-rev5\mingw64\bin\gcc.exe</code></li>
<li>Compilers C++: <code>E:\MinGW-w64\x64-4.8.1-release-posix-seh-rev5\mingw64\bin\g++.exe</code></li>
<li>Finish</li>
</ul>
<p>编译配置：</p>
<ul>
<li>勾选 <code>WITH_OPENGL</code></li>
<li>勾选 <code>ENABLE_CXX11</code></li>
<li>不勾选 <code>WITH_IPP</code></li>
<li>不勾选 <code>ENABLE_PRECOMPILED_HEADERS</code></li>
</ul>
<p>点击 Configure，Generate 生成 Makefile</p>
<p>博主的配置信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">General configuration for OpenCV 3.4.1 =====================================</span><br><span class="line">  Version control:               unknown</span><br><span class="line"></span><br><span class="line">  Platform:</span><br><span class="line">    Timestamp:                   2018-07-31T02:14:11Z</span><br><span class="line">    Host:                        Windows 10.0.17134 AMD64</span><br><span class="line">    CMake:                       3.12.0</span><br><span class="line">    CMake generator:             MinGW Makefiles</span><br><span class="line">    CMake build tool:            E:/MinGW-w64/x64-4.8.1-release-posix-seh-rev5/mingw64/bin/mingw32-make.exe</span><br><span class="line">    Configuration:               Release</span><br><span class="line"></span><br><span class="line">  CPU/HW features:</span><br><span class="line">    Baseline:                    SSE SSE2 SSE3</span><br><span class="line">      requested:                 SSE3</span><br><span class="line">    Dispatched code generation:  SSE4_1 SSE4_2 FP16 AVX AVX2</span><br><span class="line">      requested:                 SSE4_1 SSE4_2 AVX FP16 AVX2 AVX512_SKX</span><br><span class="line">      SSE4_1 (3 files):          + SSSE3 SSE4_1</span><br><span class="line">      SSE4_2 (1 files):          + SSSE3 SSE4_1 POPCNT SSE4_2</span><br><span class="line">      FP16 (2 files):            + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 AVX</span><br><span class="line">      AVX (5 files):             + SSSE3 SSE4_1 POPCNT SSE4_2 AVX</span><br><span class="line">      AVX2 (9 files):            + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 FMA3 AVX AVX2</span><br><span class="line"></span><br><span class="line">  C/C++:</span><br><span class="line">    Built as dynamic libs?:      YES</span><br><span class="line">    C++11:                       YES</span><br><span class="line">    C++ Compiler:                E:/MinGW-w64/x64-4.8.1-release-posix-seh-rev5/mingw64/bin/g++.exe  (ver 4.8.1)</span><br><span class="line">    C++ flags (Release):         -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-comment -fdiagnostics-show-option -Wno-long-long -fomit-frame-pointer -ffunction-sections -fdata-sections  -msse -msse2 -msse3 -fvisibility=hidden -fvisibility-inlines-hidden -O3 -DNDEBUG  -DNDEBUG</span><br><span class="line">    C++ flags (Debug):           -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-comment -fdiagnostics-show-option -Wno-long-long -fomit-frame-pointer -ffunction-sections -fdata-sections  -msse -msse2 -msse3 -fvisibility=hidden -fvisibility-inlines-hidden -g  -O0 -DDEBUG -D_DEBUG</span><br><span class="line">    C Compiler:                  E:/MinGW-w64/x64-4.8.1-release-posix-seh-rev5/mingw64/bin/gcc.exe</span><br><span class="line">    C flags (Release):           -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-narrowing -Wno-comment -fdiagnostics-show-option -Wno-long-long -fomit-frame-pointer -ffunction-sections -fdata-sections  -msse -msse2 -msse3 -fvisibility=hidden -O3 -DNDEBUG  -DNDEBUG</span><br><span class="line">    C flags (Debug):             -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-narrowing -Wno-comment -fdiagnostics-show-option -Wno-long-long -fomit-frame-pointer -ffunction-sections -fdata-sections  -msse -msse2 -msse3 -fvisibility=hidden -g  -O0 -DDEBUG -D_DEBUG</span><br><span class="line">    Linker flags (Release):      -Wl,--gc-sections  </span><br><span class="line">    Linker flags (Debug):        -Wl,--gc-sections  </span><br><span class="line">    ccache:                      NO</span><br><span class="line">    Precompiled headers:         NO</span><br><span class="line">    Extra dependencies:          opengl32 glu32</span><br><span class="line">    3rdparty dependencies:</span><br><span class="line"></span><br><span class="line">  OpenCV modules:</span><br><span class="line">    To be built:                 calib3d core dnn features2d flann highgui imgcodecs imgproc java_bindings_generator ml objdetect photo python_bindings_generator shape stitching superres ts video videoio videostab</span><br><span class="line">    Disabled:                    js world</span><br><span class="line">    Disabled by dependency:      -</span><br><span class="line">    Unavailable:                 cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev java python2 python3 viz</span><br><span class="line">    Applications:                tests perf_tests apps</span><br><span class="line">    Documentation:               NO</span><br><span class="line">    Non-free algorithms:         NO</span><br><span class="line"></span><br><span class="line">  Windows RT support:            NO</span><br><span class="line"></span><br><span class="line">  GUI: </span><br><span class="line">    Win32 UI:                    YES</span><br><span class="line">    OpenGL support:              YES (opengl32 glu32)</span><br><span class="line">    VTK support:                 NO</span><br><span class="line"></span><br><span class="line">  Media I/O: </span><br><span class="line">    ZLib:                        build (ver 1.2.11)</span><br><span class="line">    JPEG:                        build (ver 90)</span><br><span class="line">    WEBP:                        build (ver encoder: 0x020e)</span><br><span class="line">    PNG:                         build (ver 1.6.34)</span><br><span class="line">    TIFF:                        build (ver 42 - 4.0.9)</span><br><span class="line">    JPEG 2000:                   build (ver 1.900.1)</span><br><span class="line">    OpenEXR:                     build (ver 1.7.1)</span><br><span class="line"></span><br><span class="line">  Video I/O:</span><br><span class="line">    Video for Windows:           YES</span><br><span class="line">    DC1394:                      NO</span><br><span class="line">    FFMPEG:                      YES (prebuilt binaries)</span><br><span class="line">      avcodec:                   YES (ver 57.107.100)</span><br><span class="line">      avformat:                  YES (ver 57.83.100)</span><br><span class="line">      avutil:                    YES (ver 55.78.100)</span><br><span class="line">      swscale:                   YES (ver 4.8.100)</span><br><span class="line">      avresample:                YES (ver 3.7.0)</span><br><span class="line">    GStreamer:                   NO</span><br><span class="line">    DirectShow:                  YES</span><br><span class="line"></span><br><span class="line">  Parallel framework:            none</span><br><span class="line"></span><br><span class="line">  Trace:                         YES (built-in)</span><br><span class="line"></span><br><span class="line">  Other third-party libraries:</span><br><span class="line">    Lapack:                      NO</span><br><span class="line">    Eigen:                       NO</span><br><span class="line">    Custom HAL:                  NO</span><br><span class="line">    Protobuf:                    build (3.5.1)</span><br><span class="line"></span><br><span class="line">  NVIDIA CUDA:                   NO</span><br><span class="line"></span><br><span class="line">  OpenCL:                        YES (no extra features)</span><br><span class="line">    Include path:                E:/opencv_341/opencv/sources/3rdparty/include/opencl/1.2</span><br><span class="line">    Link libraries:              Dynamic load</span><br><span class="line"></span><br><span class="line">  Python (for build):            E:/Python37-32/python.exe</span><br><span class="line"></span><br><span class="line">  Java:                          </span><br><span class="line">    ant:                         NO</span><br><span class="line">    JNI:                         C:/Program Files (x86)/Java/jdk1.8.0_181/include C:/Program Files (x86)/Java/jdk1.8.0_181/include/win32 C:/Program Files (x86)/Java/jdk1.8.0_181/include</span><br><span class="line">    Java wrappers:               NO</span><br><span class="line">    Java tests:                  NO</span><br><span class="line"></span><br><span class="line">  Matlab:                        NO</span><br><span class="line"></span><br><span class="line">  Install to:                    E:/opencv_341/opencv_mingw64_build/install</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Configuring done</span><br><span class="line">Generating done</span><br></pre></td></tr></table></figure>

<h2 id="编译-OpenCV"><a href="#编译-OpenCV" class="headerlink" title="编译 OpenCV"></a>编译 OpenCV</h2><p>打开终端进行编译：（<code>-j</code> 是使用 <code>8</code> 个线程进行编译，请根据你的计算机配置合理设置线程数）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:</span><br><span class="line">cd E:\opencv_341\opencv_mingw64_build</span><br><span class="line">mingw32-make -j 8</span><br><span class="line">mingw32-make install</span><br></pre></td></tr></table></figure>

<p>如果 <code>mingw32-make -j 8</code> 遇到错误，请看下面的  <strong>编译 OpenCV 常见错误</strong>，否则执行 <code>mingw32-make install</code>，完成安装。</p>
<h2 id="编译-OpenCV-常见错误"><a href="#编译-OpenCV-常见错误" class="headerlink" title="编译 OpenCV 常见错误"></a>编译 OpenCV 常见错误</h2><h3 id="1-MinGW-w64-的-aviriff-h-文件注释错误"><a href="#1-MinGW-w64-的-aviriff-h-文件注释错误" class="headerlink" title="1. MinGW-w64 的 aviriff.h 文件注释错误"></a>1. MinGW-w64 的 aviriff.h 文件注释错误</h3><h4 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ 49%] Building CXX object modules/videoio/CMakeFiles/opencv_videoio.dir/src/cap_dshow.cpp.obj</span><br><span class="line">In file included from E:\opencv_341\opencv\sources\modules\videoio\src\cap_dshow.cpp:113:0:</span><br><span class="line">e:\mingw-w64\x64-4.8.1-release-posix-seh-rev5\mingw64\x86_64-w64-mingw32\include\aviriff.h:2:8: error: expected constructor, destructor, or type conversion before &#x27;file&#x27;</span><br><span class="line"> * This file is part of the mingw-w64 runtime package.</span><br><span class="line">        ^</span><br><span class="line">e:\mingw-w64\x64-4.8.1-release-posix-seh-rev5\mingw64\x86_64-w64-mingw32\include\aviriff.h:3:25: error: &#x27;refer&#x27; does not name a type</span><br><span class="line"> * No warranty is given; refer to the file DISCLAIMER within this package.</span><br><span class="line">                         ^</span><br><span class="line">In file included from e:\mingw-w64\x64-4.8.1-release-posix-seh-rev5\mingw64\x86_64-w64-mingw32\include\aviriff.h:19:0,</span><br><span class="line">                 from E:\opencv_341\opencv\sources\modules\videoio\src\cap_dshow.cpp:113:</span><br><span class="line">e:\mingw-w64\x64-4.8.1-release-posix-seh-rev5\mingw64\x86_64-w64-mingw32\include\pshpack2.h:7:21: error: expected declaration before end of line</span><br><span class="line"> #pragma pack(push,2)</span><br><span class="line">                     ^</span><br><span class="line">modules\videoio\CMakeFiles\opencv_videoio.dir\build.make:146: recipe for target &#x27;modules/videoio/CMakeFiles/opencv_videoio.dir/src/cap_dshow.cpp.obj&#x27; failed</span><br><span class="line">mingw32-make[2]: *** [modules/videoio/CMakeFiles/opencv_videoio.dir/src/cap_dshow.cpp.obj] Error 1</span><br><span class="line">CMakeFiles\Makefile2:3057: recipe for target &#x27;modules/videoio/CMakeFiles/opencv_videoio.dir/all&#x27; failed</span><br><span class="line">mingw32-make[1]: *** [modules/videoio/CMakeFiles/opencv_videoio.dir/all] Error 2</span><br><span class="line">Makefile:161: recipe for target &#x27;all&#x27; failed</span><br><span class="line">mingw32-make: *** [all] Error 2</span><br></pre></td></tr></table></figure>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MinGW-w64_aviriff.h_file_annotation_error.png" alt="MinGW-w64_aviriff.h_file_annotation_error"></p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>打开<code>E:\MinGW-w64\x64-4.8.1-release-posix-seh-rev5\mingw64\x86_64-w64-mingw32\include\aviriff.h</code></p>
<p>发现第一行的多行注释少了个<code>/</code>符号，加上保存，如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* This file is part of the mingw-w64 runtime package.</span></span><br><span class="line"><span class="comment">* No warranty is given; refer to the file DISCLAIMER within this package.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>然后重新 <code>Configure</code>-<code>Generate</code>-<code>mingw32-make</code> 就好了。</p>
<h3 id="2-cap-msmf-cpp-capture-code-错误【2018年10月13日修改，因编译-OpenCV-4-0-0-alpha-时遇到并解决】"><a href="#2-cap-msmf-cpp-capture-code-错误【2018年10月13日修改，因编译-OpenCV-4-0-0-alpha-时遇到并解决】" class="headerlink" title="2. cap_msmf.cpp capture code 错误【2018年10月13日修改，因编译 OpenCV-4.0.0-alpha 时遇到并解决】"></a>2. cap_msmf.cpp capture code 错误【2018年10月13日修改，因编译 OpenCV-4.0.0-alpha 时遇到并解决】</h3><h4 id="表现-1"><a href="#表现-1" class="headerlink" title="表现"></a>表现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\videoio\src\cap_msmf.cpp: In member function &#x27;HRESULT &#123;anonymous&#125;::ComPtr&lt;T&gt;::As(&#123;anonymous&#125;::ComPtr&lt;U&gt;&amp;) const [with U = IMF2DBuffer; T = IMFMediaBuffer; HRESULT = long int]&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\videoio\src\cap_msmf.cpp:172:5: error: control reaches end of non-void function [-Werror=return-type]</span><br><span class="line">     &#125;</span><br><span class="line">     ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\videoio\src\cap_msmf.cpp: In member function &#x27;T* &#123;anonymous&#125;::ComPtr&lt;T&gt;::operator-&gt;() const [with T = IMF2DBuffer]&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\videoio\src\cap_msmf.cpp:149:5: error: control reaches end of non-void function [-Werror=return-type]</span><br><span class="line">     &#125;</span><br><span class="line">     ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\videoio\src\cap_msmf.cpp: In member function &#x27;T* &#123;anonymous&#125;::ComPtr&lt;T&gt;::operator-&gt;() const [with T = IMFMediaBuffer]&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\videoio\src\cap_msmf.cpp:149:5: error: control reaches end of non-void function [-Werror=return-type]</span><br><span class="line">     &#125;</span><br><span class="line">     ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\videoio\src\cap_msmf.cpp: In member function &#x27;T* &#123;anonymous&#125;::ComPtr&lt;T&gt;::operator-&gt;() const [with T = IMFSinkWriter]&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\videoio\src\cap_msmf.cpp:149:5: error: control reaches end of non-void function [-Werror=return-type]</span><br><span class="line">     &#125;</span><br><span class="line">     ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\videoio\src\cap_msmf.cpp: In member function &#x27;T* &#123;anonymous&#125;::ComPtr&lt;T&gt;::Get() const [with T = IMFMediaBuffer]&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\videoio\src\cap_msmf.cpp:158:5: error: control reaches end of non-void function [-Werror=return-type]</span><br><span class="line">     &#125;</span><br><span class="line">     ^</span><br><span class="line">cc1plus.exe: some warnings being treated as errors</span><br><span class="line">modules\videoio\CMakeFiles\opencv_videoio.dir\build.make:188: recipe for target &#x27;modules/videoio/CMakeFiles/opencv_videoio.dir/src/cap_msmf.cpp.obj&#x27; failed</span><br><span class="line">mingw32-make[2]: *** [modules/videoio/CMakeFiles/opencv_videoio.dir/src/cap_msmf.cpp.obj] Error 1</span><br><span class="line">CMakeFiles\Makefile2:2556: recipe for target &#x27;modules/videoio/CMakeFiles/opencv_videoio.dir/all&#x27; failed</span><br><span class="line">mingw32-make[1]: *** [modules/videoio/CMakeFiles/opencv_videoio.dir/all] Error 2</span><br><span class="line">mingw32-make[1]: *** Waiting for unfinished jobs....</span><br><span class="line">[ 58%] Linking CXX shared library ..\..\bin\libopencv_dnn400.dll</span><br><span class="line">[ 59%] Built target opencv_dnn</span><br><span class="line">Makefile:161: recipe for target &#x27;all&#x27; failed</span><br><span class="line">mingw32-make: *** [all] Error 2</span><br></pre></td></tr></table></figure>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/20180925220634.png"></p>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>因为 MinGW 不能编译 OpenCV 的 cap_msmf 那部分代码，具体见我提的 Issue：<a href="https://github.com/opencv/opencv/issues/12642">Failed to compile opencv-4.0.0-alpha using mingw-w64</a>。</p>
<h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><p>所以，在 cmake-gui 编译配置中：</p>
<ul>
<li>不勾选 <code>WITH_MSMF</code></li>
</ul>
<p>然后重新 <code>Configure</code>-<code>Generate</code>-<code>mingw32-make</code></p>
<h3 id="3-‘M-PI’-was-not-declared-in-this-scope-错误【2018年10月13日修改，因编译-OpenCV-4-0-0-alpha-时遇到并解决】"><a href="#3-‘M-PI’-was-not-declared-in-this-scope-错误【2018年10月13日修改，因编译-OpenCV-4-0-0-alpha-时遇到并解决】" class="headerlink" title="3. ‘M_PI’ was not declared in this scope 错误【2018年10月13日修改，因编译 OpenCV-4.0.0-alpha 时遇到并解决】"></a>3. ‘M_PI’ was not declared in this scope 错误【2018年10月13日修改，因编译 OpenCV-4.0.0-alpha 时遇到并解决】</h3><h4 id="表现-2"><a href="#表现-2" class="headerlink" title="表现"></a>表现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ 86%] Building CXX object modules/calib3d/CMakeFiles/opencv_calib3d.dir/src/chessboard.cpp.obj</span><br><span class="line">In file included from E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:7:0:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.hpp: In constructor &#x27;cv::details::FastX::Parameters::Parameters()&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.hpp:35:36: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line">                 resolution = float(M_PI*0.25);</span><br><span class="line">                                    ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp: At global scope:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:25:42: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line"> const float MAX_ANGLE = float(48.0/180.0*M_PI);          // max angle between line segments supposed to be straight</span><br><span class="line">                                          ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:26:48: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line"> const float MIN_COS_ANGLE = float(cos(35.0/180*M_PI));   // min cos angle between board edges</span><br><span class="line">                                                ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:29:35: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line"> const float RAD2DEG = float(180.0/M_PI);</span><br><span class="line">                                   ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp: In function &#x27;int cv::details::testPointSymmetry(cv::Mat, cv::Point2f, float, float)&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:217:33: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line">     for(double angle=0;angle &lt;= M_PI;angle+=M_PI*0.1)</span><br><span class="line">                                 ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp: In member function &#x27;void cv::details::FastX::rotate(float, const cv::Mat&amp;, cv::Size, cv::Mat&amp;) const&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:287:110: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line">         cv::Mat m = cv::getRotationMatrix2D(cv::Point2f(float(img.cols*0.5),float(img.rows*0.5)),float(angle/M_PI*180),1);</span><br><span class="line">                                                                                                              ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp: In member function &#x27;std::vector&lt;std::vector&lt;float&gt; &gt; cv::details::FastX::calcAngles(const std::vector&lt;cv::Mat&gt;&amp;, std::vector&lt;cv::KeyPoint&gt;&amp;) const&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:393:30: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line">     float resolution = float(M_PI/channels);</span><br><span class="line">                              ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp: In member function &#x27;void cv::details::FastX::detectImpl(const cv::Mat&amp;, std::vector&lt;cv::Mat&gt;&amp;, std::vector&lt;cv::Mat&gt;&amp;, const cv::Mat&amp;) const&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:631:30: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line">         int num = int(0.5001*M_PI/parameters.resolution);</span><br><span class="line">                              ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp: In member function &#x27;void cv::details::Ellipse::draw(cv::InputOutputArray, const Scalar&amp;) const&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:721:43: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line">     cv::ellipse(img,center,axes,360-angle/M_PI*180,0,360,color);</span><br><span class="line">                                           ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp: In static member function &#x27;static float cv::details::Chessboard::Board::findMaxPoint(cv::flann::Index&amp;, const cv::Mat&amp;, const cv::details::Ellipse&amp;, float, float, cv::Point2f&amp;)&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:1541:17: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line">         if(a1 &gt; M_PI*0.5)</span><br><span class="line">                 ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:1543:16: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line">         if(a2&gt; M_PI*0.5)</span><br><span class="line">                ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp: In static member function &#x27;static bool cv::details::Chessboard::Board::estimateSearchArea(const Point2f&amp;, const Point2f&amp;, const Point2f&amp;, float, cv::details::Ellipse&amp;, const Point2f*)&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:1787:28: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line">         angle = float(2.0F*M_PI-angle);</span><br><span class="line">                            ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp: In member function &#x27;void cv::details::Chessboard::findKeyPoints(const cv::Mat&amp;, std::vector&lt;cv::KeyPoint&gt;&amp;, std::vector&lt;cv::Mat&gt;&amp;, std::vector&lt;std::vector&lt;float&gt; &gt;&amp;, const cv::Mat&amp;) const&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:2793:29: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line">     para.resolution = float(M_PI*0.25);   // this gives the best results taking interpolation into account</span><br><span class="line">                             ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp: In member function &#x27;cv::Mat cv::details::Chessboard::buildData(const std::vector&lt;cv::KeyPoint&gt;&amp;) const&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:2844:30: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line">         (*val++) = float(2.0*M_PI-iter-&gt;angle/180.0*M_PI);</span><br><span class="line">                              ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp: In member function &#x27;std::vector&lt;cv::KeyPoint&gt; cv::details::Chessboard::getInitialPoints(cv::flann::Index&amp;, const cv::Mat&amp;, const cv::KeyPoint&amp;, float, float, float) const&#x27;:</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:2874:25: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line">         if(angle_temp &gt; M_PI*0.5)</span><br><span class="line">                         ^</span><br><span class="line">E:\opencv-4.0.0-alpha\opencv-4.0.0-alpha\modules\calib3d\src\chessboard.cpp:2879:29: error: &#x27;M_PI&#x27; was not declared in this scope</span><br><span class="line">             if(angle_temp &gt; M_PI*0.5)</span><br><span class="line">                             ^</span><br><span class="line">modules\calib3d\CMakeFiles\opencv_calib3d.dir\build.make:137: recipe for target &#x27;modules/calib3d/CMakeFiles/opencv_calib3d.dir/src/chessboard.cpp.obj&#x27; failed</span><br><span class="line">mingw32-make[2]: *** [modules/calib3d/CMakeFiles/opencv_calib3d.dir/src/chessboard.cpp.obj] Error 1</span><br><span class="line">CMakeFiles\Makefile2:3018: recipe for target &#x27;modules/calib3d/CMakeFiles/opencv_calib3d.dir/all&#x27; failed</span><br><span class="line">mingw32-make[1]: *** [modules/calib3d/CMakeFiles/opencv_calib3d.dir/all] Error 2</span><br><span class="line">Makefile:161: recipe for target &#x27;all&#x27; failed</span><br><span class="line">mingw32-make: *** [all] Error 2</span><br></pre></td></tr></table></figure>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/20180925221908.png"></p>
<h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><p>因为 OpenCV 在 <code>chessboard.cpp</code>、<code>chessboard.hpp</code>、<code>test_chesscorners.cpp</code> 这些代码中有 BUG，使用的应该是 <code>CV_PI</code> 而不是 <code>M_PI</code> 导致的。具体见我提的 Issue：<a href="https://github.com/opencv/opencv/issues/12642">Failed to compile opencv-4.0.0-alpha using mingw-w64</a></p>
<h4 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h4><ul>
<li><p>在最新的 master 分支已经解决了这个问题，见我的 PR ：<a href="https://github.com/opencv/opencv/pull/12645">M_PI changed to CV_PI</a></p>
</li>
<li><p>如果你是在 <a href="https://opencv.org/releases.html">官网</a> 或者 <a href="https://github.com/opencv/opencv/releases">github.com&#x2F;opencv&#x2F;opencv&#x2F;releases</a> 中下的 <code>OpenCV 4.0.0-alpha</code>，可能还会有这个问题，那么你需要把 <code>chessboard.cpp</code>、<code>chessboard.hpp</code>、<code>test_chesscorners.cpp</code> 文件中的 <code>M_PI</code> 全部改为 <code>CV_PI</code>，如我的 commit 所示：<a href="https://github.com/opencv/opencv/commit/f0d277e45246762866daea036558e2c391b39ace">M_PI changed to CV_PI (#12645)</a></p>
</li>
</ul>
<p>然后重新 <code>Configure</code>-<code>Generate</code>-<code>mingw32-make</code></p>
<h3 id="4-‘posix-memalign’-was-not-declared-in-this-scope-错误【2018年11月17日修改，因编译-OpenCV-4-0-0-rc-时遇到并解决】"><a href="#4-‘posix-memalign’-was-not-declared-in-this-scope-错误【2018年11月17日修改，因编译-OpenCV-4-0-0-rc-时遇到并解决】" class="headerlink" title="4. ‘posix_memalign’ was not declared in this scope 错误【2018年11月17日修改，因编译 OpenCV-4.0.0-rc 时遇到并解决】"></a>4. ‘posix_memalign’ was not declared in this scope 错误【2018年11月17日修改，因编译 OpenCV-4.0.0-rc 时遇到并解决】</h3><h4 id="表现-3"><a href="#表现-3" class="headerlink" title="表现"></a>表现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ 28%] Building CXX object modules/CMakeFiles/ade.dir/__/3rdparty/ade/ade-0.1.1c/sources/ade/source/alloc.cpp.obj</span><br><span class="line">E:\opencv-4.0.0-rc\opencv-4.0.0-rc-build\3rdparty\ade\ade-0.1.1c\sources\ade\source\alloc.cpp: In function &#x27;void* ade::aligned_alloc(std::size_t, std::size_t)&#x27;:</span><br><span class="line">E:\opencv-4.0.0-rc\opencv-4.0.0-rc-build\3rdparty\ade\ade-0.1.1c\sources\ade\source\alloc.cpp:31:16: error: &#x27;posix_memalign&#x27; was not declared in this scope</span><br><span class="line">     auto res = posix_memalign(&amp;ret, std::max(sizeof(void*), alignment), size);</span><br><span class="line">                ^~~~~~~~~~~~~~</span><br><span class="line">mingw32-make[2]: *** [modules\CMakeFiles\ade.dir\build.make:63: modules/CMakeFiles/ade.dir/__/3rdparty/ade/ade-0.1.1c/sources/ade/source/alloc.cpp.obj] Error 1</span><br><span class="line">mingw32-make[1]: *** [CMakeFiles\Makefile2:884: modules/CMakeFiles/ade.dir/all] Error 2</span><br><span class="line">mingw32-make: *** [Makefile:162: all] Error 2</span><br></pre></td></tr></table></figure>

<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/2018-11-17_174118.png" alt="2018-11-17_174118.png"></p>
<h4 id="原因-2"><a href="#原因-2" class="headerlink" title="原因"></a>原因</h4><p>因为我使用了 <code>MinGW-w64-8.1.0</code> 编译，而新的编译器在 Windows 下不再定义 <code>WIN32</code>，而定义成 <code>_WIN32</code>，如这个 Issue 的问题：<a href="https://github.com/opencv/opencv/issues/12831">error: ‘posix_memalign’ was not declared in this scope #12831</a></p>
<h4 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h4><p>把 <code>opencv-4.0.0-rc-build\3rdparty\ade\ade-0.1.1c\sources\ade\source\alloc.cpp</code> 文件的所有 <code>WIN32</code> 改为 <code>_WIN32</code>，如这个 PR 所做的修改：<a href="https://github.com/opencv/ade/pull/6/files">fix check for win32 #6</a></p>
<p>然后重新 <code>Configure</code>-<code>Generate</code>-<code>mingw32-make</code></p>
<h3 id="5-‘D3D11-TEXTURE2D-DESC’-was-not-declared-in-this-scope-错误【2019年4月10日修改，因编译-OpenCV-4-1-0-时遇到并解决】"><a href="#5-‘D3D11-TEXTURE2D-DESC’-was-not-declared-in-this-scope-错误【2019年4月10日修改，因编译-OpenCV-4-1-0-时遇到并解决】" class="headerlink" title="5. ‘D3D11_TEXTURE2D_DESC’ was not declared in this scope 错误【2019年4月10日修改，因编译 OpenCV-4.1.0 时遇到并解决】"></a>5. ‘D3D11_TEXTURE2D_DESC’ was not declared in this scope 错误【2019年4月10日修改，因编译 OpenCV-4.1.0 时遇到并解决】</h3><h4 id="表现-4"><a href="#表现-4" class="headerlink" title="表现"></a>表现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ 32%] Building CXX object modules/core/CMakeFiles/opencv_core.dir/src/directx.cpp.obj</span><br><span class="line">E:\opencv-4.1.0\opencv-4.1.0\modules\core\src\directx.cpp: In function &#x27;void cv::directx::__convertToD3D11Texture2DNV(cv::InputAray, ID3D11Texture2D*)&#x27;:</span><br><span class="line">E:\opencv-4.1.0\opencv-4.1.0\modules\core\src\directx.cpp:1035:5: error: &#x27;D3D11_TEXTURE2D_DESC&#x27; was not declared in this scope</span><br><span class="line">     D3D11_TEXTURE2D_DESC desc = &#123; 0 &#125;;</span><br><span class="line">     ^~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure>
<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/MinGW-w64_D3D11_TEXTURE2D_DESC_Error.png" alt="MinGW-w64_D3D11_TEXTURE2D_DESC_Error.png"></p>
<h4 id="原因-3"><a href="#原因-3" class="headerlink" title="原因"></a>原因</h4><p><code>D3D11_TEXTURE2D_DESC</code> 在 <code>d3d11.h</code> 中定义，貌似在我的机器上找不到定义。反正也不用 D3D11  与 OpenCL 交互，因此可以关闭 <code>WITH_OPENCL_D3D11_NV </code> 这个选项（默认是开的）。可见我的 issue：<a href="https://github.com/opencv/opencv/issues/14286">Error compiling 4.1.0 source code with mingw-w64: ‘D3D11_TEXTURE2D_DESC’ was not declared in this scope #14286</a></p>
<h4 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h4><p>方法一：</p>
<p>在 cmake-gui 编译配置中：</p>
<ul>
<li>不勾选 <code>WITH_OPENCL_D3D11_NV </code></li>
</ul>
<p>然后重新 <code>Configure</code>-<code>Generate</code>-<code>mingw32-make</code></p>
<p>方法二：</p>
<p>如这个 PR 中对这两个 cmake 文件的修改：<a href="https://github.com/opencv/opencv/pull/14294/files">cmake: fix WITH_OPENCL_D3D11_NV check #14294</a>，即可先判断是否可以用，再设置默认的 <code>WITH_OPENCL_D3D11_NV</code></p>
<h3 id="其他错误"><a href="#其他错误" class="headerlink" title="其他错误"></a>其他错误</h3><p>如果以上错误不是你所遇到的，请务必先看下面两个文章中的错误。</p>
<ul>
<li><a href="https://blog.huihut.com/2017/12/03/CompiledOpenCVRunInQt/">编译 32位 OpenCV 博文的常见错误</a></li>
<li><a href="http://visp-doc.inria.fr/doxygen/visp-daily/tutorial-install-win10-mingw64.html">Tutorial: Installation from source for Windows with Mingw-w64</a></li>
</ul>
<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ol>
<li>2018年10月13日为 OpenCV-4.0.0-alpha 而修改，主要改了 “编译 OpenCV 常见错误”</li>
<li>2018年11月17日为 OpenCV-4.0.0-rc 而修改，主要改了 “编译 OpenCV 常见错误”</li>
<li>2019年4月10日为 OpenCV-4.1.0 而修改，主要改了 “编译 OpenCV 常见错误”</li>
</ol>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>链接装载库</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 调用 Python 模块</title>
    <url>/2018/06/12/CppCallPython/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ call Python module </span></span><br><span class="line"><span class="comment">// author: huihut</span></span><br><span class="line"><span class="comment">// repo: https://gist.github.com/huihut/b4597d097123a8c8388c71b3f0ff21e5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Python.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C++ call Python module</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CppCallPython</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Python initialize</span></span><br><span class="line">    <span class="built_in">Py_Initialize</span>();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Py_IsInitialized</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Python initialization failed!\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If my MyPython.py file is in &quot;/Users/xx/code&quot;, set the working path to &quot;/Users/xx/code&quot;</span></span><br><span class="line">    std::string path = <span class="string">&quot;/Users/xx/code&quot;</span>;</span><br><span class="line">    <span class="built_in">PySys_SetPath</span>(&amp;path[<span class="number">0u</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Import MyPython.py module</span></span><br><span class="line">    PyObject* pModule = <span class="built_in">PyImport_ImportModule</span>(<span class="string">&quot;MyPython&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!pModule)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt;<span class="string">&quot;Cannot open Python file!\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the HelloPython() function in the module</span></span><br><span class="line">    PyObject* pFunhello = <span class="built_in">PyObject_GetAttrString</span>(pModule, <span class="string">&quot;HelloPython&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!pFunhello)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Failed to get this function!&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call HelloPython()</span></span><br><span class="line">    <span class="built_in">PyObject_CallFunction</span>(pFunhello, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Finalize</span></span><br><span class="line">    <span class="built_in">Py_Finalize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ IO 库条件状态及EOF</title>
    <url>/2017/04/15/CppConditionStateAndEOF/</url>
    <content><![CDATA[<h2 id="文本文件判空问题"><a href="#文本文件判空问题" class="headerlink" title="文本文件判空问题"></a>文本文件判空问题</h2><p>对于空文本文件的判断问题引起了我对 IO 库中条件状态和 EOF 的探究。</p>
<p>就是这段程序：</p>
<pre><code>int vehicle_number;
fstream infile;
infile.open(&quot;vehicle.txt&quot;, ios::in);
if(infile.is_open())
&#123;
    while(!infile.eof())
    &#123;
        infile &gt;&gt; vehicle_number;
        ......
    
    &#125;
    infile.close();
&#125;
</code></pre>
<p>它可以打开空文本文件并运行到 <code>while(!infile.eof())</code> 循环里面。由于是空文本文件，它进入里面会造成一些问题，所以需要对文件进行判空。</p>
<span id="more"></span>

<h2 id="EOF"><a href="#EOF" class="headerlink" title="EOF"></a>EOF</h2><p>EOF（End Of File） 常用于：</p>
<ul>
<li>文件结束标志</li>
<li>函数出错的返回值</li>
</ul>
<p>在 C++ IO 库中可用作：</p>
<ul>
<li>条件状态的判定</li>
</ul>
<p>现在让我们看看 IO 库中的描述。</p>
<h2 id="IO-库条件状态"><a href="#IO-库条件状态" class="headerlink" title="IO 库条件状态"></a>IO 库条件状态</h2><p>【表一】IO 库条件状态</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>strm::iostate</td>
<td>strm是一种IO类型。iostream是一种机器相关的整型提供了表达条件状态的完整功能</td>
</tr>
<tr>
<td>strm::badbit</td>
<td>strm::badbit用来指出流已崩溃</td>
</tr>
<tr>
<td>strm::failbit</td>
<td>strm::failbit用来指出一个IO操作失败了</td>
</tr>
<tr>
<td>strm::eofbit</td>
<td>strm::eofbit用来指出流达到了文件结束</td>
</tr>
<tr>
<td>strm::goodbit</td>
<td>strm::goodbit用来指出流未处于错误状态。此值保证为零</td>
</tr>
<tr>
<td>s.eof()</td>
<td>流 s 的 eofbit 置位，则返回 true</td>
</tr>
<tr>
<td>s.fail()</td>
<td>流 s 的 failbit 或 badbit 置位，则返回 true</td>
</tr>
<tr>
<td>s.bad()</td>
<td>流 s 的 badbit 置位，则返回 true</td>
</tr>
<tr>
<td>s.good()</td>
<td>若流 s 处于有效状态，则返回 true</td>
</tr>
<tr>
<td>s.clear()</td>
<td>将流 s 中的所有条件状态位复位，将流的状态设置为有效。返回void</td>
</tr>
<tr>
<td>s.clear(flag)</td>
<td>根据给定的 flags 标志位，将流 s 中对于条件状态位复位。 flag 的类型是strm::iostate。返回 void</td>
</tr>
<tr>
<td>s.setstate(flag)</td>
<td>根据给定的 flags 标志位，将流 s 中对于条件状态位置位。 flag 的类型是strm::iostate。返回 void</td>
</tr>
<tr>
<td>s.rdstate()</td>
<td>返回流 s 的当前条件，返回值类型为 strm::iostate</td>
</tr>
</tbody></table>
<p>【表二】四种条件状态</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>含义</th>
<th>数值</th>
<th>good()</th>
<th>eof()</th>
<th>bad()</th>
<th>fail()</th>
<th>rdstate()</th>
</tr>
</thead>
<tbody><tr>
<td>ios::goodbit</td>
<td>流状态完全正常</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>goodbit</td>
</tr>
<tr>
<td>ios::eofbit</td>
<td>已达到文件结束</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>eofbit</td>
</tr>
<tr>
<td>ios::badbit</td>
<td>输入（输出）流出现非致命错误，可挽回</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>badbit</td>
</tr>
<tr>
<td>ios::failbit</td>
<td>输入（输出）流出现致命错误，不可挽回</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>failbit</td>
</tr>
</tbody></table>
<p>我们先看【表一】的关于 EOF 的这两行：</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>strm::eofbit</td>
<td>strm::eofbit用来指出流达到了文件结束</td>
</tr>
<tr>
<td>s.eof()</td>
<td>流 s 的 eofbit 置位，则返回 true</td>
</tr>
</tbody></table>
<p>这里指出当流读到文件结束时，<code>eofbit</code> 置 <code>1</code> ，用于标识读取到文件的末尾。</p>
<p>而 <code>eof()</code> 是当 <code>eofbit</code> 置位（置 <code>1</code>）时才返回，并不是读到文件末尾就返回。</p>
<p><strong>所以使用 <code>eof()</code> 读取文件，读到结束标志 <code>EOF</code> 时不会立刻返回 <code>true</code>，只是 <code>eofbit</code> 置位，下次调用 <code>eof()</code> 才返回 <code>true</code>。</strong></p>
<h2 id="文本文件判空问题的解释"><a href="#文本文件判空问题的解释" class="headerlink" title="文本文件判空问题的解释"></a>文本文件判空问题的解释</h2><p>现在就可以解释最初的问题了，让我们回过头看看。</p>
<p>当程序第一次运行到 <code>while(!infile.eof())</code> 时，<code>infile.eof()</code> 读到文件末尾的 <code>EOF</code>，但并不是立刻返回 <code>true</code>，只是 <code>eofbit</code> 置位，所以 <code>infile.eof()</code> 还是 <code>false</code> 的状态，所以会进入 <code>while</code> 循环。</p>
<h2 id="文本文件判空问题的解决"><a href="#文本文件判空问题的解决" class="headerlink" title="文本文件判空问题的解决"></a>文本文件判空问题的解决</h2><ul>
<li><p>把流对象状态当做条件使用</p>
<pre><code>  if(infile.is_open())
  &#123;
      while(infile &gt;&gt; vehicle_number)
      &#123;
          ......
      &#125;
  &#125;
</code></pre>
</li>
<li><p>使用 <code>peek()</code></p>
<p>  <code>istream::peek()</code> 用于读取并返回流的下一个字符（返回值为 <code>char</code> 类型），但并不读取该字符到输入流中，即流指针依然指向原来位置，并不后移。</p>
<pre><code>  if(infile.is_open())
  &#123;
         while(infile.peek() != EOF)
      &#123;
          infile &gt;&gt; vehicle_number;
          ......
      &#125;
  &#125;
</code></pre>
</li>
</ul>
<h2 id="重复读入非空文本文件最后一个字符问题"><a href="#重复读入非空文本文件最后一个字符问题" class="headerlink" title="重复读入非空文本文件最后一个字符问题"></a>重复读入非空文本文件最后一个字符问题</h2><p>经过上面的解释，我们已经知道了文本文件如何判空。但由于 EOF 的锅，若用 <code>while(!infile.eof())</code> 还会导致重复读入非空文本文件最后一个字符的问题。</p>
<p>看下面这段代码：</p>
<pre><code>char c;
fstream infile;
infile.open(&quot;test.txt&quot;, ios::in);

if(infile.is_open())
&#123;
    while(!infile.eof())
    &#123;
        infile &gt;&gt; c;
        cout &lt;&lt; c;
    &#125;
&#125;
infile.close();
</code></pre>
<p>和文本文件判空问题的代码相似，只是读入字符存储到 <code>char</code> 类型变量中，并把其输出。</p>
<p>然后我们在 <code>test.txt</code> 中保存 <code>abc</code> 这三个字符。</p>
<p>运行的结果是：</p>
<pre><code>abcc
</code></pre>
<p>即 <code>while(!infile.eof())</code> 重复执行了最后一趟，多输入了字符 <code>c</code> 。</p>
<p>这个问题和文本文件判空问题的解决办法一样，都是使用 <code>peek()</code> 或者把流对象当做 <code>while</code> 的条件来解决。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>使用 <code>eof()</code> 读取文件，读到结束标志 <code>EOF</code> 时不会立刻返回 <code>true</code>，只是 <code>eofbit</code> 置位，下次调用 <code>eof()</code> 才返回 <code>true</code>。</li>
<li>只有一个流处于无错状态时，我们才可以对它读写数据。因此代码通常应该在使用一个流之前检查它是否处于良好状态。</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>一个可以模仿你的表情的语音聊天机器人 —— Facemoji 废萌（OpenCV+Dlib+Live2D+图灵机器人+讯飞IAT语音听写+讯飞TTS语音合成）</title>
    <url>/2018/02/08/Facemoji1/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文介绍一个可以模仿你的表情的语音聊天机器人 —— Facemoji 废萌</p>
<p>这是个 Unity 项目，其暂时有两个模块 ：</p>
<ul>
<li>【模块一】是实时人脸卡通化（FaceTracking），使用 <a href="https://enoxsoftware.com/opencvforunity/">OpenCV</a> 和 <a href="https://enoxsoftware.com/dlibfacelandmarkdetector/">Dlib</a> 检测面部表情，并实时转化为 <a href="http://sites.cybernoids.jp/cubism-sdk2_e/unity_2-1">Live2D</a> 模型，然后可 <a href="https://github.com/Chman/Moments">录制</a> 成 gif 图；</li>
<li>【模块二】是人工智能（AI）使用 <a href="http://www.tuling123.com/">图灵机器人</a>、<a href="http://www.xfyun.cn/services/voicedictation">讯飞IAT语音听写</a>、<a href="http://www.xfyun.cn/services/online_tts">讯飞TTS语音合成</a> 进行语音聊天。</li>
</ul>
<span id="more"></span>

<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Facemoji%E6%95%88%E6%9E%9C%E5%9B%BE_cn.png" alt="Facemoji效果图_cn"></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码：<a href="https://github.com/huihut/Facemoji">Github . huihut&#x2F;Facemoji</a></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><a href="https://www.coolapk.com/apk/192260">酷安 . Facemoji 废萌</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.huihut.facemoji">Google Play (需要梯子)</a></li>
<li><a href="https://github.com/huihut/Facemoji/releases">Github . Facemoji&#x2F;releases</a></li>
<li><a href="https://drive.google.com/open?id=1ofJMFIdzXCdYYO3qO5hvrTQPJUumgSY-">Google云盘 . Facemoji&#x2F;Platform</a></li>
<li><a href="https://pan.baidu.com/s/1U08B_wPY67Zh1RTwFhrihA">Baidu网盘 . Facemoji&#x2F;Platform</a></li>
</ul>
<h2 id="为什么叫废萌（Facemoji）"><a href="#为什么叫废萌（Facemoji）" class="headerlink" title="为什么叫废萌（Facemoji）"></a>为什么叫废萌（Facemoji）</h2><p>首先，为什么叫废萌（Facemoji）？…emmm…这个项目其实是由 Animoji 启发的，由于当时 Animoji 没有开放 api，所以想开发个跨平台（Unity）的类似的项目，就叫 Facemoji。</p>
<p>至于中文名废萌嘛？…emmm…总觉得她除了卖萌没什么作用，所以就叫废（Face）萌（Moji）了。</p>
<h2 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h2><ol>
<li><p>从 <a href="https://drive.google.com/open?id=1ofJMFIdzXCdYYO3qO5hvrTQPJUumgSY-">Google云盘</a> 或者 <a href="https://pan.baidu.com/s/1U08B_wPY67Zh1RTwFhrihA">Baidu网盘</a>下载<code>shape_predictor_68_face_landmarks.dat</code>（已训练好的人脸检测模型）和 <code>Facemoji_Plugins_Assets_1.5.0.unitypackage</code>（精简的 OpenCV, Dlib, Live2D 和 Iflytek 库）</p>
</li>
<li><p>克隆下源码：<code>git clone git@github.com:huihut/Facemoji.git</code></p>
</li>
<li><p>创建一个新的 Unity 项目，命名为 Facemoji</p>
</li>
<li><p>把 <code>Facemoji-master</code> 文件夹中的 <code>Assets</code> 和 <code>ProjectSettings</code> 替换 <code>Facemoji</code> 的同名文件夹</p>
</li>
<li><p>把 <code>shape_predictor_68_face_landmarks.dat</code> 复制到 <code>Facemoji/Assets/StreamingAssets/</code></p>
</li>
<li><p>导入 <code>Facemoji_Plugins_Assets_1.5.0.unitypackage</code>。导入后的文件结构如下：<br> <img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/FacemojiDirectoryStructure1.5.0.png" alt="FacemojiDirectoryStructure1.5.0.png"></p>
</li>
<li><p>转换平台到 Android（其他平台未适配）</p>
</li>
<li><p>Build &amp; Run</p>
</li>
</ol>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="实时人脸卡通化（FaceTracking）"><a href="#实时人脸卡通化（FaceTracking）" class="headerlink" title="实时人脸卡通化（FaceTracking）"></a>实时人脸卡通化（FaceTracking）</h3><p>使用 OpenCV 和 Dlib 检测面部表情，并实时转化为 Live2D 模型；</p>
<p>她可以跟着你的头部表情动，试着摇头看看吧。</p>
<h3 id="录制-gif-图"><a href="#录制-gif-图" class="headerlink" title="录制 gif 图"></a>录制 gif 图</h3><p>点击顶部中间的录制键可以录制 3 秒的 gif；</p>
<p>录制状态为：Recording（准备录制）、PreProcessing（正在录制）、Paused（正在压缩成gif图）</p>
<p>生成的 gif 存储在 <code>Application.dataPath</code>，Android 平台的话在<br><code>/storage/emulated/0/Android/data/com.huihut.facemoji/files/</code></p>
<h3 id="语音和文字聊天（聊天机器人？-她说她是-AI，不是机器人！-hhhh…）"><a href="#语音和文字聊天（聊天机器人？-她说她是-AI，不是机器人！-hhhh…）" class="headerlink" title="语音和文字聊天（聊天机器人？ 她说她是 AI，不是机器人！ hhhh…）"></a>语音和文字聊天（<del>聊天机器人？</del> 她说她是 AI，不是机器人！ hhhh…）</h3><p>使用 <strong>图灵机器人</strong>、<strong>讯飞 IAT 语音听写</strong>、<strong>讯飞 TTS 语音合成</strong></p>
<p>她很智能（<del>zhizhang</del>），可以：</p>
<ul>
<li>聊天对话</li>
<li>生活百科</li>
<li>数学计算</li>
<li>故事大全</li>
<li>笑话大全</li>
<li>成语接龙</li>
<li>星座运势</li>
<li>天气查询</li>
<li>…</li>
</ul>
<p>但是由于她是个中国 AI（<del>机器人</del>），图灵机器人只支持中文，所以她只能进行中文聊天，和她讲英文她只会翻译。</p>
<p>不过她以后会学习英文的（<del>换个会讲英文的</del>）。</p>
<h2 id="Gif演示"><a href="#Gif演示" class="headerlink" title="Gif演示"></a>Gif演示</h2><p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/GifCapture-201802072218435427.gif" alt="GifCapture-201802072218435427.gif">    </p>
<h2 id="异常问题"><a href="#异常问题" class="headerlink" title="异常问题"></a>异常问题</h2><h3 id="人不动时模型抖动问题（特别是眼睛眉毛）Facemoji-issues-1"><a href="#人不动时模型抖动问题（特别是眼睛眉毛）Facemoji-issues-1" class="headerlink" title="人不动时模型抖动问题（特别是眼睛眉毛）Facemoji&#x2F;issues&#x2F;1"></a>人不动时模型抖动问题（特别是眼睛眉毛）<a href="https://github.com/huihut/Facemoji/issues/1">Facemoji&#x2F;issues&#x2F;1</a></h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul>
<li>手&#x2F;眼&#x2F;眉等的轻微抖动</li>
<li>Dlib 检测到的每一帧人脸特征点的位置会有轻微差距</li>
</ul>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><ul>
<li><p>调整模型参数</p>
<p>  如果人眼睛小的话，可以修改 <code>FaceTracking.cs</code> 中 <a href="https://github.com/huihut/Facemoji/blob/v1.4.1/Assets/Scripts/FaceTracking.cs#L294">live2DModelUpdate</a> 方法，把睁开眼的区间改大一点，如下：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// eye_open_L                               // 左眼</span><br><span class="line">float eyeOpen_L = getRaitoOfEyeOpen_L (points);</span><br><span class="line">if (eyeOpen_L &gt; 0.4f &amp;&amp; eyeOpen_L &lt; 1.0f)</span><br><span class="line">    eyeOpen_L = 1;                          // 睁开眼</span><br><span class="line">else if (eyeOpen_L &gt;= 1.0f)</span><br><span class="line">    eyeOpen_L = 2;                          // 睁大眼</span><br><span class="line">else if (eyeOpen_L &lt;= 0.4f)</span><br><span class="line">    eyeOpen_L = 0;                          // 闭上眼</span><br><span class="line">live2DModel.PARAM_EYE_L_OPEN = eyeOpen_L;</span><br></pre></td></tr></table></figure>

<ul>
<li>考虑使用卡尔曼滤波器或者其他滤波器过滤（未尝试）</li>
</ul>
<h2 id="修改说明"><a href="#修改说明" class="headerlink" title="修改说明"></a>修改说明</h2><blockquote>
<p>2018年03月23日因项目更新 v1.5.0 版本而对此博文做了修改。因博文内容不常改动，项目部署、文档等以Github为准。</p>
</blockquote>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective C++ 概要</title>
    <url>/2019/01/05/EffectiveCppSummary/</url>
    <content><![CDATA[<blockquote>
<p>本文是 <a href="https://github.com/huihut/interview">huihut . C&#x2F;C++面试基础知识总结</a> 仓库的一部分，定位链接：<a href="https://github.com/huihut/interview#effective-c">Effective C++</a></p>
</blockquote>
<h3 id="Effective-C"><a href="#Effective-C" class="headerlink" title="Effective C++"></a>Effective C++</h3><ol>
<li>视 C++ 为一个语言联邦（C、Object-Oriented C++、Template C++、STL）</li>
<li>宁可以编译器替换预处理器（尽量以 <code>const</code>、<code>enum</code>、<code>inline</code> 替换 <code>#define</code>）</li>
<li>尽可能使用 const</li>
<li>确定对象被使用前已先被初始化（构造时赋值（copy 构造函数）比 default 构造后赋值（copy assignment）效率高）</li>
<li>了解 C++ 默默编写并调用哪些函数（编译器暗自为 class 创建 default 构造函数、copy 构造函数、copy assignment 操作符、析构函数）</li>
<li>若不想使用编译器自动生成的函数，就应该明确拒绝（将不想使用的成员函数声明为 private，并且不予实现）</li>
<li>为多态基类声明 virtual 析构函数（如果 class 带有任何 virtual 函数，它就应该拥有一个 virtual 析构函数）</li>
<li>别让异常逃离析构函数（析构函数应该吞下不传播异常，或者结束程序，而不是吐出异常；如果要处理异常应该在非析构的普通函数处理）</li>
<li>绝不在构造和析构过程中调用 virtual 函数（因为这类调用从不下降至 derived class）</li>
<li>令 <code>operator=</code> 返回一个 <code>reference to *this</code> （用于连锁赋值）<span id="more"></span></li>
<li>在 <code>operator=</code> 中处理 “自我赋值”</li>
<li>赋值对象时应确保复制 “对象内的所有成员变量” 及 “所有 base class 成分”（调用基类复制构造函数）</li>
<li>以对象管理资源（资源在构造函数获得，在析构函数释放，建议使用智能指针，资源取得时机便是初始化时机（Resource Acquisition Is Initialization，RAII））</li>
<li>在资源管理类中小心 copying 行为（普遍的 RAII class copying 行为是：抑制 copying、引用计数、深度拷贝、转移底部资源拥有权（类似 auto_ptr））</li>
<li>在资源管理类中提供对原始资源（raw resources）的访问（对原始资源的访问可能经过显式转换或隐式转换，一般而言显示转换比较安全，隐式转换对客户比较方便）</li>
<li>成对使用 new 和 delete 时要采取相同形式（<code>new</code> 中使用 <code>[]</code> 则 <code>delete []</code>，<code>new</code> 中不使用 <code>[]</code> 则 <code>delete</code>）</li>
<li>以独立语句将 newed 对象存储于（置入）智能指针（如果不这样做，可能会因为编译器优化，导致难以察觉的资源泄漏）</li>
<li>让接口容易被正确使用，不易被误用（促进正常使用的办法：接口的一致性、内置类型的行为兼容；阻止误用的办法：建立新类型，限制类型上的操作，约束对象值、消除客户的资源管理责任）</li>
<li>设计 class 犹如设计 type，需要考虑对象创建、销毁、初始化、赋值、值传递、合法值、继承关系、转换、一般化等等。</li>
<li>宁以 pass-by-reference-to-const 替换 pass-by-value （前者通常更高效、避免切割问题（slicing problem），但不适用于内置类型、STL迭代器、函数对象）</li>
<li>必须返回对象时，别妄想返回其 reference（绝不返回 pointer 或 reference 指向一个 local stack 对象，或返回 reference 指向一个 heap-allocated 对象，或返回 pointer 或 reference 指向一个 local static 对象而有可能同时需要多个这样的对象。）</li>
<li>将成员变量声明为 private（为了封装、一致性、对其读写精确控制等）</li>
<li>宁以 non-member、non-friend 替换 member 函数（可增加封装性、包裹弹性（packaging flexibility）、机能扩充性）</li>
<li>若所有参数（包括被this指针所指的那个隐喻参数）皆须要类型转换，请为此采用 non-member 函数</li>
<li>考虑写一个不抛异常的 swap 函数</li>
<li>尽可能延后变量定义式的出现时间（可增加程序清晰度并改善程序效率）</li>
<li>尽量少做转型动作（旧式：<code>(T)expression</code>、<code>T(expression)</code>；新式：<code>const_cast&lt;T&gt;(expression)</code>、<code>dynamic_cast&lt;T&gt;(expression)</code>、<code>reinterpret_cast&lt;T&gt;(expression)</code>、<code>static_cast&lt;T&gt;(expression)</code>、；尽量避免转型、注重效率避免 dynamic_casts、尽量设计成无需转型、可把转型封装成函数、宁可用新式转型）</li>
<li>避免使用 handles（包括 引用、指针、迭代器）指向对象内部（以增加封装性、使 const 成员函数的行为更像 const、降低 “虚吊号码牌”（dangling handles，如悬空指针等）的可能性）</li>
<li>为 “异常安全” 而努力是值得的（异常安全函数（Exception-safe functions）即使发生异常也不会泄露资源或允许任何数据结构败坏，分为三种可能的保证：基本型、强列型、不抛异常型）</li>
<li>透彻了解 inlining 的里里外外（inlining 在大多数 C++ 程序中是编译期的行为；inline 函数是否真正 inline，取决于编译器；大部分编译器拒绝太过复杂（如带有循环或递归）的函数 inlining，而所有对 virtual 函数的调用（除非是最平淡无奇的）也都会使 inlining 落空；inline 造成的代码膨胀可能带来效率损失；inline 函数无法随着程序库的升级而升级）</li>
<li>将文件间的编译依存关系降至最低（如果使用 object references 或 object pointers 可以完成任务，就不要使用 objects；如果能过够，尽量以 class 声明式替换 class 定义式；为声明式和定义式提供不同的头文件）</li>
<li>确定你的 public 继承塑模出 is-a（是一种）关系（适用于 base classes 身上的每一件事情一定适用于 derived classes 身上，因为每一个 derived class 对象也都是一个 base class 对象）</li>
<li>避免遮掩继承而来的名字（可使用 using 声明式或转交函数（forwarding functions）来让被遮掩的名字再见天日）</li>
<li>区分接口继承和实现继承（在 public 继承之下，derived classes 总是继承 base class 的接口；pure virtual 函数只具体指定接口继承；非纯 impure virtual 函数具体指定接口继承及缺省实现继承；non-virtual 函数具体指定接口继承以及强制性实现继承）</li>
<li>考虑 virtual 函数以外的其他选择（如 Template Method 设计模式的 non-virtual interface（NVI）手法，将 virtual 函数替换为 “函数指针成员变量”，以 <code>tr1::function</code> 成员变量替换 virtual 函数，将继承体系内的 virtual 函数替换为另一个继承体系内的 virtual 函数）</li>
<li>绝不重新定义继承而来的 non-virtual 函数</li>
<li>绝不重新定义继承而来的缺省参数值，因为缺省参数值是静态绑定（statically bound），而 virtual 函数却是动态绑定（dynamically bound）</li>
<li>通过复合塑模 has-a（有一个）或 “根据某物实现出”（在应用域（application domain），复合意味 has-a（有一个）；在实现域（implementation domain），复合意味着 is-implemented-in-terms-of（根据某物实现出））</li>
<li>明智而审慎地使用 private 继承（private 继承意味着 is-implemented-in-terms-of（根据某物实现出），尽可能使用复合，当 derived class 需要访问 protected base class 的成员，或需要重新定义继承而来的时候 virtual 函数，或需要 empty base 最优化时，才使用 private 继承）</li>
<li>明智而审慎地使用多重继承（多继承比单一继承复杂，可能导致新的歧义性，以及对 virtual 继承的需要，但确有正当用途，如 “public 继承某个 interface class” 和 “private 继承某个协助实现的 class”；virtual 继承可解决多继承下菱形继承的二义性问题，但会增加大小、速度、初始化及赋值的复杂度等等成本）</li>
<li>了解隐式接口和编译期多态（class 和 templates 都支持接口（interfaces）和多态（polymorphism）；class 的接口是以签名为中心的显式的（explicit），多态则是通过 virtual 函数发生于运行期；template 的接口是奠基于有效表达式的隐式的（implicit），多态则是通过 template 具现化和函数重载解析（function overloading resolution）发生于编译期）</li>
<li>了解 typename 的双重意义（声明 template 类型参数是，前缀关键字 class 和 typename 的意义完全相同；请使用关键字 typename 标识嵌套从属类型名称，但不得在基类列（base class lists）或成员初值列（member initialization list）内以它作为 basee class 修饰符）</li>
<li>学习处理模板化基类内的名称（可在 derived class templates 内通过 <code>this-&gt;</code> 指涉 base class templates 内的成员名称，或藉由一个明白写出的 “base class 资格修饰符” 完成）</li>
<li>将与参数无关的代码抽离 templates（因类型模板参数（non-type template parameters）而造成代码膨胀往往可以通过函数参数或 class 成员变量替换 template 参数来消除；因类型参数（type parameters）而造成的代码膨胀往往可以通过让带有完全相同二进制表述（binary representations）的实现类型（instantiation types）共享实现码）</li>
<li>运用成员函数模板接受所有兼容类型（请使用成员函数模板（member function templates）生成 “可接受所有兼容类型” 的函数；声明 member templates 用于 “泛化 copy 构造” 或 “泛化 assignment 操作” 时还需要声明正常的 copy 构造函数和 copy assignment 操作符）</li>
<li>需要类型转换时请为模板定义非成员函数（当我们编写一个 class template，而它所提供之 “与此 template 相关的” 函数支持 “所有参数之隐式类型转换” 时，请将那些函数定义为 “class template 内部的 friend 函数”）</li>
<li>请使用 traits classes 表现类型信息（traits classes 通过 templates 和 “templates 特化” 使得 “类型相关信息” 在编译期可用，通过重载技术（overloading）实现在编译期对类型执行 if…else 测试）</li>
<li>认识 template 元编程（模板元编程（TMP，template metaprogramming）可将工作由运行期移往编译期，因此得以实现早期错误侦测和更高的执行效率；TMP 可被用来生成 “给予政策选择组合”（based on combinations of policy choices）的客户定制代码，也可用来避免生成对某些特殊类型并不适合的代码）</li>
<li>了解 new-handler 的行为（set_new_handler 允许客户指定一个在内存分配无法获得满足时被调用的函数；nothrow new 是一个颇具局限的工具，因为它只适用于内存分配（operator new），后继的构造函数调用还是可能抛出异常）</li>
<li>了解 new 和 delete 的合理替换时机（为了检测运用错误、收集动态分配内存之使用统计信息、增加分配和归还速度、降低缺省内存管理器带来的空间额外开销、弥补缺省分配器中的非最佳齐位、将相关对象成簇集中、获得非传统的行为）</li>
<li>编写 new 和 delete 时需固守常规（operator new 应该内涵一个无穷循环，并在其中尝试分配内存，如果它无法满足内存需求，就应该调用 new-handler，它也应该有能力处理 0 bytes 申请，class 专属版本则还应该处理 “比正确大小更大的（错误）申请”；operator delete 应该在收到 null 指针时不做任何事，class 专属版本则还应该处理 “比正确大小更大的（错误）申请”）</li>
<li>写了 placement new 也要写 placement delete（当你写一个 placement operator new，请确定也写出了对应的 placement operator delete，否则可能会发生隐微而时断时续的内存泄漏；当你声明 placement new 和 placement delete，请确定不要无意识（非故意）地遮掩了它们地正常版本）</li>
<li>不要轻忽编译器的警告</li>
<li>让自己熟悉包括 TR1 在内的标准程序库（TR1，C++ Technical Report 1，C++11 标准的草稿文件）</li>
<li>让自己熟悉 Boost（准标准库）</li>
</ol>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>iTerm2 + OhMyZsh + agnoster + Powerline + solarized = 漂亮的Mac终端</title>
    <url>/2017/03/11/FancyMacTerminal/</url>
    <content><![CDATA[<h2 id="唠叨一下"><a href="#唠叨一下" class="headerlink" title="唠叨一下"></a>唠叨一下</h2><p>自从装了黑苹果后一直用着 Mac 自带的终端（Terminal），相比 Windows 的终端根本无法同台竞技！毕竟 Mac 是基于 Unix 嘛~ 对开发友好太多了。</p>
<p>就是下面这个家伙了👇</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/mac_terminal_white.jpg"></p>
<p>本来没觉得什么，直到我看到它👇</p>
<span id="more"></span>


<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/iterm2_black.png"></p>
<p>颜值碾压，有木有！</p>
<p>所以就着手折腾了……</p>
<h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h2><p>iTerm是一个非常好的终端模拟器，官网地址：<a href="http://iterm2.com/">http://iterm2.com/</a>，需要下载它。</p>
<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><p>zsh 是一款强大的虚拟终端，是 Oh My Zsh 的爸爸，所以需要先装它。</p>
<p>在命令行输入：</p>
<pre><code>zsh --version
</code></pre>
<p>如果输入zsh的当前版本号就说明装好了，一般Mac自带有的</p>
<p>如果没装则需要输入：</p>
<pre><code>brew install zsh zsh-completions
</code></pre>
<p>这是用Homebrew装，需要Mac上有Homebrew，它的网站：<a href="https://brew.sh/">https://brew.sh/</a></p>
<h2 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh My Zsh"></a>Oh My Zsh</h2><p>Oh My Zsh 是基于 zsh 的一个扩展工具集，它提供了丰富的扩展功能</p>
<p>它可以通过<code>curl</code>或者<code>wget</code>来安装</p>
<ul>
<li><p>via curl</p>
<pre><code>  sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;
</code></pre>
</li>
<li><p>via wget</p>
<pre><code>  sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;
</code></pre>
</li>
</ul>
<p>装好之后就可以换到 agnoster 主题，就是之前看到的那张颜值主题，Oh My Zsh 一般自带有这个主题。</p>
<p>可以看看它的默认主题：</p>
<pre><code>ls ~/.oh-my-zsh/themes
</code></pre>
<p>需要修改主题只需：</p>
<pre><code>vim ~/.zshrc
</code></pre>
<p>然后把里面 <code>ZSH_THEME</code> 的值改为 <code>ZSH_THEME=&quot;agnoster&quot;</code>，保存退出</p>
<p>（<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes#agnoster">点击这里</a>还有各种主题，任君翻牌~）</p>
<p>应用配置：</p>
<pre><code>chsh -s /bin/zsh
</code></pre>
<p>重启 iTerm2</p>
<p>然后你会惊喜地发现……</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/iTerm2_noPowerline.jpg"></p>
<p>和颜值主题并不一样！</p>
<p>难道官方坑爹？</p>
<p>震惊！oh-my-zsh 竟然做出这种事！</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/biaoqing1.gif"></p>
<p>嘛~ 原来少了 Powerline 的字符集</p>
<h2 id="Powerline"><a href="#Powerline" class="headerlink" title="Powerline"></a>Powerline</h2><p>Git 下来安装：</p>
<pre><code>git clone git@github.com:powerline/fonts.git
cd fonts
./install.sh
</code></pre>
<p>然后到 iterm2 配置，设置字体为<code>Roboto Mono for Powerline</code>：</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/powerline.jpg"></p>
<p>这样就可以有颜值图的效果了~</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/iterm2_end.jpg"></p>
<p>然而终端下的 vim 编辑器还是一种颜色~</p>
<p>作为一个追求完美的 geek 怎能容许此等瑕疵呢！</p>
<p>所以就继续捣鼓 solarized 配色。</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/biaoqing2.gif"></p>
<h2 id="solarized"><a href="#solarized" class="headerlink" title="solarized"></a>solarized</h2><p>Solarized 是个很牛逼的配色项目，主流OS、IDE、Editor都有它影子。</p>
<pre><code># git下Solarized 的源码
git clone git://github.com/altercation/solarized.git

# 进入文件夹
cd solarized/vim-colors-solarized/colors

#下面可能要管理员权限
sudo mkdir -p ~/.vim/colors
sudo cp solarized.vim ~/.vim/colors/

# 创建.vimrc文件
sudo vim ~/.vimrc

# 把下面这三行复制进去
syntax enable
set background=dark
colorscheme solarized
</code></pre>
<p>然后保存 .vimrc, 退出</p>
<p>之后打开用 vim 打开文件就是这种效果了：</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/iterm_vim_black.jpg"></p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><blockquote>
<p><a href="http://iterm2.com/">iTerm2</a></p>
<p><a href="https://github.com/robbyrussell/oh-my-zsh">robbyrussell&#x2F;oh-my-zsh</a></p>
<p><a href="https://github.com/powerline/fonts">powerline&#x2F;fonts</a></p>
<p><a href="https://github.com/altercation/solarized">altercation&#x2F;solarized</a></p>
</blockquote>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter beta 版尝鲜（在 Windows + Android Studio 与 MacOS + VS Code 的安装配置）</title>
    <url>/2018/03/13/FlutterBetaTaste/</url>
    <content><![CDATA[<p>Flutter 是一个 Google 发布的跨平台移动 UI 框架，使用 Dart 语言开发，可以构建高质量原生 iOS 、Android 以及 Fuchsia OS 应用，并且在排版、图标、滚动、点击等方面实现零差异。</p>
<p><a href="https://flutter.io/">Flutter 官网</a></p>
<p>鉴于最近出了 beta 版，就来尝鲜一下吧。</p>
<p>本文有 Windows + Android Studio 与 MacOS + VS Code 的体验。</p>
<span id="more"></span>

<h2 id="Windows-Android-Studio"><a href="#Windows-Android-Studio" class="headerlink" title="Windows + Android Studio"></a>Windows + Android Studio</h2><h3 id="获取-Flutter-SDK"><a href="#获取-Flutter-SDK" class="headerlink" title="获取 Flutter SDK"></a>获取 Flutter SDK</h3><p>使用 <a href="https://git-scm.com/">git</a> 克隆下来 Flutter SDK</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b beta https://github.com/flutter/flutter.git</span><br></pre></td></tr></table></figure>

<p>也可以使用中国的镜像，使用方法：<a href="https://github.com/flutter/flutter/wiki/Using-Flutter-in-China">Using Flutter in China</a></p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/GitCloneFlutter.png" alt="GitCloneFlutter"></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>添加 <code>flutter\bin</code> 的完整路径到<code>用户变量</code> <code>Path</code>，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\code\git\flutter\bin</span><br></pre></td></tr></table></figure>

<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>打开<code>cmd</code>或者<code>PowerShell</code>，安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure>

<p>安装过程可能持续比较久</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/flutterdoctor.png" alt="flutterdoctor"></p>
<h3 id="为-Android-Studio-安装-Flutter-插件"><a href="#为-Android-Studio-安装-Flutter-插件" class="headerlink" title="为 Android Studio 安装 Flutter 插件"></a>为 Android Studio 安装 Flutter 插件</h3><p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/AndroidStudioInstallFlutter.png" alt="AndroidStudioInstallFlutter"></p>
<p>装好后重启 Android Studio</p>
<h3 id="创建-Flutter-APP"><a href="#创建-Flutter-APP" class="headerlink" title="创建 Flutter APP"></a>创建 Flutter APP</h3><ol>
<li>选择 <code>File</code> &gt; <code>New Flutter Project</code></li>
<li>选择 <code>Flutter application</code></li>
<li>输入应用名 <code>flutter_app</code>，输入 <code>Flutter SDK</code> 路径（如我的：<code>D:\code\git\flutter</code>）</li>
<li><code>Finish</code></li>
<li>等待创建</li>
</ol>
<p>创建好后，应用程序的代码在<code>lib/main.dart</code></p>
<h3 id="启动-Flutter-APP"><a href="#启动-Flutter-APP" class="headerlink" title="启动 Flutter APP"></a>启动 Flutter APP</h3><ol>
<li>选择设备</li>
<li><code>Run</code></li>
</ol>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/ASRunFlutterAPP.png" alt="ASRunFlutterAPP"></p>
<h3 id="尝试热重载"><a href="#尝试热重载" class="headerlink" title="尝试热重载"></a>尝试热重载</h3><p>把<code>lib/main.dart</code>里面的字符串</p>
<p><code>&#39;You have pushed the button this many times:&#39;</code></p>
<p>改成</p>
<p><code>&#39;Hahaha, You have clicked the button this many times:&#39;</code></p>
<p>不用停止模拟器，直接 <code>Save All（cmd-s/ ctrl-s）</code>，或者单击 <code>Hot Reload</code> 按钮（带有闪电图标的按钮）</p>
<p>就能看到模拟器中间那行字符串很快更新了。</p>
<p>嗯，体验还是蛮爽的！</p>
<h2 id="MacOS-VS-Code"><a href="#MacOS-VS-Code" class="headerlink" title="MacOS + VS Code"></a>MacOS + VS Code</h2><p>接下来看下在 MacOS 下的安装</p>
<h3 id="获取-Flutter-SDK-1"><a href="#获取-Flutter-SDK-1" class="headerlink" title="获取 Flutter SDK"></a>获取 Flutter SDK</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b beta https://github.com/flutter/flutter.git</span><br><span class="line">export PATH=`pwd`/flutter/bin:$PATH</span><br></pre></td></tr></table></figure>

<h3 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>打开环境变量配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi $HOME/.bash_profile</span><br></pre></td></tr></table></figure>

<p>添加一行你的<code>flutter/bin</code>的绝对路径，如我的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/Users/xx/code/git/flutter/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>刷新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source $HOME/.bash_profile</span><br></pre></td></tr></table></figure>

<p>验证一下是否配置好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure>

<h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure>

<h3 id="为-VS-Code-安装-Flutter-插件"><a href="#为-VS-Code-安装-Flutter-插件" class="headerlink" title="为 VS Code 安装 Flutter 插件"></a>为 VS Code 安装 Flutter 插件</h3><p>在扩展商店中搜索 <code>Dart Code</code> 下载安装</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/VSCodeInstallDartCode.jpg"></p>
<p>安装好后重新打开</p>
<p>点击 <code>查看</code> - <code>命令面板</code>，搜索 <code>Flutter: Run Flutter Doctor</code> </p>
<p>如果 VS Code 找不到 Flutter SDK 路径，就点击进行配置</p>
<p>配置好后重新 <code>Flutter: Run Flutter Doctor</code>，检查配置是否成功</p>
<h3 id="编译-iOS-需要-Xcode-9-0-0"><a href="#编译-iOS-需要-Xcode-9-0-0" class="headerlink" title="编译 iOS 需要 Xcode 9.0.0+"></a>编译 iOS 需要 Xcode 9.0.0+</h3><p>接下来再检查还需要安装什么</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure>

<p>然后突然发现。。。</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MacFlutterDoctorRequiresXcode.jpg" alt="MacFlutterDoctorRequiresXcode"></p>
<p>要编译 iOS 应用需要 Xcode 9.0.0+ ！</p>
<p>可是官网明明说的是 Xcode 7.2+ ？打脸？？</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/FlutterOfficialSiteXcode.jpg" alt="FlutterOfficialSiteXcode"></p>
<p>对此，我特意把我的 Xcode 从 7.1 更新到 7.2，结果还是说需要 9.0.0+，看来是官网教程没更新了。</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MacFlutterDoctorRequiresXcode9.0.jpg" alt="MacFlutterDoctorRequiresXcode9"></p>
<p>什么？你说为什么不更新到 Xcode 最新版？</p>
<p>这个……由于博主的是黑苹果，无法升级 MacOS，现在还是 OSX 10.10.5，最高支持的 Xcode 是 7.2.1</p>
<p>所以只好再编译 Android 应用了，下面也只讲构建 Android 的</p>
<p>这里附上有编译 iOS 的教程：<a href="http://blog.csdn.net/hekaiyou/article/details/52874796?locationNum=4&fps=1">Flutter基础—开发环境与入门</a></p>
<h3 id="创建并执行-Flutter-APP"><a href="#创建并执行-Flutter-APP" class="headerlink" title="创建并执行 Flutter APP"></a>创建并执行 Flutter APP</h3><p>在 VS Code 的终端（或其他终端）上跳转到要创建项目的路径，然后创建名为<code>flutter_app</code>的项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/code/Android</span><br><span class="line">flutter create flutter_app</span><br><span class="line">cd flutter_app</span><br><span class="line">flutter run</span><br></pre></td></tr></table></figure>

<p>在 Windows 的时候使用的是模拟器，现在用真机体验一下</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MacFlutterRun.jpg" alt="MacFlutterRun"></p>
<p>运行后，试着修改字符串</p>
<p><code>&#39;You have pushed the button this many times:&#39;</code></p>
<p>改成</p>
<p><code>&#39;yeah, You have pushed the button this many times:&#39;</code></p>
<p>保存，然后在终端按 <code>r</code> 热重载</p>
<ul>
<li><code>r</code>：热重载</li>
<li><code>R</code>：重启整个APP</li>
<li><code>h</code>：帮助</li>
<li><code>q</code>：退出APP</li>
</ul>
<p>嗯，Cool。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>技嘉Z370 HD3P + i7-8700K + GTX1080 装黑苹果 High Sierra 10.13.6</title>
    <url>/2018/10/13/GIGABYTE_Z370_HD3P_i7-8700K_GTX1080_Install_Hackintosh_HighSierra10.13.6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本博文记录了组装台式机装黑苹果 High Sierra 10.13.6 的经历。</p>
<p>原本想装 Mojave 10.14 的，可惜发现在 Mojave 下还没有 GTX1080 的驱动，所以只能退而求其次装 High Sierra 了。</p>
<p>装 High Sierra 的过程中，第一次使用 10.13.6(17G2112) 镜像遇到个问题（下文有描述），无法进入安装界面，因此后来使用 10.13.5(17F77) 镜像装好后在 AppStore 更新 10.13.6</p>
<span id="more"></span>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Hackintosh-High-Sierra-10.13.6.jpeg" alt="Hackintosh-High-Sierra-10.13.6"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>主板：技嘉 Z370 HD3P</li>
<li>CPU：Intel Core i7-8700K</li>
<li>核显：Intel UHD Graphics 630</li>
<li>独显：七彩虹 iGame GTX1080 Vulcan X 8G</li>
<li>内存：海盗船复仇者 DDR4 3200 8G*2</li>
<li>固态硬盘：三星 SSD 970 EVO 250GB（Windows）</li>
<li>机械硬盘：西数 WD10EZEX 7200PPM 64M 1T（EFI + MacOS + Storage）</li>
<li>板载音频：Realtek ALC1220</li>
<li>板载网卡：Intel I219V2 PCI Express Gigabit Ethernet</li>
<li>USB蓝牙：绿联 CSR8891 USB蓝牙 4.0</li>
</ul>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>本博文使用的一些软件工具驱动，下文则不赘述。</p>
<ul>
<li><a href="https://mirrors.dtops.cc/iso/MacOS/daliansky_macos/">带 Clover 镜像</a><ul>
<li>10.13.6(17G2112) 镜像：<a href="https://mirrors.dtops.cc/iso/MacOS/daliansky_macos/macOS%20High%20Sierra%2010.13.6%2817G2112%29%20Installer%20with%20Clover%204606.dmg">macOS High Sierra 10.13.6(17G2112) Installer with Clover 4606.dmg</a></li>
<li>10.13.5(17F77)镜像：<a href="https://mirrors.dtops.cc/iso/MacOS/daliansky_macos/macOS%20High%20Sierra%2010.13.5%2817F77%29%20Installer%20with%20Clover%204512.dmg">macOS High Sierra 10.13.5(17F77) Installer with Clover 4512.dmg</a></li>
</ul>
</li>
<li>EFI 分区<ul>
<li><a href="https://github.com/huihut/Hackintosh-Z370/tree/master/EFI">huihut . Hackintosh-Z370&#x2F;EFI</a></li>
</ul>
</li>
<li>工具<ul>
<li>U盘刻录工具 Etcher：<a href="https://etcher.io/">官网</a> | <a href="https://pan.baidu.com/s/1EAarG7mLxhI0xwQEXerUEg">百度网盘</a></li>
<li>Clover 配置工具 Clover Configurator：<a href="https://www.tonymacx86.com/resources/clover-configurator.335/">官网</a> | <a href="https://pan.baidu.com/s/1adKnfyIT0MVwHGl_Lke_Fg">百度网盘</a></li>
<li>内核注入工具 Kext Wizard：<a href="https://mac.softpedia.com/get/Utilities/Kext-Wizard.shtml">网络</a> | <a href="https://pan.baidu.com/s/1bnsRR4s3FYmc6jCRiVYRew">百度网盘</a></li>
<li>文本编辑器 BBEdit 12：<a href="https://www.barebones.com/products/bbedit/">官网</a> | <a href="https://pan.baidu.com/s/1pWO_hFMcHIjzoFGSOdUgDQ">百度网盘</a></li>
</ul>
</li>
<li>驱动<ul>
<li>驱动安装工具 MultiBeast 10.4.0 - High Sierra：<a href="https://www.tonymacx86.com/resources/multibeast-10-4-0-high-sierra.401/">官网</a> | <a href="https://pan.baidu.com/s/1QBX514ELiqltAJ_EcHan0g">百度网盘</a></li>
<li>Nvidia Web 驱动 387.10.10.10.40.105（适用于 10.13.6）：<a href="https://www.nvidia.com/download/driverResults.aspx/136062/en-us">官网</a> | <a href="https://pan.baidu.com/s/1pgf06gmxiwpK1256_7QmcQ">百度网盘</a></li>
<li>Nvidia Web 驱动 387.10.10.10.35.106（适用于 10.13.5）：<a href="https://www.nvidia.com/download/driverResults.aspx/134834/en-us">官网</a> | <a href="https://pan.baidu.com/s/13ObVcKgRqr1XIvDv2d96Eg">百度网盘</a></li>
</ul>
</li>
</ul>
<h2 id="刻录镜像"><a href="#刻录镜像" class="headerlink" title="刻录镜像"></a>刻录镜像</h2><p>准备一个8G以上的U盘，使用 Etcher 刻录上面下载的镜像（带有 Clover EFI 分区）：<code>macOS High Sierra 10.13.6(17G2112) Installer with Clover 4606.dmg</code></p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/etcher-create-hackintosh.png" alt="etcher-create-hackintosh"></p>
<h2 id="设置-BIOS"><a href="#设置-BIOS" class="headerlink" title="设置 BIOS"></a>设置 BIOS</h2><blockquote>
<p>BIOS 版本已更新为 F7</p>
</blockquote>
<ul>
<li>Save &amp; Exit -&gt; Load Optimized Defaults : Yes</li>
<li>M.I.T. -&gt; Advanced Memory Settings -&gt; Extreme Memory Profile(X.M.P.) : Profile 1</li>
<li>BIOS -&gt; Fast Boot : Disabled</li>
<li>BIOS -&gt; CSM Support : Disabled</li>
<li>Peripherals -&gt; Super IO Configuration -&gt; Serial Port : Disabled</li>
<li>Peripherals -&gt; USB Configuration -&gt; XHCI Hand-off : Enabled</li>
<li>Chipset -&gt; Vt-d : Disabled</li>
</ul>
<p>保存 BIOS 配置</p>
<h2 id="引导出错"><a href="#引导出错" class="headerlink" title="引导出错"></a>引导出错</h2><p>重启进入刻录好的U盘，选择 <code>Boot macOS Install from Install macOS High Sierra</code></p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/IMG_20181007_204929.jpg" alt="Clover"></p>
<p>唠叨模式滚代码的时候出错：please go to <a href="https://panic.apple.com/">https://panic.apple.com</a> to report this panic</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/IMG_20181007_211514.jpg" alt="please go to https://panic.apple.com to report this panic"></p>
<h2 id="重新刻录"><a href="#重新刻录" class="headerlink" title="重新刻录"></a>重新刻录</h2><p>上面的问题 Google 了一圈并未发现解决办法，因此重新刻录 <code>macOS High Sierra 10.13.5(17F77) Installer with Clover 4512.dmg</code>，先装 10.13.5(17F77) 。</p>
<h2 id="引导安装"><a href="#引导安装" class="headerlink" title="引导安装"></a>引导安装</h2><p>这次的 10.13.5(17F77)  成功进入安装界面了。</p>
<p>打开磁盘工具，格好一个系统盘，格式为 APFS 或者 Mac OS 扩展（日志式），大小因人而异，我留了 128G。</p>
<p>格好后安装系统到这个盘。</p>
<p>安装过程中第一次自动重启依然进入 U 盘 Clover，引导进入格出来的盘继续安装。</p>
<p>第二次自动重启也是进入 U 盘 Clover，引导进入格出来的盘，然后安装完毕进入系统。</p>
<h2 id="安装-Clover"><a href="#安装-Clover" class="headerlink" title="安装 Clover"></a>安装 Clover</h2><h3 id="Clover-选择"><a href="#Clover-选择" class="headerlink" title="Clover 选择"></a>Clover 选择</h3><p>进入系统后发现 1080 独显不能驱动、八代 CPU 不能识别，这个先不管，先装 Clover 到磁盘的 EFI 分区。</p>
<p>安装 Clover 有两种：</p>
<ul>
<li>使用原版 CLover：<a href="https://sourceforge.net/projects/cloverefiboot/">Clover EFI bootloader 官方下载</a></li>
<li>使用 U 盘 EFI 分区的 Clover</li>
</ul>
<p>由于 U 盘的 Clover 是已经试验过能引导的，所以我就用了 U 盘的。</p>
<h3 id="挂载-EFI-分区"><a href="#挂载-EFI-分区" class="headerlink" title="挂载 EFI 分区"></a>挂载 EFI 分区</h3><p>在终端上执行 <code>diskutil list</code>，找到两个 EFI 分区（磁盘的 EFI 和 U 盘的 EFI），如下的 <code>disk0 s1</code> 和 <code>disk3 s1</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HuiMac:~ huihut$ diskutil list</span><br><span class="line">/dev/disk0 (internal, physical):</span><br><span class="line">   #:                       TYPE NAME                    SIZE       IDENTIFIER</span><br><span class="line">   0:      GUID_partition_scheme                        *1.0 TB     disk0</span><br><span class="line">   1:                        EFI EFI                     209.7 MB   disk0s1</span><br><span class="line">   2:                 Apple_APFS Container disk2         128.8 GB   disk0s2</span><br><span class="line">   3:       Microsoft Basic Data Document                85.9 GB    disk0s3</span><br><span class="line">   4:       Microsoft Basic Data Software                161.1 GB   disk0s4</span><br><span class="line">   5:       Microsoft Basic Data Data                    624.2 GB   disk0s5</span><br><span class="line"></span><br><span class="line">/dev/disk1 (internal):</span><br><span class="line">   #:                       TYPE NAME                    SIZE       IDENTIFIER</span><br><span class="line">   0:      GUID_partition_scheme                         250.1 GB   disk1</span><br><span class="line">   1:         Microsoft Reserved                         16.8 MB    disk1s1</span><br><span class="line">   2:       Microsoft Basic Data                         249.2 GB   disk1s2</span><br><span class="line">   3:           Windows Recovery                         847.2 MB   disk1s3</span><br><span class="line"></span><br><span class="line">/dev/disk2 (synthesized):</span><br><span class="line">   #:                       TYPE NAME                    SIZE       IDENTIFIER</span><br><span class="line">   0:      APFS Container Scheme -                      +128.8 GB   disk2</span><br><span class="line">                                 Physical Store disk0s2</span><br><span class="line">   1:                APFS Volume MacOS                   84.8 GB    disk2s1</span><br><span class="line">   2:                APFS Volume Preboot                 67.7 MB    disk2s2</span><br><span class="line">   3:                APFS Volume Recovery                1.0 GB     disk2s3</span><br><span class="line">   4:                APFS Volume VM                      20.5 KB    disk2s4</span><br><span class="line"></span><br><span class="line">/dev/disk3 (external, physical):</span><br><span class="line">   #:                       TYPE NAME                    SIZE       IDENTIFIER</span><br><span class="line">   0:      GUID_partition_scheme                        *31.0 GB    disk3</span><br><span class="line">   1:                        EFI EFI                     209.7 MB   disk3s1</span><br><span class="line">   2:                  Apple_HFS Install macOS High S... 5.7 GB     disk3s2</span><br><span class="line"></span><br><span class="line">HuiMac:~ huihut$ </span><br></pre></td></tr></table></figure>

<p>分别挂载到不同名字的卷</p>
<p>挂载磁盘 EFI</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir /Volumes/efidisk</span><br><span class="line">sudo mount -t msdos /dev/disk0s1 /Volumes/efidisk</span><br></pre></td></tr></table></figure>

<p>挂载 U 盘 EFI</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir /Volumes/efiusb</span><br><span class="line">sudo mount -t msdos /dev/disk3s1 /Volumes/efiusb</span><br></pre></td></tr></table></figure>

<h3 id="复制-Clover"><a href="#复制-Clover" class="headerlink" title="复制 Clover"></a>复制 Clover</h3><p>然后把 U 盘的 <code>EFI/CLOVER</code> 这个文件夹复制到 磁盘的 <code>EFI</code> 下 </p>
<h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><p>使用 MultiBeast 安装驱动，使用 Nvidia WebDriver 安装显卡驱动（MultiBeast 的 WebDriver 不能驱动我的 1080）。</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Jietu20181007-221705.jpg" alt="MultiBeast-config"></p>
<p>装好 Nvidia WebDriver 后 1080 能驱动，不过 i7-8700K 的八代 CPU 还是不能识别，先不管，在 AppStore 更新 10.13.6。</p>
<h2 id="更新后安装驱动"><a href="#更新后安装驱动" class="headerlink" title="更新后安装驱动"></a>更新后安装驱动</h2><p>更新完 10.13.6 发现许多驱动有问题：</p>
<ul>
<li>独显无法驱动</li>
<li>CPU无法识别</li>
<li>声卡无法驱动</li>
<li>USB3.0无法驱动</li>
</ul>
<h3 id="驱动独显"><a href="#驱动独显" class="headerlink" title="驱动独显"></a>驱动独显</h3><p>使用适用于 10.13.6 的 WebDriver-387.10.10.10.40.105.pkg，装好重启后就 OK 了</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Hackintosh-gpu.jpg"></p>
<h3 id="修复-CPU-识别"><a href="#修复-CPU-识别" class="headerlink" title="修复 CPU 识别"></a>修复 CPU 识别</h3><blockquote>
<p>参见 <a href="https://osx.cx/8-dai-cpu-installed-black-apple.html">八代处理器安装黑苹果 关于本机显示“未知”解决办法</a></p>
</blockquote>
<p>挂载磁盘 EFI 分区（操作如上），使用 Clover Configurator 打开 <code>/EFI/CLOVER/config.plist</code></p>
<p>在 CPU 页面的 Type 中填入 Unknown，保存。</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Jietu20181007-232553.jpg"></p>
<p>使用文本编辑器（如 BBEdit）打开 <code>/System/Library/PrivateFrameworks/AppleSystemInfo.framework/Versions/A/Resources/zh_CN.lproj/AppleSystemInfo.strings</code> 文件</p>
<p>修改 <code>UnknownCPUKind</code> 的值为 <code>3.7 GHz Intel Core i7-8700K</code></p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Jietu20181007-233544.jpg" alt="3.7 GHz Intel Core i7-8700K"></p>
<p>保存重启即可。</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Hackintosh-system-information.jpg"></p>
<h3 id="修复声卡驱动"><a href="#修复声卡驱动" class="headerlink" title="修复声卡驱动"></a>修复声卡驱动</h3><blockquote>
<p>参见 <a href="https://imac.hk/applealc-kext-use.html">黑苹果AppleALC声卡驱动安装使用教程</a></p>
</blockquote>
<p>我使用 MultiBeast 安装的 ALC1220 驱动在 10.13.6 下不能驱动我的声卡，试过 MultiBeast 的其他驱动也不行，因此使用另一种方法修复。</p>
<p>在 <a href="https://github.com/acidanthera/AppleALC/releases">acidanthera&#x2F;AppleALC&#x2F;releases</a> 下载最新的 AppleALC 的 RELEASE 版 <code>AppleALC.kext</code>，使用 Kext Wizard 注入这个内核，如下图</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Jietu20181007-225717.jpg" alt="Kext Wizard AppleALC.kext"><br><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Jietu20181007-225733.jpg" alt="Kext Wizard AppleALC.kext"></p>
<p>然后挂载磁盘 EFI 分区（操作如上），把 <code>AppleALC.kext</code> 放入磁盘 EFI 分区的 <code>EFI/CLOVER/kexts/Other/</code>目录中。</p>
<p>然后在 <a href="https://github.com/acidanthera/AppleALC/tree/master/Resources">acidanthera&#x2F;AppleALC&#x2F;Resources</a> 找到你的声卡型号的文件夹，进入（如我的是 <code>ALC1220</code>）。</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Jietu20181007-230207.jpg" alt="ALC1220"></p>
<p>我的声卡型号看到有 <code>layout1.xml</code>、<code>layout2.xml</code>、<code>layout5.xml</code>、<code>layout7.xml</code>、<code>layout11.xml</code>、<code>layout13.xml</code></p>
<p>然后在 1、2、5、7、11、13 中随便取一个数。</p>
<p>使用文本编辑器打开磁盘 EFI 分区的 <code>EFI/CLOVER/config.plist</code> 文件，搜索 <code>&lt;key&gt;Audio&lt;/key&gt;</code>，把它的 <code>integer</code> 改为刚刚取的那个数（如 <code>1</code>）。</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Jietu20181007-231402.jpg" alt="Audio"></p>
<p>保存重启即可。</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Hackintosh-audio.jpg"></p>
<h3 id="修复-USB3-0"><a href="#修复-USB3-0" class="headerlink" title="修复 USB3.0"></a>修复 USB3.0</h3><blockquote>
<p>参见 <a href="https://hackintosher.com/guides/hackintosh-high-sierra-10-13-6-update-guide/">HACKINTOSH HIGH SIERRA 10.13.6 UPDATE GUIDE</a></p>
</blockquote>
<p>使用上文描述的操作挂载磁盘的 EFI 分区</p>
<p>使用 Clover Configurator 打开 <code>/EFI/CLOVER/config.plist</code></p>
<p>如下图，插入（若已存在则修改为）配置信息</p>
<ul>
<li>Name*: com.apple.driver.usb.AppleUSBXHCI</li>
<li>Find* [HEX]: 837D880F 0F83A704 0000</li>
<li>Replace* [HEX]: 837D880F 90909090 9090</li>
<li>Comment: USB 10.13.6+ by PMHeart</li>
<li>MatchOS: 10.13.x</li>
</ul>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Jietu20181007-223654.jpg" alt="Clover Configurator USB3.0"></p>
<p>保存重启即可。</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/hackintosh-usb3.jpg"></p>
<h3 id="蓝牙免驱"><a href="#蓝牙免驱" class="headerlink" title="蓝牙免驱"></a>蓝牙免驱</h3><p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Hackintosh-bluetooth.jpg"></p>
<h3 id="iMessage、序列号问题"><a href="#iMessage、序列号问题" class="headerlink" title="iMessage、序列号问题"></a>iMessage、序列号问题</h3><blockquote>
<p>参见 <a href="http://www.ituring.com.cn/article/274156">[Hackintosh]解决黑苹果无法使用Siri、iMessage等服务</a></p>
</blockquote>
<h2 id="更换Clover主题"><a href="#更换Clover主题" class="headerlink" title="更换Clover主题"></a>更换Clover主题</h2><p>Clover主题可以到官方仓库下载：</p>
<ul>
<li><a href="https://clover-wiki.zetam.org/theme-database">Clover Theme Repository</a></li>
</ul>
<p>也可以使用其他的，比如我使用这个简洁风格的：</p>
<ul>
<li><a href="https://github.com/al3xtjames/clover-theme-minimal">Clover Minimal - A clean theme for the Clover UEFI bootloader</a></li>
</ul>
<p><img src="https://camo.githubusercontent.com/df4adb0f442a1baf2ec59cf17f3442253619af6f/687474703a2f2f692e696d67626f782e636f6d2f346773734c6453492e706e67" alt="clover-theme-minimal"></p>
<p>只需下载下来，放到 <code>/EFI/CLOVER/themes</code> 文件夹下，然后使用 Clover Configurator 打开 <code>/EFI/CLOVER/config.plist</code> 更换到这个主题就好啦。</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Jietu20181013-001702.jpg" alt="更换Clover主题"></p>
<p>另外这个显示启动盘的标签的 <code>Label</code> 建议勾上，这样才知道选择的是哪个盘，保存重启即可。</p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><ul>
<li><a href="https://www.tonymacx86.com/">tonymacx86</a></li>
<li><a href="https://blog.daliansky.net/">黑果小兵的部落阁</a></li>
<li><a href="https://imac.hk/">黑苹果乐园</a></li>
<li><a href="https://www.tonymacx86.com/threads/success-gigabyte-z370-hd3p-i7-8700k-gigabyte-rx580-4gb-mojave-10-14-0.256221/">[Success] Gigabyte Z370 HD3P - i7 8700K - Gigabyte RX580 4GB - Mojave 10.14.0</a></li>
<li><a href="https://9to5mac.com/2017/04/28/building-a-gtx-1080-ti-powered-hackintosh-installing-macos-sierra-step-by-step-video/">Building a GTX 1080 Ti-powered Hackintosh: Installing macOS Sierra step-by-step [Video]</a></li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>获取 Windows 操作系统的系统、网络、硬件、软件等信息</title>
    <url>/2019/07/28/GetWindowsInfo/</url>
    <content><![CDATA[<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><ul>
<li>源码：<a href="https://github.com/huihut/WindowsInfo.Net/">WindowsInfo.Net</a></li>
<li>可执行文件：<a href="https://github.com/huihut/WindowsInfo.Net/releases">WindowsInfo.Net.exe</a></li>
</ul>
<span id="more"></span>

<h2 id="获取的信息"><a href="#获取的信息" class="headerlink" title="获取的信息"></a>获取的信息</h2><p>能获得的信息如下（系统、硬件、网络信息已打码）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---------  系统信息  ---------</span><br><span class="line">计算机名：***</span><br><span class="line">登录用户名：***</span><br><span class="line">操作系统类型：***</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------  硬件信息  ---------</span><br><span class="line">本机的MAC地址：***</span><br><span class="line">主板序列号：***</span><br><span class="line">主板制造厂商：***</span><br><span class="line">主板编号：***</span><br><span class="line">主板编号：***</span><br><span class="line">主板型号：***</span><br><span class="line">CPU序列号：***</span><br><span class="line">CPU编号：***</span><br><span class="line">CPU版本信息：***</span><br><span class="line">CPU名称信息：***</span><br><span class="line">CPU制造厂商：***</span><br><span class="line">物理硬盘序列号：***</span><br><span class="line">磁盘序列号：***</span><br><span class="line">网卡地址：***</span><br><span class="line">网卡硬件地址：***</span><br><span class="line">物理内存：***</span><br><span class="line">显卡PNPDeviceID：***</span><br><span class="line">声卡PNPDeviceID：***</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------  网络信息  ---------</span><br><span class="line">IP地址：***</span><br><span class="line">本地ip地址：***</span><br><span class="line">本地ip地址：***</span><br><span class="line">外网ip地址：***</span><br><span class="line">外网ip地址：***</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------  软件信息  ---------</span><br><span class="line">GitHub Desktop	2.1.0</span><br><span class="line">Mozilla Firefox 68.0 (x86 en-US)	68.0</span><br><span class="line">Microsoft OneDrive	19.103.0527.0003</span><br><span class="line">Python 3.7.2 (32-bit)	3.7.2150.0</span><br><span class="line">Microsoft Visual Studio Code (User)	1.36.1</span><br><span class="line">***</span><br></pre></td></tr></table></figure>

<h2 id="硬件网络信息"><a href="#硬件网络信息" class="headerlink" title="硬件网络信息"></a>硬件网络信息</h2><p>硬件网络信息是通过 System.Management 里面的类方法获取的，具体类方法可查看官方文档：</p>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.management">System.Management Namespace</a></p>
<h2 id="软件信息"><a href="#软件信息" class="headerlink" title="软件信息"></a>软件信息</h2><p>软件信息是通过读取注册表的方式获取的，所以软件开发使用的话需要验证一下某些安全管家是否会警告。</p>
<ul>
<li>都有的信息：名字（DisplayName）</li>
<li>大部分都有的信息：名字（DisplayName）、版本号（DisplayVersion）、发行商（Publisher）、安装日期（InstallDate）</li>
<li>比较多信息的如下图：<br>  <img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/%E6%B3%A8%E5%86%8C%E8%A1%A8-VMware.png"></li>
</ul>
<h3 id="软件信息在注册表的路径"><a href="#软件信息在注册表的路径" class="headerlink" title="软件信息在注册表的路径"></a>软件信息在注册表的路径</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall\</span><br><span class="line">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\</span><br></pre></td></tr></table></figure>

<h3 id="监控读取注册表"><a href="#监控读取注册表" class="headerlink" title="监控读取注册表"></a>监控读取注册表</h3><p>测试了一下读取注册表，360，腾讯管家不会警告，但有些软件（如：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procmon">procmon</a>）能监控进程的读取的行为。</p>
<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/20190328110726.png"></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Dotnet</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 弃用 TLS 1.0、1.1 导致 push 异常 SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert protocol version</title>
    <url>/2018/02/28/GitHubAbandonedTLS1.0_1.1/</url>
    <content><![CDATA[<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>git push 到 Github 的时候出现异常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/huihut/interview.git/&#x27;: error:1407742E:SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert protocol version</span><br><span class="line">Pushing to https://github.com/huihut/interview.git</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在 2018年2月22日19:00 UTC（太平洋标准时间上午11:00），GitHub 停止了对加密弱 TLS 1.0 和 1.1 协议的支持，并且仅支持与 TLS 1.2 协议的连接。</p>
<p>官方声明：</p>
<p><a href="https://githubengineering.com/crypto-removal-notice/">Github . Weak cryptographic standards removal notice</a></p>
<p>因此，如果你的 git 连接方式仍然是 TLS 1.0 或 1.1，则会报错。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>①  查看你的 TLS 版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>

<p>②  如果仍然是 TLS 1.0 或 1.1，则下载更新 Git 最新版：<a href="https://git-scm.com/">https://git-scm.com/</a></p>
<p>③  安装好最新版 Git 后，更新 TLS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.sslVersion</span><br><span class="line">git config --global --add http.sslVersion tlsv1.2</span><br></pre></td></tr></table></figure>

<p>④  现在则可以使用 TLS 1.2 传输，并解决了此问题</p>
<p>操作如下图：</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/gitconfighttp.sslVersion.png"></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>使用MFC的CDC类绘制二维坐标系及正余弦函数</title>
    <url>/2017/10/13/GraphicsExercise2D/</url>
    <content><![CDATA[<h2 id="系列链接"><a href="#系列链接" class="headerlink" title="系列链接"></a>系列链接</h2><ul>
<li><p><a href="https://blog.huihut.com/2017/10/13/GraphicsExercise2D/">使用MFC的CDC类绘制二维坐标系及正余弦函数</a> &#x2F; <a href="https://github.com/huihut/GraphicsExercise2D">源码</a></p>
</li>
<li><p><a href="https://blog.huihut.com/2017/10/13/GraphicsExercise3D/">使用MFC的CDC类绘制三维坐标系及球面函数</a> &#x2F; <a href="https://github.com/huihut/GraphicsExercise3D">源码</a></p>
</li>
</ul>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文使用MFC的CDC类绘制二维坐标系及正余弦函数，可以进行坐标变换、规模变换，可以设置绘制的函数。通过输入自变量的范围及步长，绘制出相应的函数图形。</p>
<span id="more"></span>

<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p><code>Visual Studio</code>- <code>新建项目</code> - <code>MFC应用程序</code> - 命名为<code>CGraphicsExercise2D</code> - <code>确定</code> - <code>下一步</code> - 应用程序类型选择<code>单个文档</code> - <code>完成</code></p>
<h2 id="绘制函数"><a href="#绘制函数" class="headerlink" title="绘制函数"></a>绘制函数</h2><p>Visual Studio为我们创建了很多无用的代码，而我们的绘制函数在在<code>CGraphicsExercise2DView.cpp</code>的</p>
<pre><code>void CGraphicsExercise2DView::OnDraw(CDC* /*pDC*/)
&#123;
  CGraphicsExercise2DDoc* pDoc = GetDocument();
  ASSERT_VALID(pDoc);
  if (!pDoc)
  return;

  // TODO: 在此处为本机数据添加绘制代码
&#125;
</code></pre>
<p>取消<code>pDC</code>的注释，变成</p>
<pre><code>void CGraphicsExercise2DView::OnDraw(CDC* pDC)
</code></pre>
<p>在</p>
<pre><code>// TODO: 在此处为本机数据添加绘制代码
</code></pre>
<p>下面编写你自己的程序，如画一条线：</p>
<pre><code>pDC-&gt;MoveTo(20, 30);    // 画笔移到从左上角往右20像素、往下30像素
pDC-&gt;LineTo(100, 100);    // 画一条线到右100、下100的位置
</code></pre>
<p>运行下看下效果吧！</p>
<p>现在删掉上面两行那条线，开始正式编写二维坐标系了。</p>
<h2 id="规模变换函数"><a href="#规模变换函数" class="headerlink" title="规模变换函数"></a>规模变换函数</h2><p>上面的<code>MoveTo(20, 30)</code>中的20、30是在显示器上的像素点，如果绘制的坐标系是以像素为大小的话，那1、2这样小的单位在显示器上就难以看到，因此需要规模变换。通常是把小单位乘上放大规模（倍数）就可以了。</p>
<p>在<code>CGraphicsExercise2DView.h</code></p>
<pre><code>public:
  void SetScale(int scale);
  float TransformScale(float num);

private:
    int scale;
</code></pre>
<p>在<code>CGraphicsExercise2DView.cpp</code></p>
<pre><code>// 设置规模
void CGraphicsExercise2DView::SetScale(int scale)
&#123;
  this-&gt;scale = scale;
&#125;

// 变换规模
float CGraphicsExercise2DView::TransformScale(float num)
&#123;
  return num * scale;
&#125;
</code></pre>
<p>并在<code>CGraphicsExercise2DView()</code>函数添加</p>
<pre><code>// 设置规模比例
SetScale(70);
</code></pre>
<h2 id="变换坐标和规模"><a href="#变换坐标和规模" class="headerlink" title="变换坐标和规模"></a>变换坐标和规模</h2><p>在<code>CGraphicsExercise2DView.h</code></p>
<pre><code>public:
  float TransformCoordinateScaleX(float x);
  float TransformCoordinateScaleY(float y);
</code></pre>
<p>在<code>CGraphicsExercise2DView.cpp</code></p>
<pre><code>// 变换x的坐标和规模
float CGraphicsExercise2DView::TransformCoordinateScaleX(float x)
&#123;
     return TransformScale(x + 2);
&#125;

// 变换y的坐标和规模
float CGraphicsExercise2DView::TransformCoordinateScaleY(float y)
&#123;
     return TransformScale(y + 4);
&#125;
</code></pre>
<h2 id="设置绘制的函数类型"><a href="#设置绘制的函数类型" class="headerlink" title="设置绘制的函数类型"></a>设置绘制的函数类型</h2><p>在<code>CGraphicsExercise2DView.h</code></p>
<p>类外面定义</p>
<pre><code>// 支持绘制的函数类型
enum Function &#123; Sin, Cos &#125;;
</code></pre>
<p>类里面定义</p>
<pre><code>public:
  void SetDrawFunction(Function fun);

private:
  Function fun;
</code></pre>
<p>在<code>GraphicsExerciseView.cpp</code></p>
<pre><code>#include &lt;math.h&gt;

// 设置绘制的函数
void CGraphicsExercise2DView::SetDrawFunction(Function fun)
&#123;
    this-&gt;fun = fun;
&#125;
</code></pre>
<p>并在<code>CGraphicsExercise2DView()</code>函数添加</p>
<pre><code>// 设置绘制的函数
SetDrawFunction(Sin);
</code></pre>
<h2 id="函数范围和步长"><a href="#函数范围和步长" class="headerlink" title="函数范围和步长"></a>函数范围和步长</h2><p>设置正余弦函数的x取值范围如<code>[0, 2*π]</code>，设置x的取样步长如<code>0.01</code>。</p>
<p>在<code>CGraphicsExercise2DView.h</code></p>
<pre><code>public:
  void SetPlotSin(float startX, float endX, float step);

private:
  float startX, endX, step;
</code></pre>
<p>在<code>CGraphicsExercise2DView.cpp</code></p>
<pre><code>// 设置范围和步长
void CGraphicsExercise2DView::SetPlotSin(float startX, float endX, float step)
&#123;
     this-&gt;startX = startX;
     this-&gt;endX = endX;
     this-&gt;step = step;
&#125;
</code></pre>
<p>并在<code>CGraphicsExercise2DView()</code>函数添加</p>
<pre><code>// 设置自变量x范围[startX, endX]、取样步长step
SetPlotSin((float)0.0, (float)6.3, (float)0.01);
</code></pre>
<h2 id="绘制坐标系"><a href="#绘制坐标系" class="headerlink" title="绘制坐标系"></a>绘制坐标系</h2><p>坐标系是距离左上角右下各2 * 规模个像素开始绘制的（即y轴的顶点是（2 * 放大规模, 2 * 放大规模））</p>
<p>在<code>OnDraw()</code>函数的<code>// TODO: 在此处为本机数据添加绘制代码</code>下面添加如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// -------------------- 绘制坐标系 -------------------------</span><br><span class="line"></span><br><span class="line">float endPointX = 2 + endX + 2;</span><br><span class="line"></span><br><span class="line">// 坐标y轴</span><br><span class="line">pDC-&gt;MoveTo((int)TransformScale(2), (int)TransformScale(2));</span><br><span class="line">pDC-&gt;LineTo((int)TransformScale(2), (int)TransformScale(6));</span><br><span class="line"></span><br><span class="line">// 坐标x轴</span><br><span class="line">pDC-&gt;MoveTo((int)TransformScale(2), (int)TransformScale(4));</span><br><span class="line">pDC-&gt;LineTo((int)TransformScale(endPointX), (int)TransformScale(4));</span><br><span class="line"></span><br><span class="line">// 坐标y轴的箭头</span><br><span class="line">pDC-&gt;MoveTo((int)TransformScale((float)1.8), (int)TransformScale((float)2.2));</span><br><span class="line">pDC-&gt;LineTo((int)TransformScale(2), (int)TransformScale(2));</span><br><span class="line">pDC-&gt;LineTo((int)TransformScale((float)2.2), (int)TransformScale((float)2.2));</span><br><span class="line"></span><br><span class="line">// 坐标x轴的箭头</span><br><span class="line">pDC-&gt;MoveTo((int)TransformScale(endPointX - (float)0.2), (int)TransformScale((float)3.8));</span><br><span class="line">pDC-&gt;LineTo((int)TransformScale(endPointX), (int)TransformScale(4));</span><br><span class="line">pDC-&gt;LineTo((int)TransformScale(endPointX - (float)0.2), (int)TransformScale((float)4.2));</span><br><span class="line"></span><br><span class="line">// -------------------- 绘制刻度线 -------------------------</span><br><span class="line"></span><br><span class="line">// 绘制y轴刻度线</span><br><span class="line">for (float scaleY = 3; scaleY &lt;= 5; scaleY += 0.2)</span><br><span class="line">&#123;</span><br><span class="line">  pDC-&gt;MoveTo((int)TransformScale(2), (int)TransformScale(scaleY));</span><br><span class="line">  pDC-&gt;LineTo((int)TransformScale((float)2.1), (int)TransformScale(scaleY));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 绘制x轴刻度线</span><br><span class="line">for (float scaleX = 2.2; scaleX &lt; endPointX - 1; scaleX += 0.2)</span><br><span class="line">&#123;</span><br><span class="line">  pDC-&gt;MoveTo((int)TransformScale(scaleX), (int)TransformScale(4));</span><br><span class="line">  pDC-&gt;LineTo((int)TransformScale(scaleX), (int)TransformScale(3.9));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// -------------------- 绘制文字 -------------------------</span><br><span class="line"></span><br><span class="line">// 绘制y轴的y</span><br><span class="line">pDC-&gt;TextOutW((int)TransformScale(1.8), (int)TransformScale(2.3), CString(&quot;y&quot;));</span><br><span class="line">// 绘制x轴的x</span><br><span class="line">pDC-&gt;TextOutW((int)TransformScale(endPointX - (float)0.5), (int)TransformScale(4.1), CString(&quot;x&quot;));</span><br><span class="line"></span><br><span class="line">CString s;</span><br><span class="line">// 绘制y轴刻度文字</span><br><span class="line">for (float ScaleTextY = 2.9, text = 1.0; ScaleTextY &lt;= 4.9; ScaleTextY += 0.2, text -= 0.2)</span><br><span class="line">&#123;</span><br><span class="line">  s.Format(_T(&quot;%.1f&quot;), text);</span><br><span class="line">  pDC-&gt;TextOutW((int)TransformScale(1.6), (int)TransformScale(ScaleTextY), s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 绘制x轴刻度文字</span><br><span class="line">for (float ScaleTextX = 2.3; ScaleTextX &lt; endPointX - 1; ScaleTextX += 0.4)</span><br><span class="line">&#123;</span><br><span class="line">  s.Format(_T(&quot;%.1f&quot;), ScaleTextX - 1.9);</span><br><span class="line">  pDC-&gt;TextOutW((int)TransformScale(ScaleTextX), (int)TransformScale(4.1), s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 绘制函数图的Title</span><br><span class="line">// 判断调用的函数</span><br><span class="line">switch (fun)</span><br><span class="line">&#123;</span><br><span class="line">case Sin:</span><br><span class="line">  pDC-&gt;TextOutW((int)TransformScale(4), (int)TransformScale(6), CString(&quot;y = sin( x )&quot;));</span><br><span class="line">  break;</span><br><span class="line">case Cos:</span><br><span class="line">  pDC-&gt;TextOutW((int)TransformScale(4), (int)TransformScale(6), CString(&quot;y = cos( x )&quot;));</span><br><span class="line">  break;</span><br><span class="line">default:</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="绘制函数-1"><a href="#绘制函数-1" class="headerlink" title="绘制函数"></a>绘制函数</h2><p>x从startX绘制到endX，每间隔step绘制一次。</p>
<p>也是在<code>OnDraw()</code>函数下面添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// -------------------- 绘制函数 -------------------------</span><br><span class="line"></span><br><span class="line">// 不改变坐标和规模的xy</span><br><span class="line">float x, y;</span><br><span class="line"></span><br><span class="line">for (x = startX; x &lt;= endX; x += step)</span><br><span class="line">&#123;</span><br><span class="line">  // 判断调用的函数</span><br><span class="line">  switch (fun)</span><br><span class="line">  &#123;</span><br><span class="line">  case Sin:</span><br><span class="line">    y = (float)sin(x);</span><br><span class="line">    break;</span><br><span class="line">  case Cos:</span><br><span class="line">    y = (float)cos(x);</span><br><span class="line">    break;</span><br><span class="line">  default:</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 对xy改变坐标和规模再显示点</span><br><span class="line">  pDC-&gt;SetPixel((int)TransformCoordinateScaleX(x), (int)TransformCoordinateScaleY(y), 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/GraphicsExercise2DCapture.png" alt="GraphicsExercise2DCapture"></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>MFC</tag>
      </tags>
  </entry>
  <entry>
    <title>使用MFC的CDC类绘制三维坐标系及球面函数</title>
    <url>/2017/10/13/GraphicsExercise3D/</url>
    <content><![CDATA[<h2 id="系列链接"><a href="#系列链接" class="headerlink" title="系列链接"></a>系列链接</h2><ul>
<li><p><a href="https://blog.huihut.com/2017/10/13/GraphicsExercise2D/">使用MFC的CDC类绘制二维坐标系及正余弦函数</a> &#x2F; <a href="https://github.com/huihut/GraphicsExercise2D">源码</a></p>
</li>
<li><p><a href="https://blog.huihut.com/2017/10/13/GraphicsExercise3D/">使用MFC的CDC类绘制三维坐标系及球面函数</a> &#x2F; <a href="https://github.com/huihut/GraphicsExercise3D">源码</a></p>
</li>
</ul>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文使用MFC的CDC类绘制三维坐标系及球面函数。首先计算推导出三维坐标在二维平面显示的坐标变换方程（使用斜二测视图），使用球面的参数方程，然后定义图形缩放比例规模、坐标轴位移，变换坐标系和规模等，最后绘制坐标轴及球面函数。</p>
<p>如果对绘制二维坐标系还不太熟悉可以先看上面系列链接的：<a href="https://blog.huihut.com/2017/10/13/GraphicsExercise2D/">使用MFC的CDC类绘制二维坐标系及正余弦函数</a>，本文对二维绘制及绘制函数部分不再赘述。因为二维坐标系的博文已经分模块讲解地比较清楚了，而与三维坐标系的基本思路相同，所以本文大部分直接使用注释讲解。</p>
<span id="more"></span>

<h2 id="三维转二维的推导"><a href="#三维转二维的推导" class="headerlink" title="三维转二维的推导"></a>三维转二维的推导</h2><p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Transform3Dto2D.png" alt="Transform3Dto2D"></p>
<p>上图可知，只要使用<code>Transform3Dto2D()</code>函数，即可方便的把三维坐标转化为二维坐标（斜二测视图）。</p>
<h2 id="球面参数方程"><a href="#球面参数方程" class="headerlink" title="球面参数方程"></a>球面参数方程</h2><p>在三维空间直角坐标系中，以原点为球心、半径为 <code>r</code> 的球面的方程为 <code>x^2 + y^2 + z^2 = r^2</code>，其参数方程为</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/SphericalParameterEquation.png" alt="SphericalParameterEquation"></p>
<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p><code>Visual Studio</code>- <code>新建项目</code> - <code>MFC应用程序</code> - 命名为<code>GraphicsExercise3D</code> - <code>确定</code> - <code>下一步</code> - 应用程序类型选择<code>单个文档</code> - <code>完成</code></p>
<h2 id="GraphicsExercise3DView-h"><a href="#GraphicsExercise3DView-h" class="headerlink" title="GraphicsExercise3DView.h"></a>GraphicsExercise3DView.h</h2><p>在<code>GraphicsExercise3DView.h</code>添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 操作</span><br><span class="line">public:</span><br><span class="line">	void SetScale(int scale);</span><br><span class="line">	void SetTransformOrigin(float transformOriginX, float transformOriginY);</span><br><span class="line">	void SetPlotSphere(float radius, float stepPhi, float stepTheta);</span><br><span class="line">  	void SetSlantRadian(float slant);</span><br><span class="line"></span><br><span class="line">	float TransformScale(float num);</span><br><span class="line">	float TransformOriginX(float x);</span><br><span class="line">	float TransformOriginY(float y);</span><br><span class="line">	float TransformOriginScaleX(float x);</span><br><span class="line">	float TransformOriginScaleY(float y);</span><br><span class="line">	void Transform3Dto2D(float &amp;x, float &amp;y, float z);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    int scale;</span><br><span class="line">    float radius, stepPhi, stepTheta, slant, transformOriginX, transformOriginY;</span><br></pre></td></tr></table></figure>

<h2 id="GraphicsExercise3DView-cpp"><a href="#GraphicsExercise3DView-cpp" class="headerlink" title="GraphicsExercise3DView.cpp"></a>GraphicsExercise3DView.cpp</h2><p>引入数学函数库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;math.h&gt;</span><br></pre></td></tr></table></figure>

<p>定义π</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef PI</span><br><span class="line">#define PI 3.14159</span><br><span class="line">#endif // !PI</span><br></pre></td></tr></table></figure>

<p>在构造函数初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGraphicsExercise3DView::CGraphicsExercise3DView()</span><br><span class="line">&#123;</span><br><span class="line">	// TODO: 在此处添加构造代码</span><br><span class="line"></span><br><span class="line">	// 设置斜二测视图倾斜角度（弧度制）</span><br><span class="line">	SetSlantRadian(PI / 4);</span><br><span class="line"></span><br><span class="line">	// 设置规模比例</span><br><span class="line">	SetScale(70);</span><br><span class="line"></span><br><span class="line">	// 设置坐标系在x、y方向的位移（不改变规模情况下，即移动像素）</span><br><span class="line">	SetTransformOrigin(300, 350);</span><br><span class="line"></span><br><span class="line">	// 设置球面半径radius、取样步长stepPhi、stepTheta</span><br><span class="line">	SetPlotSphere(2.0, 0.01, 0.1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置初始化参数的Set函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 设置规模</span><br><span class="line">void CGraphicsExercise3DView::SetScale(int scale)</span><br><span class="line">&#123;</span><br><span class="line">	this-&gt;scale = scale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置坐标系原点在x、y方向的位移（不改变规模情况下，即移动像素）</span><br><span class="line">void CGraphicsExercise3DView::SetTransformOrigin(float transformOriginX, float transformOriginY)</span><br><span class="line">&#123;</span><br><span class="line">	this-&gt;transformOriginX = transformOriginX;</span><br><span class="line">	this-&gt;transformOriginY = transformOriginY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置球面半径radius、取样步长stepPhi、stepTheta</span><br><span class="line">void CGraphicsExercise3DView::SetPlotSphere(float radius, float stepPhi, float stepTheta)</span><br><span class="line">&#123;</span><br><span class="line">	this-&gt;radius = radius;</span><br><span class="line">	this-&gt;stepPhi = stepPhi;</span><br><span class="line">	this-&gt;stepTheta = stepTheta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置斜二测视图的倾斜角（单位弧度）</span><br><span class="line">void CGraphicsExercise3DView::SetSlantRadian(float slant)</span><br><span class="line">&#123;</span><br><span class="line">	this-&gt;slant = slant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>坐标及规模变换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 变换规模</span><br><span class="line">float CGraphicsExercise3DView::TransformScale(float num)</span><br><span class="line">&#123;</span><br><span class="line">	return num * scale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 坐标系X轴方向位移</span><br><span class="line">float CGraphicsExercise3DView::TransformOriginX(float x)</span><br><span class="line">&#123;</span><br><span class="line">	return x + transformOriginX / scale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 坐标系y轴方向位移</span><br><span class="line">float CGraphicsExercise3DView::TransformOriginY(float y)</span><br><span class="line">&#123;</span><br><span class="line">	return y - transformOriginY / scale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 变换坐标系X和规模</span><br><span class="line">float CGraphicsExercise3DView::TransformOriginScaleX(float x)</span><br><span class="line">&#123;</span><br><span class="line">	return TransformScale(TransformOriginX(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 变换坐标系Y和规模</span><br><span class="line">float CGraphicsExercise3DView::TransformOriginScaleY(float y)</span><br><span class="line">&#123;</span><br><span class="line">	return -TransformScale(TransformOriginY(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三维坐标转化为二维坐标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 使用斜二测视图，把三维坐标点转化为二维平面上的点</span><br><span class="line">void CGraphicsExercise3DView::Transform3Dto2D(float &amp;x, float &amp;y, float z)</span><br><span class="line">&#123;</span><br><span class="line">	x = x - (z * cos(slant)) / 2;</span><br><span class="line">	y = y - (z * sin(slant)) / 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>绘制坐标轴及函数图形</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// CGraphicsExercise2View 绘制</span><br><span class="line"></span><br><span class="line">void CGraphicsExercise3DView::OnDraw(CDC* pDC)</span><br><span class="line">&#123;</span><br><span class="line">	CGraphicsExercise3DDoc* pDoc = GetDocument();</span><br><span class="line">	ASSERT_VALID(pDoc);</span><br><span class="line">	if (!pDoc)</span><br><span class="line">		return;</span><br><span class="line"></span><br><span class="line">	// TODO: 在此处为本机数据添加绘制代码</span><br><span class="line"></span><br><span class="line">	float x, y, z;</span><br><span class="line"></span><br><span class="line">	// -------------------- 绘制坐标系 -------------------------</span><br><span class="line"></span><br><span class="line">	// 坐标x轴</span><br><span class="line">	pDC-&gt;MoveTo(TransformOriginScaleX(0), TransformOriginScaleY(0));</span><br><span class="line">	pDC-&gt;LineTo(TransformOriginScaleX(radius + 2), TransformOriginScaleY(0));</span><br><span class="line"></span><br><span class="line">	// 坐标y轴</span><br><span class="line">	pDC-&gt;MoveTo(TransformOriginScaleX(0), TransformOriginScaleY(0));</span><br><span class="line">	pDC-&gt;LineTo(TransformOriginScaleX(0), TransformOriginScaleY(radius + 2));</span><br><span class="line"></span><br><span class="line">	// 坐标z轴</span><br><span class="line">	x = 0, y = 0;</span><br><span class="line">	Transform3Dto2D(x, y, radius + 5);</span><br><span class="line">	pDC-&gt;MoveTo(TransformOriginScaleX(0), TransformOriginScaleY(0));</span><br><span class="line">	pDC-&gt;LineTo(TransformOriginScaleX(x), TransformOriginScaleY(y));</span><br><span class="line"></span><br><span class="line">	// 坐标x轴的箭头</span><br><span class="line">	pDC-&gt;MoveTo(TransformOriginScaleX(radius + 1.8), TransformOriginScaleY(0.2));</span><br><span class="line">	pDC-&gt;LineTo(TransformOriginScaleX(radius + 2), TransformOriginScaleY(0));</span><br><span class="line">	pDC-&gt;LineTo(TransformOriginScaleX(radius + 1.8), TransformOriginScaleY(-0.2));</span><br><span class="line"></span><br><span class="line">	// 坐标y轴的箭头</span><br><span class="line">	pDC-&gt;MoveTo(TransformOriginScaleX(-0.2), TransformOriginScaleY(radius + 1.8));</span><br><span class="line">	pDC-&gt;LineTo(TransformOriginScaleX(0), TransformOriginScaleY(radius + 2));</span><br><span class="line">	pDC-&gt;LineTo(TransformOriginScaleX(0.2), TransformOriginScaleY(radius + 1.8));</span><br><span class="line"></span><br><span class="line">	// 坐标z轴的箭头</span><br><span class="line">	x = 0, y = 0.2;</span><br><span class="line">	Transform3Dto2D(x, y, radius + 5 - 0.2);</span><br><span class="line">	pDC-&gt;MoveTo(TransformOriginScaleX(x), TransformOriginScaleY(y));</span><br><span class="line">	x = 0, y = 0;</span><br><span class="line">	Transform3Dto2D(x, y, radius + 5);</span><br><span class="line">	pDC-&gt;LineTo(TransformOriginScaleX(x), TransformOriginScaleY(y));</span><br><span class="line">	x = 0.2, y = 0;</span><br><span class="line">	Transform3Dto2D(x, y, radius + 5 - 0.2);</span><br><span class="line">	pDC-&gt;LineTo(TransformOriginScaleX(x), TransformOriginScaleY(y));</span><br><span class="line"></span><br><span class="line">	// -------------------- 绘制刻度线 -------------------------</span><br><span class="line"></span><br><span class="line">	// 绘制x轴刻度线</span><br><span class="line">	for (float scaleX = 0.2; scaleX &lt; radius + 1; scaleX += 0.2)</span><br><span class="line">	&#123;</span><br><span class="line">		pDC-&gt;MoveTo((int)TransformOriginScaleX(scaleX), (int)TransformOriginScaleY(0));</span><br><span class="line">		pDC-&gt;LineTo((int)TransformOriginScaleX(scaleX), (int)TransformOriginScaleY(0.1));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 绘制y轴刻度线</span><br><span class="line">	for (float scaleY = 0.2; scaleY &lt;= radius + 1; scaleY += 0.2)</span><br><span class="line">	&#123;</span><br><span class="line">		pDC-&gt;MoveTo((int)TransformOriginScaleX(0), (int)TransformOriginScaleY(scaleY));</span><br><span class="line">		pDC-&gt;LineTo((int)TransformOriginScaleX(0.1), (int)TransformOriginScaleY(scaleY));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 绘制z轴刻度线</span><br><span class="line">	for (float x = 0, y = 0, scaleZ = 0.2; scaleZ &lt;= radius + 4; scaleZ += 0.2, x = 0, y = 0)</span><br><span class="line">	&#123;</span><br><span class="line">		Transform3Dto2D(x, y, scaleZ);</span><br><span class="line">		pDC-&gt;MoveTo((int)TransformOriginScaleX(x), (int)TransformOriginScaleY(y));</span><br><span class="line">		pDC-&gt;LineTo((int)TransformOriginScaleX(x + 0.1), (int)TransformOriginScaleY(y));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	// -------------------- 绘制文字 -------------------------</span><br><span class="line"></span><br><span class="line">	// 绘制x轴的x</span><br><span class="line">	pDC-&gt;TextOutW(TransformOriginScaleX(radius + 1.6), TransformOriginScaleY(-0.2), CString(&quot;x&quot;));</span><br><span class="line">	// 绘制y轴的y</span><br><span class="line">	pDC-&gt;TextOutW(TransformOriginScaleX(-0.2), TransformOriginScaleY(radius + 1.6), CString(&quot;y&quot;));</span><br><span class="line">	// 绘制z轴的z</span><br><span class="line">	x = 0.2, y = 0;</span><br><span class="line">	Transform3Dto2D(x, y, radius + 5 - 0.4);</span><br><span class="line">	pDC-&gt;TextOutW(TransformOriginScaleX(x), TransformOriginScaleY(y), CString(&quot;z&quot;));</span><br><span class="line"></span><br><span class="line">	CString s;</span><br><span class="line">	// 绘制x轴刻度文字</span><br><span class="line">	for (float ScaleTextX = 0.4; ScaleTextX &lt; radius + 1; ScaleTextX += 0.4)</span><br><span class="line">	&#123;</span><br><span class="line">		s.Format(_T(&quot;%.1f&quot;), ScaleTextX);</span><br><span class="line">		pDC-&gt;TextOutW(TransformOriginScaleX(ScaleTextX - 0.1), TransformOriginScaleY(-0.1), s);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 绘制y轴刻度文字</span><br><span class="line">	for (float ScaleTextY = 0.4; ScaleTextY &lt;= radius + 1; ScaleTextY += 0.4)</span><br><span class="line">	&#123;</span><br><span class="line">		s.Format(_T(&quot;%.1f&quot;), ScaleTextY);</span><br><span class="line">		pDC-&gt;TextOutW(TransformOriginScaleX(-0.4), TransformOriginScaleY(ScaleTextY + 0.1), s);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 绘制z轴刻度文字</span><br><span class="line">	for (float ScaleTextZ = 0.6; ScaleTextZ &lt;= radius + 4; ScaleTextZ += 0.6)</span><br><span class="line">	&#123;</span><br><span class="line">		s.Format(_T(&quot;%.1f&quot;), ScaleTextZ);</span><br><span class="line">		x = 0, y = 0;</span><br><span class="line">		Transform3Dto2D(x, y, ScaleTextZ);</span><br><span class="line">		pDC-&gt;TextOutW(TransformOriginScaleX(x + 0.15), TransformOriginScaleY(y + 0.12), s);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 绘制函数图的Title</span><br><span class="line">	x = 0, y = 0;</span><br><span class="line">	Transform3Dto2D(x, y, radius + 5);</span><br><span class="line">	pDC-&gt;TextOutW(TransformOriginScaleX(x + 3), TransformOriginScaleY(y), CString(&quot;x^2 + y^2 + z^2 = r^2&quot;));</span><br><span class="line"></span><br><span class="line">	// -------------------- 绘制函数 -------------------------</span><br><span class="line"></span><br><span class="line">	// 球面</span><br><span class="line">	float phi, theta;</span><br><span class="line">	for (phi = 0; phi &lt; 2 * PI; phi += stepPhi)</span><br><span class="line">	&#123;</span><br><span class="line">		for (theta = 0; theta &lt; PI; theta += stepTheta)</span><br><span class="line">		&#123;</span><br><span class="line">			x = radius * sin(phi) * cos(theta);</span><br><span class="line">			y = radius * sin(phi) * sin(theta);</span><br><span class="line">			z = radius * cos(phi);</span><br><span class="line"></span><br><span class="line">			Transform3Dto2D(x, y, z);</span><br><span class="line"></span><br><span class="line">			srand(z);</span><br><span class="line">			pDC-&gt;SetPixel(TransformOriginScaleX(x), TransformOriginScaleY(y), RGB(rand() % 255, rand() % 255, rand() % 255));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	//// 三棱锥（测试用）</span><br><span class="line">	//x = 1, y = 0, z = 0;</span><br><span class="line">	//Transform3Dto2D(x, y, z);</span><br><span class="line">	//pDC-&gt;MoveTo((int)TransformOriginScaleX(x), (int)TransformOriginScaleY(y));</span><br><span class="line"></span><br><span class="line">	//x = 0, y = 1, z = 0;</span><br><span class="line">	//Transform3Dto2D(x, y, z);</span><br><span class="line">	//pDC-&gt;LineTo((int)TransformOriginScaleX(x), (int)TransformOriginScaleY(y));</span><br><span class="line"></span><br><span class="line">	//x = 0, y = 0, z = 1;</span><br><span class="line">	//Transform3Dto2D(x, y, z);</span><br><span class="line">	//pDC-&gt;LineTo((int)TransformOriginScaleX(x), (int)TransformOriginScaleY(y));</span><br><span class="line"></span><br><span class="line">	//x = 1, y = 0, z = 0;</span><br><span class="line">	//Transform3Dto2D(x, y, z);</span><br><span class="line">	//pDC-&gt;LineTo((int)TransformOriginScaleX(x), (int)TransformOriginScaleY(y));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/GraphicsExercise3DCapture.png" alt="GraphicsExercise3DCapture"></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>MFC</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 构建静态文件无法生成 index.html 等文件</title>
    <url>/2017/05/13/HexoNPMERR/</url>
    <content><![CDATA[<h2 id="hexo-g-无法生成-index"><a href="#hexo-g-无法生成-index" class="headerlink" title="hexo g 无法生成 index"></a>hexo g 无法生成 index</h2><p>构建情况如下图：</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/ganningZHexoNoIndex.png"></p>
<p>但是一些文件没有生成，如 <code>index.html</code> 文件。</p>
<span id="more"></span>

<h2 id="查看-npm-安装各-hexo-插件的情况"><a href="#查看-npm-安装各-hexo-插件的情况" class="headerlink" title="查看 npm 安装各 hexo 插件的情况"></a>查看 npm 安装各 hexo 插件的情况</h2><pre><code>npm ls --depth 0
</code></pre>
<h2 id="hexo-的一些插件未安装插件"><a href="#hexo-的一些插件未安装插件" class="headerlink" title="hexo 的一些插件未安装插件"></a>hexo 的一些插件未安装插件</h2><p><strong>npm ERR! missing npm ERR! missing hexo-generator-archive…</strong></p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/ganningZHexoNPMls.png"></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>逐一安装缺失的包</p>
<pre><code>npm install hexo-generator-archive --save
...
</code></pre>
<p>安装完后重新构建即可解决。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Log4cplus 日志库</title>
    <url>/2020/11/22/Log4cplusLogLibrary/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Log4cplus 是 log4j 的 C++ 实现，其接口和使用逻辑与 log4j 基本保持一致。</p>
<ul>
<li>log4cplus 具有线程安全、灵活、以及多粒度控制的特点</li>
<li>可以通过将日志划分优先级使其可以面向程序调试、运行、测试、和维护等全生命周期</li>
<li>可以选择将日志输出到控制台、调试器、文件、服务器</li>
<li>可以通过指定策略对日志进行定期备份</li>
</ul>
<span id="more"></span>

<h2 id="许可协议"><a href="#许可协议" class="headerlink" title="许可协议"></a>许可协议</h2><p>Log4cplus 的每个文件是使用二级BSD许可协议（Two clause BSD license）或者 Apache license 2.0 许可协议，其中的线程池（ThreadPool.h）又是使用另外的协议。</p>
<h2 id="重要组成"><a href="#重要组成" class="headerlink" title="重要组成"></a>重要组成</h2><table>
<thead>
<tr>
<th>类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Filter</td>
<td>过滤器，过滤输出消息</td>
</tr>
<tr>
<td>Layout</td>
<td>布局器，控制输出消息的格式</td>
</tr>
<tr>
<td>Appender</td>
<td>附加器，将日志输出到所附加的设备终端如控制台、调试器、文件、远程服务器等等</td>
</tr>
<tr>
<td>Logger</td>
<td>记录器，保存并跟踪对象日志信息变更的实体，当你需要对一个对象进行记录时，就需要生成一个logger</td>
</tr>
<tr>
<td>Hierarchy</td>
<td>分类器，层次化的树型结构，用于对被记录信息的分类，层次中每一个节点维护一个logger的所有信息</td>
</tr>
<tr>
<td>LogLevel</td>
<td>优先权，包括TRACE, DEBUG, INFO, WARNING, ERROR, FATAL</td>
</tr>
</tbody></table>
<h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><ul>
<li>Hierarchy -&gt; Logger -&gt; Appender(Layout) -&gt; Filter</li>
<li>InternalLoggingEvent -&gt; LogLevel</li>
</ul>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>过滤器，用于过滤日志项，可继承Filter自定义过滤器，也可用自带的过滤器</p>
<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/log4cplus-filter.png"></p>
<ul>
<li>Filter</li>
<li>DenyAllFilter：全部过滤</li>
<li>LogLevelMatchFilter：等级过滤</li>
<li>LogLevelRangeFilter：等级范围过滤</li>
<li>StringMatchFilter：字符串过滤</li>
<li>FunctionFilter：方法函数过滤</li>
<li>NDCMatchFilter</li>
<li>MDCMatchFilter</li>
</ul>
<h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><p>布局器，控制输出日志消息的格式</p>
<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/log4cplus-layout.png"></p>
<ul>
<li>Layout</li>
<li>SimpleLayout: DEBUG - Hello world</li>
<li>TTCCLayout(time、thread、category、context)：[0x60004b030] INFO SlowObject &lt;Thread-0 loop&gt; - Actually doing something</li>
<li>PatternLayout</li>
</ul>
<h4 id="class-PatternLayout"><a href="#class-PatternLayout" class="headerlink" title="class PatternLayout"></a>class PatternLayout</h4><ul>
<li>%%a -- Abbreviated weekday name</li>
<li>%%A -- Full weekday name</li>
<li>%%b -- Abbreviated month name</li>
<li>%%B -- Full month name</li>
<li>%%c -- Standard date and time string</li>
<li>%%d -- Day of month as a decimal(1-31)</li>
<li>%%H -- Hour(0-23)</li>
<li>%%I -- Hour(1-12)</li>
<li>%%j -- Day of year as a decimal(1-366)</li>
<li>%%m -- Month as decimal(1-12)</li>
<li>%%M -- Minute as decimal(0-59)</li>
<li>%%p -- Locale's equivalent of AM or PM</li>
<li>%%q -- milliseconds as decimal(0-999) -- <b>Log4CPLUS specific</b>
<li>%%Q -- fractional milliseconds as decimal(0-999.999) -- <b>Log4CPLUS specific</b>
<li>%%S -- Second as decimal(0-59)</li>
<li>%%U -- Week of year, Sunday being first day(0-53)</li>
<li>%%w -- Weekday as a decimal(0-6, Sunday being 0)</li>
<li>%%W -- Week of year, Monday being first day(0-53)</li>
<li>%%x -- Standard date string</li>
<li>%%X -- Standard time string</li>
<li>%%y -- Year in decimal without century(0-99)</li>
<li>%%Y -- Year including century as decimal</li>
<li>%%Z -- Time zone name</li>
<li>%% -- The percent sign</li>
</ul>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">PatternLayout</span>(<span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;[%D&#123;%Y-%m-%d %H:%M:%S.%q&#125;] [%t] %-5p [%M] %m%n&quot;</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2020-08-24 01:30:43.650] [14168] DEBUG [main] <span class="built_in">log</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h3 id="Appender"><a href="#Appender" class="headerlink" title="Appender"></a>Appender</h3><p>附加器，将日志输出到所附加的设备终端如控制台、调试器、文件、远程服务器等等</p>
<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/log4cplus-appender.png"></p>
<h4 id="class-Appender"><a href="#class-Appender" class="headerlink" title="class Appender"></a>class Appender</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! Asynchronous append.</span></span><br><span class="line"><span class="type">bool</span> async;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">log4cplus::helpers::Properties properties;</span><br><span class="line">properties.<span class="built_in">setProperty</span>(<span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;AsyncAppend&quot;</span>), <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;true&quot;</span>));</span><br></pre></td></tr></table></figure>

<h4 id="class-AsyncAppender"><a href="#class-AsyncAppender" class="headerlink" title="class AsyncAppender"></a>class AsyncAppender</h4><p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/log4cplus-async-appender.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">log4cplus::helpers::Properties properties;</span><br><span class="line"><span class="function">log4cplus::SharedAppenderPtr <span class="title">fileAppend</span><span class="params">(<span class="keyword">new</span> log4cplus::RollingFileAppender(properties))</span></span>;</span><br><span class="line"><span class="function">log4cplus::SharedAppenderPtr <span class="title">asyncAppender</span><span class="params">(<span class="keyword">new</span> log4cplus::AsyncAppender(fileAppend, <span class="number">100</span>))</span></span>;</span><br><span class="line">m_logger.<span class="built_in">addAppender</span>(asyncAppender);</span><br></pre></td></tr></table></figure>

<h4 id="class-RollingFileAppender"><a href="#class-RollingFileAppender" class="headerlink" title="class RollingFileAppender"></a>class RollingFileAppender</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">RollingFileAppender</span>(<span class="type">const</span> log4cplus::tstring&amp; filename,</span><br><span class="line">                    <span class="type">long</span> maxFileSize = <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>,</span><br><span class="line">                    <span class="type">int</span> maxBackupIndex = <span class="number">1</span>,</span><br><span class="line">                    <span class="type">bool</span> immediateFlush = <span class="literal">true</span>,</span><br><span class="line">                    <span class="type">bool</span> createDirs = <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">RollingFileAppender</span>(<span class="type">const</span> log4cplus::helpers::Properties&amp; properties);</span><br></pre></td></tr></table></figure>

<h3 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h3><p>记录器，保存并跟踪对象日志信息变更的实体，当你需要对一个对象进行记录时，就需要生成一个logger</p>
<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/log4cplus-logger.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">log</span><span class="params">(LogLevel ll, <span class="type">const</span> log4cplus::tstring&amp; message,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">const</span> <span class="type">char</span>* file = LOG4CPLUS_CALLER_FILE (),</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">int</span> line = LOG4CPLUS_CALLER_LINE (),</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">const</span> <span class="type">char</span>* function = LOG4CPLUS_CALLER_FUNCTION ())</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">log</span><span class="params">(spi::InternalLoggingEvent <span class="type">const</span> &amp;)</span> <span class="type">const</span></span>;</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">forcedLog</span><span class="params">(LogLevel ll, <span class="type">const</span> log4cplus::tstring&amp; message,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">const</span> <span class="type">char</span>* file = LOG4CPLUS_CALLER_FILE (),</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">int</span> line = LOG4CPLUS_CALLER_LINE (),</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">const</span> <span class="type">char</span>* function = LOG4CPLUS_CALLER_FUNCTION ())</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">forcedLog</span><span class="params">(spi::InternalLoggingEvent <span class="type">const</span> &amp;)</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="Hierarchy"><a href="#Hierarchy" class="headerlink" title="Hierarchy"></a>Hierarchy</h3><p>分类器，层次化的树型结构，用于对被记录信息的分类，层次中每一个节点维护一个logger的所有信息</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> std::vector&lt;Logger&gt; ProvisionNode;</span><br><span class="line"><span class="keyword">typedef</span> std::map&lt;log4cplus::tstring, ProvisionNode&gt; ProvisionNodeMap;</span><br><span class="line"><span class="keyword">typedef</span> std::map&lt;log4cplus::tstring, Logger&gt; LoggerMap;</span><br><span class="line"></span><br><span class="line">ProvisionNodeMap provisionNodes;</span><br><span class="line">LoggerMap loggerPtrs;</span><br><span class="line">Logger root;</span><br></pre></td></tr></table></figure>

<h3 id="LogLevel"><a href="#LogLevel" class="headerlink" title="LogLevel"></a>LogLevel</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> LogLevel;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> LogLevel OFF_LOG_LEVEL     = <span class="number">60000</span>;</span><br><span class="line"><span class="type">const</span> LogLevel FATAL_LOG_LEVEL   = <span class="number">50000</span>;</span><br><span class="line"><span class="type">const</span> LogLevel ERROR_LOG_LEVEL   = <span class="number">40000</span>;</span><br><span class="line"><span class="type">const</span> LogLevel WARN_LOG_LEVEL    = <span class="number">30000</span>;</span><br><span class="line"><span class="type">const</span> LogLevel INFO_LOG_LEVEL    = <span class="number">20000</span>;</span><br><span class="line"><span class="type">const</span> LogLevel DEBUG_LOG_LEVEL   = <span class="number">10000</span>;</span><br><span class="line"><span class="type">const</span> LogLevel TRACE_LOG_LEVEL   = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> LogLevel ALL_LOG_LEVEL     = TRACE_LOG_LEVEL;</span><br><span class="line"><span class="type">const</span> LogLevel NOT_SET_LOG_LEVEL = <span class="number">-1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>属性，用于配置参数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">log4cplus::helpers::Properties properties;</span><br><span class="line">properties.<span class="built_in">setProperty</span>(<span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;File&quot;</span>), logFile.<span class="built_in">c_str</span>());</span><br><span class="line">properties.<span class="built_in">setProperty</span>(<span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;CreateDirs&quot;</span>), <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;true&quot;</span>));</span><br><span class="line">properties.<span class="built_in">setProperty</span>(<span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;ImmediateFlush&quot;</span>), <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;true&quot;</span>));</span><br><span class="line">properties.<span class="built_in">setProperty</span>(<span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;MaxFileSize&quot;</span>), std::<span class="built_in">to_wstring</span>(max_file_size).<span class="built_in">c_str</span>());</span><br><span class="line">properties.<span class="built_in">setProperty</span>(<span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;MaxBackupIndex&quot;</span>), std::<span class="built_in">to_wstring</span>(max_file_count).<span class="built_in">c_str</span>());</span><br><span class="line">properties.<span class="built_in">setProperty</span>(<span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;AsyncAppend&quot;</span>), s_async.<span class="built_in">c_str</span>());</span><br><span class="line">properties.<span class="built_in">setProperty</span>(<span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;Locale&quot;</span>), <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;en_US.UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="function">log4cplus::SharedAppenderPtr <span class="title">fileAppend</span><span class="params">(<span class="keyword">new</span> log4cplus::RollingFileAppender(properties))</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="可变参数格式化打印日志"><a href="#可变参数格式化打印日志" class="headerlink" title="可变参数格式化打印日志"></a>可变参数格式化打印日志</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">LOG4CPLUS_INFO</span>(logger, <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;Hello world&quot;</span>));</span><br></pre></td></tr></table></figure>

<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>LOG4CPLUS_INFO_FMT</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOG4CPLUS_INFO_FMT(logger, ...)  \</span></span><br><span class="line"><span class="meta">    LOG4CPLUS_MACRO_FMT_BODY (logger, INFO_LOG_LEVEL, __VA_ARGS__)</span></span><br></pre></td></tr></table></figure>

<p>LOG4CPLUS_MACRO_FMT_BODY</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOG4CPLUS_MACRO_FMT_BODY(logger, logLevel, ...)                 \</span></span><br><span class="line"><span class="meta">    LOG4CPLUS_SUPPRESS_DOWHILE_WARNING()                                \</span></span><br><span class="line"><span class="meta">    do &#123;                                                                \</span></span><br><span class="line"><span class="meta">        log4cplus::Logger const &amp; _l                                    \</span></span><br><span class="line"><span class="meta">            = log4cplus::detail::macros_get_logger (logger);            \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (LOG4CPLUS_MACRO_LOGLEVEL_PRED (                             \</span></span><br><span class="line"><span class="meta">                _l.isEnabledFor (log4cplus::logLevel), logLevel)) &#123;     \</span></span><br><span class="line"><span class="meta">            LOG4CPLUS_MACRO_INSTANTIATE_SNPRINTF_BUF (_snpbuf);         \</span></span><br><span class="line"><span class="meta">            log4cplus::tchar const * _logEvent                          \</span></span><br><span class="line"><span class="meta">                = _snpbuf.print (__VA_ARGS__);                          \</span></span><br><span class="line"><span class="meta">            log4cplus::detail::macro_forced_log (_l,                    \</span></span><br><span class="line"><span class="meta">                log4cplus::logLevel, _logEvent,                         \</span></span><br><span class="line"><span class="meta">                LOG4CPLUS_MACRO_FILE (), __LINE__,                      \</span></span><br><span class="line"><span class="meta">                LOG4CPLUS_MACRO_FUNCTION ());                           \</span></span><br><span class="line"><span class="meta">        &#125;                                                               \</span></span><br><span class="line"><span class="meta">    &#125; while(0)                                                          \</span></span><br><span class="line"><span class="meta">    LOG4CPLUS_RESTORE_DOWHILE_WARNING()</span></span><br></pre></td></tr></table></figure>

<p>LOG4CPLUS_MACRO_INSTANTIATE_SNPRINTF_BUF</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#  <span class="keyword">define</span> LOG4CPLUS_MACRO_INSTANTIATE_SNPRINTF_BUF(var)     \</span></span><br><span class="line"><span class="meta">    log4cplus::helpers::snprintf_buf &amp; var                  \</span></span><br><span class="line"><span class="meta">        = log4cplus::detail::get_macro_body_snprintf_buf ()</span></span><br></pre></td></tr></table></figure>

<p>snprintf_buf::print</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">tchar <span class="type">const</span> *</span></span><br><span class="line"><span class="function"><span class="title">snprintf_buf::print</span> <span class="params">(tchar <span class="type">const</span> * fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span> (fmt);</span><br><span class="line"></span><br><span class="line">    tchar <span class="type">const</span> * str = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    std::va_list args;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">va_start</span> (args, fmt);</span><br><span class="line">        ret = <span class="built_in">print_va_list</span> (str, fmt, args);</span><br><span class="line">        <span class="built_in">va_end</span> (args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ret == <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>snprintf_buf::print_va_list</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">snprintf_buf::print_va_list</span> <span class="params">(tchar <span class="type">const</span> * &amp; str, tchar <span class="type">const</span> * fmt,</span></span></span><br><span class="line"><span class="params"><span class="function">    std::va_list args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> printed;</span><br><span class="line">    std::<span class="type">size_t</span> <span class="type">const</span> fmt_len = std::char_traits&lt;tchar&gt;::<span class="built_in">length</span> (fmt);</span><br><span class="line">    std::<span class="type">size_t</span> buf_size = buf.<span class="built_in">size</span> ();</span><br><span class="line">    std::<span class="type">size_t</span> <span class="type">const</span> output_estimate = fmt_len + fmt_len / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (output_estimate &gt; buf_size)</span><br><span class="line">        buf.<span class="built_in">resize</span> (buf_size = output_estimate);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    printed = <span class="built_in">vsntprintf</span> (&amp;buf[<span class="number">0</span>], buf_size - <span class="number">1</span>, fmt, args);</span><br><span class="line">    <span class="keyword">if</span> (printed == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (EILSEQ)</span></span><br><span class="line">        <span class="keyword">if</span> (errno == EILSEQ)</span><br><span class="line">        &#123;</span><br><span class="line">            LogLog::<span class="built_in">getLogLog</span> ()-&gt;<span class="built_in">error</span> (</span><br><span class="line">                <span class="built_in">LOG4CPLUS_TEXT</span> (<span class="string">&quot;Character conversion error when printing&quot;</span>));</span><br><span class="line">            <span class="comment">// Return zero to terminate the outer loop in</span></span><br><span class="line">            <span class="comment">// snprintf_buf::print().</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        buf_size *= <span class="number">2</span>;</span><br><span class="line">        buf.<span class="built_in">resize</span> (buf_size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (printed &gt;= <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(buf_size - <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        buf_size = printed + <span class="number">2</span>;</span><br><span class="line">        buf.<span class="built_in">resize</span> (buf_size);</span><br><span class="line">        printed = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        buf[printed] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    str = &amp;buf[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> printed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实就是使用了C语音的可变参数宏实现参数可变</p>
<ul>
<li>va_start</li>
<li>va_arg</li>
<li>va_end</li>
</ul>
<p>vadefs.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">elif</span> defined _M_IX86 &amp;&amp; !defined _M_HYBRID_X86_ARM64</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> _INTSIZEOF(n)          ((sizeof(n) + sizeof(int) - 1) &amp; ~(sizeof(int) - 1))</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> __crt_va_start_a(ap, v) ((void)(ap = (va_list)_ADDRESSOF(v) + _INTSIZEOF(v)))</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> __crt_va_arg(ap, t)     (*(t*)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)))</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> __crt_va_end(ap)        ((void)(ap = (va_list)0))</span></span><br></pre></td></tr></table></figure>

<p>使用了 _vswprintf_p（sprintf） 做格式化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> _vswprintf_p(</span><br><span class="line">   <span class="type">wchar_t</span> *buffer,</span><br><span class="line">   <span class="type">size_t</span> count,</span><br><span class="line">   <span class="type">const</span> <span class="type">wchar_t</span> *format,</span><br><span class="line">   va_list argptr</span><br><span class="line">);</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sprintf</span> <span class="params">( </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">char</span> * str, </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> <span class="type">char</span> * format, </span></span></span><br><span class="line"><span class="params"><span class="function">    ... )</span></span>;</span><br></pre></td></tr></table></figure>

<p>C语言的函数是从右往左压入栈的，比如一下内存分布</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print_args</span><span class="params">(<span class="type">int</span> count, ...)</span> &#123;</span><br><span class="line">	<span class="type">int</span> i, value;</span><br><span class="line">	va_list arg_ptr;</span><br><span class="line">	va_start(arg_ptr, count);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;count; i++) &#123;</span><br><span class="line">		value = va_arg(arg_ptr,<span class="type">int</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;position %d = %d\n&quot;</span>, i+<span class="number">1</span>, value);</span><br><span class="line">	&#125;</span><br><span class="line">	va_end(arg_ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">	print_args(<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 5 |   // 高位地址</span><br><span class="line">| 4 |</span><br><span class="line">| 3 |</span><br><span class="line">| 2 |</span><br><span class="line">| 1 |   // arg_ptr</span><br><span class="line">| 5 |   // count</span><br></pre></td></tr></table></figure>

<h3 id="日志打印流程"><a href="#日志打印流程" class="headerlink" title="日志打印流程"></a>日志打印流程</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ul>
<li>Logger::log</li>
<li>LoggerImpl::log：等级</li>
<li>LoggerImpl::forcedLog：获取 InternalLoggingEvent</li>
<li>LoggerImpl::callAppenders：遍历父子附加器</li>
<li>AppenderAttachableImpl::appendLoopOnAppenders：遍历附加器列表</li>
<li>Appender::doAppend：同步异步</li>
<li>Appender::syncDoAppend：检查阈值、过滤器、锁</li>
<li>FileAppenderBase::append：文件打开、锁定（进程同步）、格式化附加、刷新</li>
<li>SimpleLayout::formatAndAppend：附加</li>
</ul>
<h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>Logger::log</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">Logger::log</span> <span class="params">(LogLevel ll, <span class="type">const</span> log4cplus::tstring&amp; message, <span class="type">const</span> <span class="type">char</span>* file,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> line, <span class="type">const</span> <span class="type">char</span>* function)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    value-&gt;<span class="built_in">log</span> (ll, message, file, line, function ? function : <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LoggerImpl::log：等级</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">LoggerImpl::log</span><span class="params">(LogLevel loglevel,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">const</span> log4cplus::tstring&amp; message,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">const</span> <span class="type">char</span>* file,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">int</span> line,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">const</span> <span class="type">char</span>* function)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isEnabledFor</span>(loglevel)) &#123;</span><br><span class="line">        forcedLog(loglevel, message, file, line, function ? function : <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LoggerImpl::forcedLog：获取 InternalLoggingEvent</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">LoggerImpl::forcedLog</span><span class="params">(LogLevel loglevel,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="type">const</span> log4cplus::tstring&amp; message,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="type">const</span> <span class="type">char</span>* file,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="type">int</span> line,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="type">const</span> <span class="type">char</span>* function)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    spi::InternalLoggingEvent &amp; ev = internal::<span class="built_in">get_ptd</span> ()-&gt;forced_log_ev;</span><br><span class="line">    <span class="built_in">assert</span> (function);</span><br><span class="line">    ev.<span class="built_in">setLoggingEvent</span> (<span class="keyword">this</span>-&gt;<span class="built_in">getName</span>(), loglevel, message, file, line,</span><br><span class="line">        function);</span><br><span class="line">    <span class="built_in">callAppenders</span>(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LoggerImpl::callAppenders：遍历父子附加器</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">LoggerImpl::callAppenders</span><span class="params">(<span class="type">const</span> InternalLoggingEvent&amp; event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> writes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">const</span> LoggerImpl* c = <span class="keyword">this</span>; c != <span class="literal">nullptr</span>; c=c-&gt;parent.<span class="built_in">get</span>()) &#123;</span><br><span class="line">        writes += c-&gt;<span class="built_in">appendLoopOnAppenders</span>(event);</span><br><span class="line">        <span class="keyword">if</span>(!c-&gt;additive) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No appenders in hierarchy, warn user only once.</span></span><br><span class="line">    <span class="keyword">if</span>(!hierarchy.emittedNoAppenderWarning &amp;&amp; writes == <span class="number">0</span>) &#123;</span><br><span class="line">        helpers::<span class="built_in">getLogLog</span>().<span class="built_in">error</span>(</span><br><span class="line">            <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;No appenders could be found for logger (&quot;</span>)</span><br><span class="line">            + <span class="built_in">getName</span>()</span><br><span class="line">            + <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;).&quot;</span>));</span><br><span class="line">        helpers::<span class="built_in">getLogLog</span>().<span class="built_in">error</span>(</span><br><span class="line">            <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;Please initialize the log4cplus system properly.&quot;</span>));</span><br><span class="line">        hierarchy.emittedNoAppenderWarning = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AppenderAttachableImpl::appendLoopOnAppenders：遍历附加器列表</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">AppenderAttachableImpl::appendLoopOnAppenders</span><span class="params">(<span class="type">const</span> spi::InternalLoggingEvent&amp; event)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function">thread::MutexGuard <span class="title">guard</span> <span class="params">(appender_list_mutex)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; appender : appenderList)</span><br><span class="line">    &#123;</span><br><span class="line">        ++count;</span><br><span class="line">        appender-&gt;<span class="built_in">doAppend</span>(event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Appender::doAppend：同步异步</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">Appender::doAppend</span><span class="params">(<span class="type">const</span> log4cplus::spi::InternalLoggingEvent&amp; event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ! defined (LOG4CPLUS_SINGLE_THREADED)</span></span><br><span class="line">    <span class="keyword">if</span> (async)</span><br><span class="line">    &#123;</span><br><span class="line">        event.<span class="built_in">gatherThreadSpecificData</span> ();</span><br><span class="line">        std::<span class="built_in">atomic_fetch_add_explicit</span> (&amp;in_flight, std::<span class="built_in">size_t</span> (<span class="number">1</span>),</span><br><span class="line">            std::memory_order_relaxed);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">enqueueAsyncDoAppend</span> (<span class="built_in">SharedAppenderPtr</span> (<span class="keyword">this</span>), event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">catch</span> (...)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">subtract_in_flight</span> ();</span><br><span class="line">            <span class="keyword">throw</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="built_in">syncDoAppend</span> (event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Appender::syncDoAppend：检查阈值、过滤器、锁</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">Appender::syncDoAppend</span><span class="params">(<span class="type">const</span> log4cplus::spi::InternalLoggingEvent&amp; event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread::MutexGuard <span class="title">guard</span> <span class="params">(access_mutex)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(closed) &#123;</span><br><span class="line">        helpers::<span class="built_in">getLogLog</span>().<span class="built_in">error</span>(</span><br><span class="line">            <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;Attempted to append to closed appender named [&quot;</span>)</span><br><span class="line">            + name</span><br><span class="line">            + <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;].&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Check appender&#x27;s threshold logging level.</span></span><br><span class="line">    <span class="keyword">if</span> (! <span class="built_in">isAsSevereAsThreshold</span>(event.<span class="built_in">getLogLevel</span>()))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// Evaluate filters attached to this appender.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">checkFilter</span>(filter.<span class="built_in">get</span>(), event) == spi::DENY)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// Lock system wide lock.</span></span><br><span class="line">    helpers::LockFileGuard lfguard;</span><br><span class="line">    <span class="keyword">if</span> (useLockFile &amp;&amp; lockFile.<span class="built_in">get</span> ())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            lfguard.<span class="built_in">attach_and_lock</span> (*lockFile);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">catch</span> (std::runtime_error <span class="type">const</span> &amp;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Finally append given event.</span></span><br><span class="line">    <span class="built_in">append</span>(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FileAppenderBase::append：文件打开、锁定（进程同步）、格式化附加、刷新</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">FileAppenderBase::append</span><span class="params">(<span class="type">const</span> spi::InternalLoggingEvent&amp; event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!out.<span class="built_in">good</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">reopen</span>()) &#123;</span><br><span class="line">            <span class="built_in">getErrorHandler</span>()-&gt;<span class="built_in">error</span>(  <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;file is not open: &quot;</span>)</span><br><span class="line">                                     + filename);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Resets the error handler to make it</span></span><br><span class="line">        <span class="comment">// ready to handle a future append error.</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">getErrorHandler</span>()-&gt;<span class="built_in">reset</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (useLockFile)</span><br><span class="line">        out.<span class="built_in">seekp</span> (<span class="number">0</span>, std::ios_base::end);</span><br><span class="line"></span><br><span class="line">    layout-&gt;formatAndAppend(out, event);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(immediateFlush || useLockFile)</span><br><span class="line">        out.<span class="built_in">flush</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SimpleLayout::formatAndAppend：附加</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">SimpleLayout::formatAndAppend</span><span class="params">(log4cplus::tostream&amp; output,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="type">const</span> log4cplus::spi::InternalLoggingEvent&amp; event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    output &lt;&lt; llmCache.<span class="built_in">toString</span>(event.<span class="built_in">getLogLevel</span>())</span><br><span class="line">           &lt;&lt; <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot; - &quot;</span>)</span><br><span class="line">           &lt;&lt; event.<span class="built_in">getMessage</span>()</span><br><span class="line">           &lt;&lt; <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h2><h3 id="默认编译"><a href="#默认编译" class="headerlink" title="默认编译"></a>默认编译</h3><p>编译成动态库，带有很多例子项目</p>
<h3 id="去除例子（只编译库）"><a href="#去除例子（只编译库）" class="headerlink" title="去除例子（只编译库）"></a>去除例子（只编译库）</h3><h4 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h4><p><a href="https://github.com/huihut/log4cplus/commit/5d7e51ac6a43e1eaa623e5d2272651458edf85c6">https://github.com/huihut/log4cplus/commit/5d7e51ac6a43e1eaa623e5d2272651458edf85c6</a></p>
<h4 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h4><p>.&#x2F;CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">option</span>(LOG4CPLUS_BUILD_TESTING <span class="string">&quot;Build the test suite.&quot;</span> <span class="keyword">OFF</span>)</span><br><span class="line"><span class="keyword">option</span>(LOG4CPLUS_BUILD_LOGGINGSERVER <span class="string">&quot;Build the logging server.&quot;</span> <span class="keyword">OFF</span>)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">option</span>(WITH_UNIT_TESTS <span class="string">&quot;Enable unit tests&quot;</span> <span class="keyword">OFF</span>)</span><br></pre></td></tr></table></figure>

<h3 id="编译成静态库"><a href="#编译成静态库" class="headerlink" title="编译成静态库"></a>编译成静态库</h3><h4 id="修改记录-1"><a href="#修改记录-1" class="headerlink" title="修改记录"></a>修改记录</h4><p><a href="https://github.com/huihut/log4cplus/commit/4e02f06a5549afca1183801a1424eee221a36bb5">https://github.com/huihut/log4cplus/commit/4e02f06a5549afca1183801a1424eee221a36bb5</a></p>
<h4 id="修改内容-1"><a href="#修改内容-1" class="headerlink" title="修改内容"></a>修改内容</h4><p>.&#x2F;src&#x2F;CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_compile_definitions</span> (LOG4CPLUS_STATIC)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">add_library</span> (<span class="variable">$&#123;log4cplus&#125;</span> STATIC <span class="variable">$&#123;log4cplus_sources&#125;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="将日志输出到控制台"><a href="#将日志输出到控制台" class="headerlink" title="将日志输出到控制台"></a>将日志输出到控制台</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cplus/log4cplus.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//用Initializer类进行初始化</span></span><br><span class="line">    log4cplus::Initializer initializer;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//第1步：创建ConsoleAppender</span></span><br><span class="line">    <span class="function">log4cplus::SharedAppenderPtr <span class="title">appender</span><span class="params">(<span class="keyword">new</span> log4cplus::ConsoleAppender())</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//第2步：设置Appender的名称和输出格式（SimpleLayout）</span></span><br><span class="line">    appender-&gt;<span class="built_in">setName</span>(<span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;console&quot;</span>));</span><br><span class="line">    appender-&gt;<span class="built_in">setLayout</span>(std::<span class="built_in">unique_ptr</span>&lt;log4cplus::Layout&gt;(<span class="keyword">new</span> log4cplus::SimpleLayout));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//第3步：获得一个Logger实例，并设置其日志输出等级阈值</span></span><br><span class="line">    log4cplus::Logger logger = log4cplus::Logger::<span class="built_in">getInstance</span>(<span class="built_in">LOG4CPLUS_TEXT</span> (<span class="string">&quot;test&quot;</span>));</span><br><span class="line">    logger.<span class="built_in">setLogLevel</span>(log4cplus::INFO_LOG_LEVEL);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//第4步：为Logger实例添加ConsoleAppender</span></span><br><span class="line">    logger.<span class="built_in">addAppender</span>(appender);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//第5步：使用宏将日志输出</span></span><br><span class="line">    <span class="built_in">LOG4CPLUS_INFO</span>(logger, <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;Hello world&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="将日志输出到控制台并写入文件"><a href="#将日志输出到控制台并写入文件" class="headerlink" title="将日志输出到控制台并写入文件"></a>将日志输出到控制台并写入文件</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cplus/log4cplus.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//用Initializer类进行初始化</span></span><br><span class="line">    log4cplus::Initializer initializer;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//第1步：创建ConsoleAppender和FileAppender(参数app表示内容追加到文件)</span></span><br><span class="line">    <span class="function">log4cplus::SharedAppenderPtr <span class="title">consoleAppender</span><span class="params">(<span class="keyword">new</span> log4cplus::ConsoleAppender)</span></span>;</span><br><span class="line">    <span class="function">log4cplus::SharedAppenderPtr <span class="title">fileAppender</span><span class="params">(<span class="keyword">new</span> log4cplus::FileAppender(</span></span></span><br><span class="line"><span class="params"><span class="function">                                                  LOG4CPLUS_TEXT(<span class="string">&quot;log.txt&quot;</span>),</span></span></span><br><span class="line"><span class="params"><span class="function">                                                  std::ios_base::app))</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//第2步：设置Appender的名称和输出格式</span></span><br><span class="line">    <span class="comment">//ConsoleAppender使用SimpleLayout</span></span><br><span class="line">    <span class="comment">//FileAppender使用PatternLayout</span></span><br><span class="line">    consoleAppender-&gt;<span class="built_in">setName</span>(<span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;console&quot;</span>));</span><br><span class="line">    consoleAppender-&gt;<span class="built_in">setLayout</span>(std::<span class="built_in">unique_ptr</span>&lt;log4cplus::Layout&gt;(<span class="keyword">new</span> log4cplus::<span class="built_in">SimpleLayout</span>()));</span><br><span class="line">    </span><br><span class="line">    fileAppender-&gt;<span class="built_in">setName</span>(<span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;file&quot;</span>));</span><br><span class="line">    log4cplus::tstring pattern = <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;%D&#123;%m/%d/%y %H:%M:%S,%Q&#125; [%t] %-5p %c - %m [%l]%n&quot;</span>);</span><br><span class="line">    fileAppender-&gt;<span class="built_in">setLayout</span>(std::<span class="built_in">unique_ptr</span>&lt;log4cplus::Layout&gt;(<span class="keyword">new</span> log4cplus::<span class="built_in">PatternLayout</span>(pattern)));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//第3步：获得一个Logger实例，并设置其日志输出等级阈值</span></span><br><span class="line">    log4cplus::Logger logger = log4cplus::Logger::<span class="built_in">getInstance</span>(<span class="built_in">LOG4CPLUS_TEXT</span> (<span class="string">&quot;test&quot;</span>));</span><br><span class="line">    logger.<span class="built_in">setLogLevel</span>(log4cplus::INFO_LOG_LEVEL);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//第4步：为Logger实例添加ConsoleAppender和FileAppender</span></span><br><span class="line">    logger.<span class="built_in">addAppender</span>(consoleAppender);</span><br><span class="line">    logger.<span class="built_in">addAppender</span>(fileAppender);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//第5步：使用宏将日志输出</span></span><br><span class="line">    <span class="built_in">LOG4CPLUS_INFO</span>(logger, <span class="built_in">LOG4CPLUS_TEXT</span>(<span class="string">&quot;Hello world&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="log4cplusplus"><a href="#log4cplusplus" class="headerlink" title="log4cplusplus"></a>log4cplusplus</h1><p><a href="https://github.com/huihut/log4cplusplus">https://github.com/huihut/log4cplusplus</a></p>
<h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>log4cplusplus 是 log4cplus 的包装库</p>
<ul>
<li>线程安全</li>
<li>支持异步</li>
<li>支持中文路径和内容</li>
<li>支持输出到文件、控制台、调试器</li>
<li>支持格式化打印</li>
</ul>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Log4CPlusPlusLevel</span></span><br><span class="line">&#123;</span><br><span class="line">	LogDebugLevel = <span class="number">10000</span>,</span><br><span class="line">	LogInfoLevel = <span class="number">20000</span>,</span><br><span class="line">	LogWarnLevel = <span class="number">30000</span>,</span><br><span class="line">	LogErrorLevel = <span class="number">40000</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Log4CPlusPlus</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Log4CPlusPlus</span>() &#123;&#125;</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">Log4CPlusPlus</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Release</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">AddFileAppender</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="type">const</span> <span class="type">wchar_t</span> *file_path = DEFALT_LOG_FILE_PATH,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="type">const</span> <span class="type">wchar_t</span> *file_name = DEFALT_LOG_FILE_NAME,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="type">unsigned</span> <span class="type">long</span> max_file_size = DEFALT_MAX_FILE_SIZE,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="type">unsigned</span> <span class="type">long</span> max_file_count = DEFALT_MAX_FILE_COUNT,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="type">bool</span> is_async = DEFALT_IS_ASYNC</span></span></span><br><span class="line"><span class="params"><span class="function">	)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">EnableDebuggerAppender</span><span class="params">(<span class="type">bool</span> enable)</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">EnableConsoleAppender</span><span class="params">(<span class="type">bool</span> enable)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">const</span> <span class="type">wchar_t</span> * <span class="title">GetLogPath</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">WriteLog</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		Log4CPlusPlusLevel logLevel,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="type">const</span> <span class="type">char</span>* file,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="type">int</span> line,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="type">const</span> <span class="type">char</span>* function,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="type">const</span> <span class="type">wchar_t</span> *format, ...)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;log4cplusplus.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	log4cplus::Log4CPlusPlus* log = <span class="built_in">CreateLog4CPlusPlus</span>();</span><br><span class="line">	<span class="keyword">if</span> (log)</span><br><span class="line">	&#123;</span><br><span class="line">		log-&gt;<span class="built_in">AddFileAppender</span>();</span><br><span class="line">		log-&gt;<span class="built_in">EnableDebuggerAppender</span>(<span class="literal">true</span>);</span><br><span class="line">		log-&gt;<span class="built_in">EnableConsoleAppender</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">LOG4CPLUSPLUS_DEBUG</span>(log, <span class="string">L&quot;log test&quot;</span>);</span><br><span class="line">		<span class="built_in">LOG4CPLUSPLUS_INFO</span>(log, <span class="string">L&quot;log test %s&quot;</span>, <span class="string">L&quot;info&quot;</span>);</span><br><span class="line">		<span class="built_in">LOG4CPLUSPLUS_WARN</span>(log, <span class="string">L&quot;log test %s %d&quot;</span>, <span class="string">L&quot;warn&quot;</span>, <span class="number">123</span>);</span><br><span class="line">		<span class="built_in">LOG4CPLUSPLUS_ERROR</span>(log, <span class="string">L&quot;log test %f&quot;</span>, <span class="number">3.14</span>);</span><br><span class="line">		<span class="built_in">LOG4CPLUSPLUS_ERROR</span>(log, <span class="string">L&quot;中文日志测试!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">		log-&gt;<span class="built_in">Release</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>一个基于 C# 的简单的线程安全日志模块</title>
    <url>/2019/07/28/LogConsumer/</url>
    <content><![CDATA[<p>一个基于 C# 的简单的线程安全日志模块，它使用生产者 - 消费者模式，可以在 .NET Framework 和 .Net Core 中使用。</p>
<p>Github 地址：<a href="https://github.com/huihut/LogConsumer">LogConsumer</a></p>
<span id="more"></span>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>将 <a href="https://github.com/huihut/LogConsumer/blob/master/LogConsumer/LogConsumer.cs">LogConsumer.cs</a> 添加到你的项目中</li>
<li>将 <code>LogConsumer.cs</code> 中的 <code>logFileName</code> 修改为你的路径文件名</li>
<li>在需要输出日志的地方使用它 <figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">HuiHut.LogConsumer.LogConsumer.Instance.Write(<span class="string">&quot;your log content&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h2><ul>
<li>命令行  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dotnet build</span><br><span class="line">dotnet .\LogConsumer\bin\Debug\netcoreapp2.1\LogConsumer.dll</span><br></pre></td></tr></table></figure></li>
<li>Visual Studio  <ol>
<li>打开 <code>LogConsumer.sln</code></li>
<li>生成解决方案，运行测试</li>
</ol>
</li>
</ul>
<h2 id="测试的日志文件示例"><a href="#测试的日志文件示例" class="headerlink" title="测试的日志文件示例"></a>测试的日志文件示例</h2><p>10 个线程，每个线程抛出  10 条日志的测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Data       Time      Namespace          Class           Method    LogContent</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 5 ] index = 0</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 2 ] index = 0</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 7 ] index = 0</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 4 ] index = 0</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 3 ] index = 0</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 6 ] index = 0</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 0 ] index = 0</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 1 ] index = 0</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 9 ] index = 0</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 8 ] index = 0</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 2 ] index = 1</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 7 ] index = 1</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 5 ] index = 1</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 5 ] index = 2</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 3 ] index = 1</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 6 ] index = 1</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 0 ] index = 1</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 1 ] index = 1</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 2 ] index = 2</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 9 ] index = 1</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 5 ] index = 3</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 3 ] index = 2</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 6 ] index = 2</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 7 ] index = 2</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 8 ] index = 1</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 4 ] index = 1</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 0 ] index = 2</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 1 ] index = 2</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 2 ] index = 3</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 9 ] index = 2</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 5 ] index = 4</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 3 ] index = 3</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 6 ] index = 3</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 7 ] index = 3</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 8 ] index = 2</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 4 ] index = 2</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 0 ] index = 3</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 1 ] index = 3</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 2 ] index = 4</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 9 ] index = 3</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 5 ] index = 5</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 3 ] index = 4</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 6 ] index = 4</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 7 ] index = 4</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 8 ] index = 3</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 4 ] index = 3</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 0 ] index = 4</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 1 ] index = 4</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 2 ] index = 5</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 9 ] index = 4</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 5 ] index = 6</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 3 ] index = 5</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 6 ] index = 5</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 7 ] index = 5</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 8 ] index = 4</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 4 ] index = 4</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 0 ] index = 5</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 1 ] index = 5</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 2 ] index = 6</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 9 ] index = 5</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 5 ] index = 7</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 3 ] index = 6</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 6 ] index = 6</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 7 ] index = 6</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 8 ] index = 5</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 4 ] index = 5</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 0 ] index = 6</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 1 ] index = 6</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 2 ] index = 7</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 9 ] index = 6</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 5 ] index = 8</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 3 ] index = 7</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 6 ] index = 7</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 7 ] index = 7</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 8 ] index = 6</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 4 ] index = 6</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 0 ] index = 7</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 1 ] index = 7</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 2 ] index = 8</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 9 ] index = 7</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 5 ] index = 9</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 3 ] index = 8</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 6 ] index = 8</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 7 ] index = 8</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 8 ] index = 7</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 4 ] index = 7</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 0 ] index = 8</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 1 ] index = 8</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 2 ] index = 9</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 9 ] index = 8</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 5 ] Thread is finished.</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 3 ] index = 9</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 6 ] index = 9</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 7 ] index = 9</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 8 ] index = 8</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 4 ] index = 8</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 0 ] index = 9</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 1 ] index = 9</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 2 ] Thread is finished.</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 9 ] index = 9</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 3 ] Thread is finished.</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 6 ] Thread is finished.</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 7 ] Thread is finished.</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 8 ] index = 9</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 4 ] index = 9</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 0 ] Thread is finished.</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 1 ] Thread is finished.</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 9 ] Thread is finished.</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 8 ] Thread is finished.</span><br><span class="line">2019-05-10 01:50:09  HuiHut.LogConsumer:LogConsumerTest.WriteLog  [ 4 ] Thread is finished.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Dotnet</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下QT编译输出路径错误：ld unknown option ...</title>
    <url>/2017/03/26/MacQTCompilerOutputPathError/</url>
    <content><![CDATA[<h2 id="ERROR-ld-unknown-option-rpath"><a href="#ERROR-ld-unknown-option-rpath" class="headerlink" title="ERROR: ld unknown option rpath"></a>ERROR: ld unknown option rpath</h2><p>Mac指定qmake的生成路径时，用 <code>-Wl,-rpath,$$PWD/..</code> 而不是 <code>-Wl,-rpath=$$PWD/..</code> 如下：</p>
<pre><code>macx&#123;
# linux only

# 编译时候指定libs查找位置
QMAKE_LFLAGS_RELEASE += -Wl,-rpath,$$PWD/../../Release/libs -Wl
QMAKE_LFLAGS_DEBUG += -Wl,-rpath,$$PWD/../../Release/libs -Wl

# 指定生成路径
DESTDIR = $$PWD/../../Release
&#125;
</code></pre>
<p>Linux则用 <code>-Wl,-rpath=$$PWD/..</code></p>
<pre><code>unix:!macx&#123;
# linux only

# 编译时候指定libs查找位置
QMAKE_LFLAGS_RELEASE += -Wl,-rpath=$$PWD/../../Release/libs -Wl,-Bsymbolic
QMAKE_LFLAGS_DEBUG += -Wl,-rpath=$$PWD/../../Release/libs -Wl,-Bsymbolic

# 指定生成路径
DESTDIR = $$PWD/../../Release/libs

&#125;
</code></pre>
<span id="more"></span>

<h2 id="ERROR-ld-unknown-option-Bsymbolic"><a href="#ERROR-ld-unknown-option-Bsymbolic" class="headerlink" title="ERROR: ld unknown option Bsymbolic"></a>ERROR: ld unknown option Bsymbolic</h2><p>Mac 不支持<code>-Bsymbolic</code>，所以不能这样：</p>
<pre><code>QMAKE_LFLAGS_RELEASE += -Wl,-rpath,$$PWD/../../Release/libs -Wl,-Bsymbolic
</code></pre>
<p>应该删去<code>-Bsymbolic</code>，如下：</p>
<pre><code>QMAKE_LFLAGS_RELEASE += -Wl,-rpath,$$PWD/../../Release/libs -Wl
</code></pre>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>链接装载库</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile 问题及解决</title>
    <url>/2017/03/13/MakefileIssue/</url>
    <content><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>makefile文件的clean出错</p>
<span id="more"></span>


<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MakefileError_Clean1.png"></p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p><code>clean</code>下面的那句命令没有缩进，应该用<code>[Tab]</code>缩进</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MakefileError_Clean3.png"></p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MakefileError_Clean4.png"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>利用 <a href="https://www.google.com/">Google</a>、<a href="http://stackoverflow.com/">stackoverflow</a> 等含金量高的问题解决平台</li>
<li>注意语法规范</li>
</ul>
<hr>
<h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MakefileError_Clean2.png"></p>
<h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><p><code>newhello:hello.o hello_fn.o</code> 中的<code>newhello</code>应该写成<code>hello</code>，应该与<code>hello.c</code>中的名字一样</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MakefileError_Clean3.png"></p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MakefileError_helloc2.png"></p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul>
<li>注意编译运行的文件名</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 简易入门教程</title>
    <url>/2017/01/25/MarkdownTutorial/</url>
    <content><![CDATA[<p>自己整理的 Markdown 简介、编辑器推荐、语法、特征等，是 Markdown 的简易入门教程</p>
<span id="more"></span>


<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><p><a href="#overview">概述</a></p>
<ul>
<li>   <a href="#summary">简介</a></li>
<li>   <a href="#doc">官方文档</a></li>
<li>   <a href="#editor">Markdown编辑器</a></li>
</ul>
</li>
<li><p><a href="#primary">初级语法</a></p>
<ul>
<li><a href="#MarkdownHeader">标题</a></li>
<li>   <a href="#bolditalic">粗体和斜体</a></li>
<li><a href="#paragraph">段落和换行</a></li>
<li><a href="#hr">分隔线</a></li>
<li><a href="#blockquote">引言</a></li>
<li>   <a href="#list">列表</a><ul>
<li><a href="#disorderlist">无序列表</a></li>
<li><a href="#sorderlist">有序列表</a></li>
</ul>
</li>
<li><a href="#code">代码</a><ul>
<li>   <a href="#linecode">行内代码块</a></li>
<li>   <a href="#paragraphcode">段落代码块</a></li>
</ul>
</li>
<li><a href="#link">链接</a><ul>
<li>   <a href="#urllink">网址链接</a></li>
<li>   <a href="#picturelink">图片链接</a><ul>
<li>   <a href="#picturelinksize">指定图片宽高</a></li>
<li>   <a href="#picturelinkchain">用图床获取外链</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><a href="#Advanced">进阶语法</a></p>
<ul>
<li>   <a href="#label">标签</a></li>
<li>   <a href="#content">目录</a></li>
<li><a href="#table">表格</a></li>
<li>   <a href="#footnote">脚注</a></li>
<li>   <a href="#formula">公式</a></li>
<li>   <a href="#flowsheet">流程图</a></li>
<li>   <a href="#sequencemap">序列图</a></li>
</ul>
</li>
<li><p><a href="#others">其他</a></p>
<ul>
<li><a href="#html">兼容HTML</a></li>
<li><a href="#autoescape">特殊字符自动转换</a></li>
<li><a href="#backslash">反斜杠</a></li>
<li><a href="#autolink">自动链接</a></li>
</ul>
</li>
<li><p><a href="#reference">感谢</a></p>
</li>
</ul>
<hr>
<h2 id="overview">概述</h2>

<h3 id="summary">简介</h3>

<p>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia等网站，如各大博客平台：WordPress、Drupal、简书等。</p>
<h3 id="doc">官方文档</h3>


<blockquote>
<p><a href="http://daringfireball.net/projects/markdown/syntax">Markdown: Syntax</a></p>
<p><a href="http://wowubuntu.com/markdown/">Markdown 语法说明 (简体中文版)</a></p>
</blockquote>
<h3 id="editor">Markdown编辑器</h3>

<ul>
<li><p>在线编辑器</p>
<ul>
<li><p><a href="http://dillinger.io/">dillinger</a>——漂亮强大，支持md, html, pdf 文件导出。  </p>
<p>  <img src="http://www.williamlong.info/upload/4319_1.jpg" alt="dillinger"></p>
</li>
<li><p><a href="http://www.jianshu.com/">简书</a>——非常漂亮的博客平台，可以自动备份，直接拖入图片。  </p>
<p>  <img src="http://www.williamlong.info/upload/4319_3.jpg" alt="简书"></p>
</li>
</ul>
</li>
<li><p>Windows</p>
<ul>
<li><p><a href="http://www.markdownpad.com/">MarkdownPad</a>——一款全功能的编辑器，被很多人称赞为windows 平台最好用的markdown编辑器。  </p>
<p>  <img src="http://www.williamlong.info/upload/4319_10.jpg" alt="MarkdownPad"></p>
</li>
<li><p><a href="http://code52.org/DownmarkerWPF/">MarkPad</a>——开源软件，可以直接在你的博客或者 GitHub 中打开、保存文档，直接将图片粘贴到 Markdown 文档中。  </p>
<p>  <img src="http://code52.org/DownmarkerWPF/screenshot.png" alt="MarkPad"></p>
</li>
<li><p><a href="https://www.zybuluo.com/cmd/">Cmd Markdown</a>——作业部落出品，全平台并支持Web端  	</p>
<p>  <img src="http://www.williamlong.info/upload/4319_6.jpg" alt="Cmd Markdown"></p>
</li>
</ul>
</li>
<li><p>Mac</p>
<ul>
<li><p><a href="http://25.io/mou/">Mou</a>——简洁优雅，免费又好用，中文兼容性好。  </p>
<p>  <img src="http://www.williamlong.info/upload/4319_14.jpg" alt="Mou"></p>
</li>
<li><p><a href="https://typora.io/">Typora</a>——极致简洁，自定义皮肤。</p>
<p>  <img src="http://www.williamlong.info/upload/4319_15.jpg" alt="Typora"></p>
</li>
<li><p><a href="https://macdown.uranusjr.com/">MacDown</a>——简洁优雅，开源免费。</p>
<p>  <img src="http://www.williamlong.info/upload/4319_16.jpg" alt="MacDown"></p>
</li>
<li><p><a href="https://www.ulyssesapp.com/">Ulysses</a>——文字写作推荐。  </p>
<p>  <img src="http://www.williamlong.info/upload/4319_19.jpg" alt="Ulysses"></p>
</li>
</ul>
</li>
<li><p>多平台</p>
<ul>
<li><p><a href="https://atom.io/">Atom</a>——github出的编辑器，支持各种编程语言，可装Markdown插件。</p>
<p>  <img src="http://www.williamlong.info/upload/4319_9.jpg"></p>
</li>
<li><p><a href="http://www.sublimetext.com/">sublimetext</a>——专业编辑器，支持各种编程语言。</p>
<p>  <img src="http://www.williamlong.info/upload/4319_8.jpg"></p>
</li>
</ul>
</li>
</ul>
<h2 id="primary">初级语法</h2>


<h3 id="MarkdownHeader">标题</h3>


<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/header.jpg" alt="标题"></p>
<p>Markdown 支持两种标题的语法，类 Atx 和类 Setext 形式。</p>
<ul>
<li><p>Atx（注意<code>#</code>后面有个空格）</p>
<pre><code>  # 一级标题
  ## 二级标题
  ### 三级标题
</code></pre>
</li>
<li><p>Setext（<code>-</code>与<code>=</code>数目任意，最好三个及以上，比较直观）</p>
<pre><code>  一级标题
  ======

  二级标题
  ------
</code></pre>
</li>
</ul>
<h3 id="bolditalic">粗体和斜体</h3>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/bolditalic.jpg" alt="bolditalic"></p>
<ul>
<li><p>粗体</p>
<pre><code>  **这是粗体**

  __这是粗体__
</code></pre>
</li>
<li><p>斜体</p>
<pre><code>  *这是斜体*

  _这是斜体_
</code></pre>
</li>
</ul>
<h3 id="paragraph">段落和换行</h3>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/paragraph.jpg" alt="paragraph"></p>
<ul>
<li><p>第一种写法（上图的<code>这是第一段</code>），直接敲两个回车键即可</p>
<pre><code>  这是第一段
  
  这是第二段
</code></pre>
</li>
<li><p>第二种写法（上图的<code>这是第二段</code>），在写完一段后敲两个空格，然后回车写下一段</p>
<pre><code>  这是第二段  
  这是第三段
</code></pre>
</li>
<li><p>第三种写法（上图的<code>这是第三段</code>），在写完一段后用HTML的语法：<code>&lt;br /&gt;</code>作为换行，然后写下一段</p>
<pre><code>  这是第三段&lt;br /&gt;这是第四段
  
  这是第三段&lt;br /&gt;
  这是第四段
</code></pre>
</li>
</ul>
<h3 id="hr">分隔线</h3>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/hr.jpg" alt="hr"></p>
<p>可以在一行中用三个及以上的星号、减号、等于号、底线来建立分隔线，行内不能有除空格外的其他东西，注意莫被打脸。 (≖ ‿ ≖)✧</p>
<pre><code>***
---
===
___
</code></pre>
<h3 id="blockquote">引言</h3>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/blockquote.jpg" alt="blockquote"></p>
<pre><code>&gt; 我想只用一个 “&gt;” 号来写一个多行的引用，所以在扯鸡巴蛋地码字占空间，好像差不多了吧，嗯嗯~

---

&gt; 还有一种写法就是每一行都用一个 “&gt;” 号
&gt; 这样写比较美观一点

---

&gt; &gt; 另外一种就是嵌套引用，就像我一样，用两个“&gt;”
</code></pre>
<h3 id="list">列表</h3>

<h4 id="disorderlist">无序列表</h4>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/disorderlist.jpg" alt="disorderlist"></p>
<p>无序列表可以在每行开头用星号、加号、减号来表示，也可以三者混合一起，推荐使用相同的字符，避免混乱。</p>
<pre><code>* 一朵百合花
* 两朵百合花
* 三朵百合花
</code></pre>
<h4 id="sorderlist">有序列表</h4>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/orderlist.jpg" alt="orderlist"></p>
<p>有序列表用数字接着一个英文句点来表示，数字可无序，但还是推荐使用<code>1. </code>、<code>2. </code>，避免混乱。</p>
<pre><code>1. 一朵百合花
2. 两朵百合花
3. 三朵百合花
</code></pre>
<h3 id="code">代码</h3>

<h4 id="linecode">行内代码块</h4>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/linecode.jpg" alt="linecode"></p>
<pre><code>I am a `code`
I am a `` ` ``
</code></pre>
<h4 id="paragraphcode">段落代码块</h4>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/paragraphcode.jpg" alt="paragraphcode"></p>
<pre><code>#### 第一种

    int main()
    &#123;
        printf(&quot;我是个段落代码块&quot;);
        return 0;
    &#125;
</code></pre>
<p>另外，可以用三个反引号和语言名，作为标记代码所使用的语言</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/paragraphcode2.jpg" alt="paragraphcode2"></p>
<p>我的 Mou 编辑器不能识别 (ノ▼Д▼)ノ</p>
<h3 id="link">链接</h3>

<h4 id="urllink">网址链接</h4>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/urllink.jpg" alt="urllink">  </p>
<p>网址链接有两种形式：<strong>行内式</strong>、<strong>参考式</strong>。</p>
<p>不管是哪一种，链接文字都是用 [方括号] 来标记，双引号<code>&quot;&quot;</code>的<code>title</code>可写可不写。</p>
<ul>
<li><p>行内式</p>
<pre><code>  [huihut](https://huihut.github.io/)
  
  [huihut](https://huihut.github.io/ &quot;huihut&quot;)
  
  [huihut](https://huihut.github.io/ &#39;huihut&#39;)
</code></pre>
</li>
<li><p>参考式</p>
<ul>
<li><p>一般写法</p>
<pre><code>  [huihut][1]
  [1]: https://huihut.github.io/
</code></pre>
</li>
</ul>
</li>
<li><p>隐式链接标记——可省略id，只需要[text]与下面[方括号]内容相同即可</p>
<pre><code>      [Google][]
      [Google]: http://google.com/
</code></pre>
</li>
<li><p>拓展</p>
<ul>
<li><p>这里的链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：</p>
<pre><code>      [text][a]
      [text][A]
  
</code></pre>
</li>
<li><p>链接 title 可以用双引号、单引号、圆括号包起来，因此，下面这三种链接的定义都是相同：</p>
<pre><code>      [1]: https://huihut.github.io/  &quot;title&quot;
      [1]: https://huihut.github.io/  &#39;title&#39;
      [1]: https://huihut.github.io/  (title)
</code></pre>
</li>
</ul>
</li>
</ul>
<p><strong>特别注意</strong>：Markdown.pl 1.0.1 会忽略单引号包起来的链接 title</p>
<h4 id="picturelink">图片链接</h4>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/picturelink.jpg" alt="picturelink"> </p>
<p>图片链接与上面的网址链接类似，同样有两种形式：行内式和参考式，只不过图片链接在前面加上一个感叹号<code>!</code>，在此不做累述。</p>
<ul>
<li><p>行内式</p>
<pre><code>  ![huihut](http://huihut-img.oss-cn-shenzhen.aliyuncs.com/H_ya.png)
</code></pre>
</li>
<li><p>参考式</p>
<pre><code>  ![谷歌][1]
  [1]: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_120x44dp.png &quot;Google&quot;
</code></pre>
</li>
</ul>
<h5 id="picturelinksize">指定图片宽高</h5>

<ul>
<li><p>Markdown 一般不支持指定图片的宽高，若要指定宽高可以使用普通的 <code>&lt;img&gt;</code> 标签</p>
<pre><code>  &lt;img src=&quot;./xxx.png&quot; width = &quot;100&quot; height = &quot;100&quot; alt=&quot;title&quot; align=center /&gt;
   
</code></pre>
<p>  如果需要居中可以在外围包围<code>div</code>标签</p>
<pre><code>  &lt;div  align=&quot;center&quot;&gt;    
  &lt;img src=&quot;xxx.png&quot; width = &quot;100&quot; height = &quot;100&quot; alt=&quot;title&quot; align=center /&gt;
  &lt;/div&gt;
      
</code></pre>
</li>
<li><p>使用支持指定图片大小的 Markdown 编辑器，如 Mou</p>
<pre><code>  ![](xxx.png =100x100)
</code></pre>
</li>
</ul>
<h5 id="picturelinkchain">用图床获取外链</h5>

<p>网上有许多图床，这里推荐两个 <strong>七牛图床</strong> 和 <strong>极简图床</strong>。</p>
<ul>
<li><p><a href="https://www.qiniu.com/">七牛图床</a> </p>
  <img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/qiniutuchuang.jpg" width = "90%" height = "90%"/>
</li>
<li><p><a href="https://yotuku.cn/">极简图床</a></p>
  <img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/jijiantuchuang.jpg" width = "90%" height = "90%"/></li>
</ul>
<h2 id="Advanced">进阶语法</h2>

<h3 id="label">标签</h3>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/label.jpg" alt="label"></p>
<ul>
<li><p>方法一</p>
<pre><code>  title: Markdown 简易入门教程
  date: 2017-01-25 1:45:50
  tags: Markdown
  categories: 技术
</code></pre>
</li>
<li><p>方法三</p>
<pre><code>  tags:
  - Markdown
  - 语言
  categories:
  - 技术
</code></pre>
</li>
<li><p>方法三</p>
<pre><code>  tags: [Markdown,语言]
  categories: [技术]
</code></pre>
</li>
</ul>
<h3 id="content">目录</h3>

<ul>
<li><p>方法一</p>
<p>  <img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/content.jpg"></p>
<p>  这种目录其实是用 <strong>HTML</strong> 加 <strong>Markdown的链接</strong> 实现，分为两个部分，<strong>目录部分</strong>和<strong>标题部分</strong>。</p>
<ul>
<li><p>目录部分——实质是链接，链接的<code>[地址]</code>填需要跳转到的标题的<code>id</code>属性（自定义）。</p>
<pre><code>  [跳到标题一](#title1)
</code></pre>
</li>
<li><p>标题部分——实质是HTML的标题标签，标签里面的<code>id</code>属性等于待跳转的目录的<code>[地址]</code>。</p>
<pre><code>  &lt;h1 id=&quot;title1&quot;&gt;标题一&lt;/h1&gt;
</code></pre>
</li>
</ul>
</li>
<li><p>方法二</p>
<p>  <img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/content2.jpg" alt="content2"></p>
<p>  这种方法非常简单，就是直接添加 <code>[TOC]</code>，标题1~6样式的内容会被提取出来作为目录，然而有些编辑器不能使用这功能，如 Mou 不能使用。我是在有道云笔记的 Markdown 中截图的。</p>
<pre><code>  [TOC]
  
  # 标题一
  ……
  ## 标题二
  ……
  ### 标题三
</code></pre>
<p>  这里有个jQuery插件，貌似可以让Markdown生成目录：</p>
<p>  <a href="https://github.com/i5ting/i5ting_ztree_toc">https://github.com/i5ting/i5ting_ztree_toc</a></p>
</li>
</ul>
<h3 id="table">表格</h3>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/table.jpg" alt="table"></p>
<ul>
<li><p>表格一般这样子写，这应该是最简单的写法了</p>
<pre><code>  id    |   name   |   score
  ---   |   ---    |   ---
  001   |   Mark   |   90
  002   |   Ford   |   80
  003   |   Alan   |   95
</code></pre>
</li>
<li><p>还有就是对齐了，用<code>:</code>对齐，<code>:</code>写在在<code>---</code>的左边就是左对齐，右边就是右对齐，两边都写就是居中。</p>
<pre><code>  |long_long_id|long_long_name|long_long_score|
  |    ---     |    :---:     |     ---:      |
  |    001     |     Mark     |      90       |
  |    002     |     Ford     |      80       |
  |    003     |     Alan     |      95       |
</code></pre>
</li>
</ul>
<h3 id="footnote">脚注</h3>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/footnote.jpg" alt="footnote"></p>
<pre><code>这是脚注一[^1]

[^1]: 脚注一
</code></pre>
<h3 id="formula">公式</h3>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/formula.jpg" alt="formula"></p>
<ul>
<li><p>方法一：使用Google Chart</p>
<pre><code>  &lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=\Large x=\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;&quot; style=&quot;border:none;&quot;&gt;
</code></pre>
</li>
<li><p>方法二：使用forkosh</p>
<pre><code>  &lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=\Large x=\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;&quot; style=&quot;border:none;&quot;&gt;
</code></pre>
</li>
<li><p>方法三：使用codecogs</p>
<pre><code>  &lt;a href=&quot;https://www.codecogs.com/eqnedit.php?latex=x=\frac&#123;-b\pm&amp;space;\sqrt&#123;b^&#123;2&#125;-4ac&#125;&#125;&#123;2a&#125;&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?x=\frac&#123;-b\pm&amp;space;\sqrt&#123;b^&#123;2&#125;-4ac&#125;&#125;&#123;2a&#125;&quot; title=&quot;x=\frac&#123;-b\pm \sqrt&#123;b^&#123;2&#125;-4ac&#125;&#125;&#123;2a&#125;&quot; /&gt;&lt;/a&gt;
</code></pre>
</li>
<li><p>方法四：使用MathJax引擎——先加载脚本<code>&lt;script&gt;</code>，后解析公式。</p>
<pre><code>  &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;
  
  $$x=\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;$$
</code></pre>
</li>
</ul>
<h3 id="flowsheet">流程图</h3>

<p><img src="http://cdn2.wiz.cn/wp-content/uploads/2015/11/QQ20151123-0.png" alt="flowsheet"></p>
<p>像流程图这种复杂的功能不推荐在 Markdown 中使用，因为很多编辑器都不支持，我使用了几个编辑器都不能生成流程图，所以上图是在为知笔记官方 Markdown 新手指南中找到的。</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/flowsheetcode.jpg" alt="flowsheetcode"></p>
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">e=&gt;end: End</span><br><span class="line">op1=&gt;operation: My Operation</span><br><span class="line">sub1=&gt;subroutine: My Subroutine</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">io=&gt;inputoutput: catch something...</span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure>
</code></pre>
<p>更多关于流程图的语法说明：</p>
<p><a href="https://github.com/adrai/flowchart.js">https://github.com/adrai/flowchart.js</a></p>
<h3 id="sequencemap">序列图</h3>

<p><img src="http://cdn2.wiz.cn/wp-content/uploads/2015/11/QQ20151123-1.png" alt="sequencemap"></p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/sequencemapcode.jpg" alt="sequencemapcode"></p>
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>
</code></pre>
<p>更多关于时序图的语法说明：</p>
<p><a href="https://github.com/bramp/js-sequence-diagrams">https://github.com/bramp/js-sequence-diagrams</a></p>
<h2 id="others">其他语法</h2>

<h3 id="html">兼容HTML</h3>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/html.jpg" alt="html"></p>
<p>Markdown 可以和 HTML 混编，甚至可以完全用 HTML 语法来写。要注意在 HTML 标签中的 Markdown 代码是不起作用的。</p>
<pre><code>&lt;font color=&#39;blue&#39; style=&#39;font-size:30px&#39;&gt;蓝色&lt;/font&gt;

&lt;div&gt;
# HTML 标签里面的 Markdown 语法不起作用
**你看我没有变粗**
&lt;/div&gt;
</code></pre>
<h3 id="autoescape">特殊字符自动转换</h3>

<ul>
<li><p>HTML 语法——在 HTML 中所有<code>&lt;</code>和<code>&amp;</code>都要转换，包括链接（URL）</p>
<ul>
<li>用 <code>&amp;lt;</code> 表示 <code>&lt;</code>——起始标签</li>
<li>用 <code>&amp;amp;</code> 表示 <code>&amp;</code> ——标记 HTML 实体</li>
</ul>
</li>
<li><p>Markdown 语法——Markdown 则会自动转换</p>
</li>
</ul>
<h3 id="backslash">反斜杠</h3>

<p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号。如：</p>
<p>*literal asterisks*</p>
<p>可用</p>
<pre><code>\*literal asterisks\*
</code></pre>
<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<pre><code>\   反斜线
`   反引号
*   星号
_   底线
&#123;&#125;  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
</code></pre>
<h3 id="autolink">自动链接</h3>
    
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/autolink.jpg" alt="autolink"></p>
<ul>
<li><p>网址自动链接</p>
<pre><code>  &lt;https://huihut.github.io/&gt;
</code></pre>
</li>
<li><p>电子邮件自动链接</p>
<pre><code>  &lt;huihut@outlook.com&gt;
</code></pre>
</li>
</ul>
<h2 id="reference">感谢</h2>

<blockquote>
<p><a href="http://daringfireball.net/projects/markdown/syntax">Markdown: Syntax</a></p>
<p><a href="http://wowubuntu.com/markdown/">Markdown 语法说明 (简体中文版)</a></p>
<p><a href="http://www.jianshu.com/p/1e402922ee32/">Markdown——入门指南</a></p>
<p><a href="https://www.zybuluo.com/xxliixin1993/note/125827">Markdown语法手册</a></p>
<p><a href="http://www.williamlong.info/archives/4319.html">好用的Markdown编辑器一览</a></p>
<p><a href="https://www.zhihu.com/question/23378396">markdown中插入图片怎么定义图片的大小或比例？</a></p>
<p><a href="http://www.jianshu.com/p/0b257de21eb5">Markdown进阶语法整理</a></p>
<p><a href="http://www.wiz.cn/feature-markdown.html">为知笔记 Markdown 新手指南</a></p>
<p><a href="http://blog.csdn.net/xiahouzuoxin/article/details/26478179">Markdown中插入数学公式的方法</a></p>
<p><a href="https://github.com/i5ting/i5ting_ztree_toc">i5ting&#x2F;i5ting_ztree_toc</a></p>
<p><a href="http://flowchart.js.org/">flowchart.js</a></p>
<p><a href="https://github.com/adrai/flowchart.js">adrai&#x2F;flowchart.js</a></p>
<p><a href="https://bramp.github.io/js-sequence-diagrams/">js-sequence-diagrams</a></p>
<p><a href="https://github.com/bramp/js-sequence-diagrams">bramp&#x2F;js-sequence-diagrams</a></p>
</blockquote>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>python-dev 库缺失导致安装 matplotlib 出错</title>
    <url>/2018/10/13/MissingPython-devCausesErrorInInstallingMatplotlib/</url>
    <content><![CDATA[<h2 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pip install matplotlib</span><br></pre></td></tr></table></figure>

<p>安装 matplotlib 时出现以下错误</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Installing collected packages: subprocess32, cycler, backports.functools-lru-cache, pyparsing, kiwisolver, matplotlib</span><br><span class="line">  Running setup.py install for subprocess32 ... error</span><br><span class="line">    Complete output from command /usr/bin/python2 -u -c &quot;import setuptools, tokenize;__file__=&#x27;/tmp/pip-install-azXKeu/subprocess32/setup.py&#x27;;f=getattr(tokenize, &#x27;open&#x27;, open)(__file__);code=f.read().replace(&#x27;\r\n&#x27;, &#x27;\n&#x27;);f.close();exec(compile(code, __file__, &#x27;exec&#x27;))&quot; install --record /tmp/pip-record-5SM9_6/install-record.txt --single-version-externally-managed --compile:</span><br><span class="line">    /usr/lib64/python2.7/distutils/dist.py:267: UserWarning: Unknown distribution option: &#x27;python_requires&#x27;</span><br><span class="line">      warnings.warn(msg)</span><br><span class="line">    running install</span><br><span class="line">    running build</span><br><span class="line">    running build_py</span><br><span class="line">    creating build</span><br><span class="line">    creating build/lib.linux-x86_64-2.7</span><br><span class="line">    copying subprocess32.py -&gt; build/lib.linux-x86_64-2.7</span><br><span class="line">    running build_ext</span><br><span class="line">    running build_configure</span><br><span class="line">    checking for gcc... gcc</span><br><span class="line">    checking whether the C compiler works... yes</span><br><span class="line">    checking for C compiler default output file name... a.out</span><br><span class="line">    checking for suffix of executables...</span><br><span class="line">    checking whether we are cross compiling... no</span><br><span class="line">    checking for suffix of object files... o</span><br><span class="line">    checking whether we are using the GNU C compiler... yes</span><br><span class="line">    checking whether gcc accepts -g... yes</span><br><span class="line">    checking for gcc option to accept ISO C89... none needed</span><br><span class="line">    checking how to run the C preprocessor... gcc -E</span><br><span class="line">    checking for grep that handles long lines and -e... /bin/grep</span><br><span class="line">    checking for egrep... /bin/grep -E</span><br><span class="line">    checking for ANSI C header files... yes</span><br><span class="line">    checking for sys/types.h... yes</span><br><span class="line">    checking for sys/stat.h... yes</span><br><span class="line">    checking for stdlib.h... yes</span><br><span class="line">    checking for string.h... yes</span><br><span class="line">    checking for memory.h... yes</span><br><span class="line">    checking for strings.h... yes</span><br><span class="line">    checking for inttypes.h... yes</span><br><span class="line">    checking for stdint.h... yes</span><br><span class="line">    checking for unistd.h... yes</span><br><span class="line">    checking for unistd.h... (cached) yes</span><br><span class="line">    checking fcntl.h usability... yes</span><br><span class="line">    checking fcntl.h presence... yes</span><br><span class="line">    checking for fcntl.h... yes</span><br><span class="line">    checking signal.h usability... yes</span><br><span class="line">    checking signal.h presence... yes</span><br><span class="line">    checking for signal.h... yes</span><br><span class="line">    checking sys/cdefs.h usability... yes</span><br><span class="line">    checking sys/cdefs.h presence... yes</span><br><span class="line">    checking for sys/cdefs.h... yes</span><br><span class="line">    checking for sys/types.h... (cached) yes</span><br><span class="line">    checking for sys/stat.h... (cached) yes</span><br><span class="line">    checking sys/syscall.h usability... yes</span><br><span class="line">    checking sys/syscall.h presence... yes</span><br><span class="line">    checking for sys/syscall.h... yes</span><br><span class="line">    checking for dirent.h that defines DIR... yes</span><br><span class="line">    checking for library containing opendir... none required</span><br><span class="line">    checking for pipe2... yes</span><br><span class="line">    checking for setsid... yes</span><br><span class="line">    checking whether dirfd is declared... yes</span><br><span class="line">    configure: creating ./config.status</span><br><span class="line">    config.status: creating _posixsubprocess_config.h</span><br><span class="line">    building &#x27;_posixsubprocess32&#x27; extension</span><br><span class="line">    creating build/temp.linux-x86_64-2.7</span><br><span class="line">    gcc -pthread -fno-strict-aliasing -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -DNDEBUG -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -fPIC -I/usr/include/python2.7 -c _posixsubprocess.c -o build/temp.linux-x86_64-2.7/_posixsubprocess.o</span><br><span class="line">    _posixsubprocess.c:16:20: fatal error: Python.h: No such file or directory</span><br><span class="line">     #include &quot;Python.h&quot;</span><br><span class="line">                        ^</span><br><span class="line">    compilation terminated.</span><br><span class="line">    error: command &#x27;gcc&#x27; failed with exit status 1</span><br></pre></td></tr></table></figure>

<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>无法找到 python 库，<code>#include &quot;Python.h&quot;</code> 出错</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul>
<li><p>使用 apt (Ubuntu, Debian…) 安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-dev   # for python2.x installs</span><br><span class="line">sudo apt-get install python3-dev  # for python3.x installs</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 yum (CentOS, RHEL…) 安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install python-devel   # for python2.x installs</span><br><span class="line">sudo yum install python34-devel   # for python3.4 installs</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 dnf (Fedora…) 安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dnf install python2-devel  # for python2.x installs</span><br><span class="line">sudo dnf install python3-devel  # for python3.x installs</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 zypper (openSUSE…) 安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo zypper in python-devel   # for python2.x installs</span><br><span class="line">sudo zypper in python3-devel  # for python3.x installs</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 apk (Alpine…) 安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apk add python2-dev  # for python2.x installs</span><br><span class="line">sudo apk add python3-dev  # for python3.x installs</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>一加3T的刷机流程及玩机一些事</title>
    <url>/2017/08/27/Oneplus3TBrushAndPlay/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要聊聊一加3T卡刷第三方Rom，包括刷 TWRP 的 Recovery，卡刷流程，初始化，安装及使用Xposed框架和Magisk框架。</p>
<h2 id="选择Rom"><a href="#选择Rom" class="headerlink" title="选择Rom"></a>选择Rom</h2><p>刷机前要选择要刷的系统，即选择Rom。</p>
<p>Rom无非官方Rom或者第三方Rom。</p>
<p>官方Rom有氢OS(H2OS)、氧OS(OxygenOS)。第三方Rom就很多了，如MIUI、Flyme、CM、AICP、LineageOS等等。</p>
<p>官方Rom一般比较稳定、适配性好、能接收推送；第三方Rom一般自定义程度高、可玩性高。</p>
<p>若是不想折腾还是官方Rom好；喜欢尝鲜可以试试第三方Rom。</p>
<h3 id="官方Rom"><a href="#官方Rom" class="headerlink" title="官方Rom"></a>官方Rom</h3><p>一加官方Rom有氢OS(H2OS)和氧OS(OxygenOS)。氢OS(H2OS)主要面向国内，本土化定制；氧OS(OxygenOS)主要面向国外，预装谷歌服务。官方Rom无论线刷还是卡刷都比较简单方便，在此就不做过多介绍。</p>
<span id="more"></span>

<h4 id="氢OS-H2OS"><a href="#氢OS-H2OS" class="headerlink" title="氢OS(H2OS)"></a>氢OS(H2OS)</h4><p>下载：<a href="http://www.h2os.com/download">H2OS官方下载</a></p>
<h4 id="氧OS-OxygenOS"><a href="#氧OS-OxygenOS" class="headerlink" title="氧OS(OxygenOS)"></a>氧OS(OxygenOS)</h4><p>下载：<a href="http://downloads.oneplus.net/">OxygenOS官方下载</a></p>
<h3 id="第三方Rom"><a href="#第三方Rom" class="headerlink" title="第三方Rom"></a>第三方Rom</h3><p>本文主要聊聊一加3T卡刷第三方Rom。</p>
<p>第三方Rom在各大玩机论坛&#x2F;Rom平台都能看到，如</p>
<ul>
<li>官方论坛（推荐）</li>
<li>xda-developers（推荐）</li>
<li>机锋Rom</li>
<li>ROM之家</li>
<li>…</li>
</ul>
<p>如一加3T的</p>
<ul>
<li><a href="http://www.oneplusbbs.com/forum-116-1.html">一加社区 . 一加手机3T</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3t/development#romList">xda-developers . OnePlus 3T ROMs</a></li>
</ul>
<p>我选了个<code>OnePixel</code>，这是个基于氧OS的类Pixel版Rom，喜欢原生的朋友可以给你的爱机食用：</p>
<p><a href="https://forum.xda-developers.com/oneplus-3t/development/onepixel-oos-based-custom-rom-pixel-t3650386">[ROM][EAS][DEODEXED][OB13] OnePixel, OOS Based Custom Rom with Pixel Experience</a></p>
<p>效果图</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/OnePixel.png" alt="OnePixel"></p>
<h2 id="安装-TWRP"><a href="#安装-TWRP" class="headerlink" title="安装 TWRP"></a>安装 TWRP</h2><p>因为一加官方 Recovery 功能较弱，所以先刷个 TWRP Recovery。</p>
<h3 id="下载-TWRP"><a href="#下载-TWRP" class="headerlink" title="下载 TWRP"></a>下载 TWRP</h3><p>选择自己机型的TWRP下载</p>
<p><a href="https://twrp.me/Devices/">https://twrp.me/Devices/</a></p>
<p>如我的一加3T下载的TWRP文件为：</p>
<pre><code>twrp-3.1.1-2-oneplus3t.img
</code></pre>
<h3 id="安装-ADB"><a href="#安装-ADB" class="headerlink" title="安装 ADB"></a>安装 ADB</h3><p>安装 ADB 可以使用一些一键安装工具（如：15秒ADB安装器）或者下载官方 Android SDK 的 platform-tools</p>
<h4 id="启用USB调试"><a href="#启用USB调试" class="headerlink" title="启用USB调试"></a>启用USB调试</h4><p>不管哪种方式都需要首先将手机连上电脑，启用USB调试。</p>
<p>设置 &gt; 开发人员选项 &gt; USB调试</p>
<h4 id="使用15秒ADB安装器安装"><a href="#使用15秒ADB安装器安装" class="headerlink" title="使用15秒ADB安装器安装"></a>使用15秒ADB安装器安装</h4><p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/15secondsADBInstaller.png" alt="15 seconds ADB Installer"></p>
<p>作者发的帖子: <a href="https://forum.xda-developers.com/showthread.php?p=48915118#post48915118">[TOOL] [WINDOWS] ADB, Fastboot and Drivers - 15 seconds ADB Installer v1.4.3</a></p>
<p>国内百度云盘下载：</p>
<p>链接：<a href="http://pan.baidu.com/s/1c1FWmTM">http://pan.baidu.com/s/1c1FWmTM</a> 密码：vg0g</p>
<h4 id="使用-Android-SDK-的-platform-tools-安装"><a href="#使用-Android-SDK-的-platform-tools-安装" class="headerlink" title="使用 Android SDK 的 platform-tools 安装"></a>使用 Android SDK 的 platform-tools 安装</h4><h5 id="下载-platform-tools"><a href="#下载-platform-tools" class="headerlink" title="下载 platform-tools"></a>下载 platform-tools</h5><h6 id="Windows版"><a href="#Windows版" class="headerlink" title="Windows版"></a>Windows版</h6><ul>
<li>官方下载：<a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">https://dl.google.com/android/repository/platform-tools-latest-windows.zip</a></li>
<li>网盘下载链接：<a href="http://pan.baidu.com/s/1eRG8gXs">http://pan.baidu.com/s/1eRG8gXs</a> 密码：72ac</li>
</ul>
<h6 id="MacOS版"><a href="#MacOS版" class="headerlink" title="MacOS版"></a>MacOS版</h6><ul>
<li>官方下载：<a href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip">https://dl.google.com/android/repository/platform-tools-latest-darwin.zip</a></li>
<li>网盘下载链接：<a href="http://pan.baidu.com/s/1pLQFvrt">http://pan.baidu.com/s/1pLQFvrt</a> 密码：7qav</li>
</ul>
<h6 id="Linux版"><a href="#Linux版" class="headerlink" title="Linux版"></a>Linux版</h6><ul>
<li>官方下载：<a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip">https://dl.google.com/android/repository/platform-tools-latest-linux.zip</a></li>
<li>网盘下载链接：<a href="http://pan.baidu.com/s/1nu8mvrF">http://pan.baidu.com/s/1nu8mvrF</a> 密码：giug</li>
</ul>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>解压，进入 platform-tools 目录</p>
<p>把<code>twrp-3.1.1-2-oneplus3t.img</code>文件复制到<code>platform-tools</code>目录下，终端使用</p>
<pre><code>adb reboot bootloader
</code></pre>
<p>进入bootloader模式，输入命令</p>
<pre><code>fastboot flash recovery twrp-3.1.1-2-oneplus3t.img
</code></pre>
<p>进行安装TWRP。</p>
<h2 id="刷机（卡刷）"><a href="#刷机（卡刷）" class="headerlink" title="刷机（卡刷）"></a>刷机（卡刷）</h2><h3 id="Wipe-清理系统和缓存"><a href="#Wipe-清理系统和缓存" class="headerlink" title="Wipe - 清理系统和缓存"></a>Wipe - 清理系统和缓存</h3><p>进入TWRP后，首先Wipe</p>
<p>进入Wipe - Advanced Wipe</p>
<p>勾选</p>
<ul>
<li>Dalvik&#x2F;ART Cache</li>
<li>Cache</li>
<li>Data</li>
<li>System</li>
</ul>
<p>划过 Swipe to Wipe 来 Wipe</p>
<p>注：下面两个不用勾选</p>
<ul>
<li>Internal Storage 是数据存放的地方</li>
<li>USB-OTG 是与支持USB-OTG设备的连接</li>
</ul>
<h3 id="Install-安装Rom"><a href="#Install-安装Rom" class="headerlink" title="Install - 安装Rom"></a>Install - 安装Rom</h3><p>连上电脑在TWRP模式下，把下载的Rom拷贝到Internal Storage，然后在<code>Install</code>里面找到你的Rom，如</p>
<pre><code>OnePixel_OB13_oneplus3t-7.1.1rc.zip
</code></pre>
<p>划过<code>Swipe to confirm Flash</code>进行安装，装好后重启进入系统。</p>
<h2 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h2><p>进入系统后进行初始化设置</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/OnePixelInit.png" alt="OnePixelInit"></p>
<p>注意：WiFi&#x2F;数据连接没代理不要连接，断网设置，不然会一直连接不上Google而卡在那里的。</p>
<p>初始化好之后设置了些东西就是这样子啦</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/OnePixelInstalled.jpg"></p>
<h2 id="Xposed框架"><a href="#Xposed框架" class="headerlink" title="Xposed框架"></a>Xposed框架</h2><p>大名鼎鼎的Xposed框架，可以通过添加各种模块实现各种功能，不过官方版现在才更新到适配Android6.0</p>
<p>官方链接：<a href="http://repo.xposed.info/module/de.robv.android.xposed.installer">Xposed Installer</a></p>
<p>好在XDA社区有 Material Design 版的Xposed框架下载器（推荐）</p>
<p><a href="https://forum.xda-developers.com/devdb/project/?id=13191#downloads">xda-developers . Material Design Xposed Installer</a></p>
<p>安装 Material Design Xposed Installer 后在 UnOfficial 这栏选择适合自己手机型号的Xposed框架下载</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/XposedUnOfficial.jpg" alt="XposedUnOfficial"></p>
<p>装好Xposed框架后，下载Xposed模块</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/XposedModuleDownload.jpg" alt="XposedModuleDownload"></p>
<p>知乎上有些好的Xposed模块推荐</p>
<p><a href="https://www.zhihu.com/question/22063862/answer/95339323">知乎 . Android 系统上的 Xposed 框架中都有哪些值得推荐的模块？</a></p>
<h2 id="Magisk框架"><a href="#Magisk框架" class="headerlink" title="Magisk框架"></a>Magisk框架</h2><p>Magisk是类似xposed的第三方应用接口，但是暂时模块较少。</p>
<p>Magisk的介绍、下载、安装</p>
<p><a href="https://forum.xda-developers.com/apps/magisk/official-magisk-v7-universal-systemless-t3473445">[2017.7.20] Magisk v13.3 - Root &amp; Universal Systemless Interface [Android 5.0+]</a></p>
<p>下面是安利Magisk的帖子，里面有各种模块介绍：</p>
<p><a href="http://www.oneplusbbs.com/thread-3302341-1-1.html">[教程] (搬运XDA)magisk框架教程以及模块-xposed的替代品</a></p>
<p>我因为OnePixel Rom自带Magisk，也就顺便装了个<code>Pixel Launcher transparent dock</code>，让pixel luncher底栏的颜色变透明。</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/PixelLauncherTransparentDock.jpg" alt="PixelLauncherTransparentDock"></p>
<p>效果如上面初始化设置那里的截图。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>刷机</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCharm自动安装pymysql包失败</title>
    <url>/2017/01/21/PyCharmInstallPymysqlFail/</url>
    <content><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>在PyCharm中新建Web2Py项目后提示没有pymysql，自动安装失败，如图：  </p>
<span id="more"></span>


<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/pymysqlError.jpg">  </p>
<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><h3 id="1-安装pip"><a href="#1-安装pip" class="headerlink" title="1. 安装pip"></a>1. 安装pip</h3><p>在终端输入</p>
<pre><code>pip -V 
</code></pre>
<p>如果显示版本路径，就说明pip已经安装了<br>如果没有安装pip则需要在终端安装  </p>
<p>  ①使用脚本安装pip：</p>
<ul>
<li><p>各平台（管理员运行）：  </p>
<pre><code>  python get-pip.py
</code></pre>
</li>
</ul>
<p>②使用包管理器安装pip：</p>
<ul>
<li><p>Mac：  </p>
<pre><code>  sudo easy_install pip
</code></pre>
</li>
<li><p>Debian &amp; Ubuntu:  </p>
<pre><code>  sudo apt-get install python-pip
</code></pre>
</li>
<li><p>Fedora:    </p>
<pre><code>  sudo yum install python-pip
</code></pre>
</li>
</ul>
<h3 id="2-安装pymysql"><a href="#2-安装pymysql" class="headerlink" title="2. 安装pymysql"></a>2. 安装pymysql</h3><pre><code>pip install pymysql
</code></pre>
<h3 id="3-正常情况下以上两步就行了。"><a href="#3-正常情况下以上两步就行了。" class="headerlink" title="3. 正常情况下以上两步就行了。"></a>3. 正常情况下以上两步就行了。</h3><p>然而我的项目中依然提示没有pymysql，结果发现只是Python版本选错了<br>(ノ▼Д▼)ノ<br>我pymysql是安装到Python2.7，而PyCharm项目是用Python2.6<br>所以就到<code>Preferences</code> &gt; <code>Project Interpreter</code>中调成Python2.7就行了，</p>
<h3 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/36956124/permision-issues-while-using-and-installing-python-packages">http://stackoverflow.com/questions/36956124/permision-issues-while-using-and-installing-python-packages</a></p>
</blockquote>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>pyparsing 无法卸载导致安装 matplotlib 出错</title>
    <url>/2018/10/13/PyparsingFailsToUninstallCausingErrorInInstallingMatplotlib/</url>
    <content><![CDATA[<h2 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pip install matplotlib</span><br></pre></td></tr></table></figure>

<p>安装 matplotlib 时出现以下错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Found existing installation: pyparsing 1.5.6</span><br><span class="line">Cannot uninstall &#x27;pyparsing&#x27;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>安装 matplotlib 需要卸载我已安装的 1.5.6 版本的 pyparsing，再重新装新版本，但是无法卸载</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>手动重装最新版 pyparsing</p>
<p>首先，去官网查看最新版是什么版本：<a href="https://pypi.org/project/pyparsing/">https://pypi.org/project/pyparsing/</a></p>
<p>当前最新版是 <code>pyparsing 2.2.0</code>，所以执行如下重新安装最新版：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pip install -I pyparsing==2.2.0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python DeprecationWarning the imp module is deprecated in favour of importlib</title>
    <url>/2019/01/21/PythonDeprecationWarningTheImpModuleIsDeprecatedInFavourOfImportlib/</url>
    <content><![CDATA[<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\PyCharm 2018.2.5\helpers\pycharm\docrunner.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module&#x27;s documentation for alternative uses</span><br><span class="line">  import imp</span><br></pre></td></tr></table></figure>

<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>imp 从 Python 3.4 之后弃用了，建议使用 importlib 代替</p>
<span id="more"></span>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>打开 <code>E:\PyCharm 2018.2.5\helpers\pycharm\docrunner.py</code> 文件，做如下两步修改：</p>
<ol>
<li><p>在第一行，注释掉 <code>imp</code>，导入 <code>importlib</code></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#import imp</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br></pre></td></tr></table></figure>
</li>
<li><p>在第 230 行的 <code>loadSource</code> 函数中，注释 <code>imp.load_source</code>，使用 <code>importlib.machinery.SourceFileLoader</code> 加载模块</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#module = imp.load_source(moduleName, fileName)</span></span><br><span class="line">module = importlib.machinery.SourceFileLoader(moduleName, fileName).load_module()</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>QT的pro文件编写</title>
    <url>/2017/04/26/QTProFile/</url>
    <content><![CDATA[<h2 id="常规pro文件"><a href="#常规pro文件" class="headerlink" title="常规pro文件"></a>常规pro文件</h2><p>下面是CloudCompare中一个自己写的插件的pro文件，</p>
<p>pro文件编写可按照如下方式写。</p>
<span id="more"></span>


<pre><code># 添加QT的模块
QT  +=  widgets \
    opengl

# 指明让qmake生成哪种makefile文件，app表示应用程序，lib表示库
TEMPLATE = lib

# 指明生成的库的名字
TARGET = qSAF

# 指明编译依赖路径
DEPENDPATH += .\

# 包含头文件路径
INCLUDEPATH += .\
            $$PWD/../

# 工程的头文件路径
HEADERS += qSAF.h \
           ../ccStdPluginInterface.h \
           ../ccPluginInterface.h \
           ../ccMainAppInterface.h \
        ccSAFDlg.h

# 工程的源文件路径
SOURCES += qSAF.cpp ../ccStdPluginInterface.cpp \
        ccSAFDlg.cpp

# 工程的资源文件路径
RESOURCES += qSAF.qrc

#CC (CloudCompare核心算法库路径)
win32:CONFIG(release, debug|release): LIBS += -L$$PWD/../../../Release/libs/ -lCC_CORE_LIB
else:win32:CONFIG(debug, debug|release): LIBS += -L$$PWD/../../../Release/libs/ -lCC_CORE_LIB
else:unix: LIBS += -L$$PWD/../../../Release/libs/ -lCC_CORE_LIB

# 包含CC的头文件路径
INCLUDEPATH += $$PWD/../../CC/include
# 包含CC的依赖路径
DEPENDPATH += $$PWD/../../CC

#qCC_db (CloudCompare数据库路径)
win32:CONFIG(release, debug|release): LIBS += -L$$PWD/../../../Release/libs/ -lQCC_DB_LIB
else:win32:CONFIG(debug, debug|release): LIBS += -L$$PWD/../../../Release/libs/ -lQCC_DB_LIB
else:unix: LIBS += -L$$PWD/../../../Release/libs/ -lQCC_DB_LIB

INCLUDEPATH += $$PWD/../../libs/qCC_db
DEPENDPATH += $$PWD/../../libs/qCC_db

# 工程的ui文件路径
FORMS += \
        SAFDlg.ui

# Mac系统下，则执行括号内的代码
macx
&#123;
# 编译时候指定libs查找位置
QMAKE_LFLAGS_RELEASE += -Wl,-rpath,$$PWD/../../../Release/libs -Wl
QMAKE_LFLAGS_DEBUG += -Wl,-rpath,$$PWD/../../../Release/libs -Wl

#指定生成路径
DESTDIR = $$PWD/../../../Release/CloudCompare.app/Contents/plugins
&#125;

# Mac外的其他Unix系统下(Linux)，则执行括号内的代码
unix:!macx&#123;
# linux only

# 编译时候指定libs查找位置
QMAKE_LFLAGS_RELEASE += -Wl,-rpath=$$PWD/../../../Release/libs -Wl,-Bsymbolic
QMAKE_LFLAGS_DEBUG += -Wl,-rpath=$$PWD/../../../Release/libs -Wl,-Bsymbolic

#指定生成路径
DESTDIR = $$PWD/../../../Release/plugins
&#125;

# Windows系统下，则执行括号内的代码
win32 &#123;
# windows only

&#125;
</code></pre>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>QT QDialog 中模态与非模态对话框的研究</title>
    <url>/2017/06/29/QTQDialogModal/</url>
    <content><![CDATA[<h2 id="模态与非模态对话框"><a href="#模态与非模态对话框" class="headerlink" title="模态与非模态对话框"></a>模态与非模态对话框</h2><h3 id="模态对话框"><a href="#模态对话框" class="headerlink" title="模态对话框"></a>模态对话框</h3><p><strong>模态对话框</strong>是只能首先对其进行操作后才能操作其他窗口的对话框。实质是父线程在子线程创建这个模态对话框后，父线程阻塞，等待子线程的操作。</p>
<h3 id="非模态对话框"><a href="#非模态对话框" class="headerlink" title="非模态对话框"></a>非模态对话框</h3><p><strong>非模态对话框</strong>则是可以同时对它和其他窗口进行操作的对话框。实质是父子进程并行运行。</p>
<span id="more"></span>

<h2 id="QDialog"><a href="#QDialog" class="headerlink" title="QDialog"></a>QDialog</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>The QDialog class is the base class of dialog windows.</p>
</blockquote>
<p>QDialog 类是对话框窗口的基类。用于创建对话窗口。</p>
<h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><pre><code>class Q_WIDGETS_EXPORT QDialog : public QWidget
</code></pre>
<h2 id="QT-窗口模态"><a href="#QT-窗口模态" class="headerlink" title="QT 窗口模态"></a>QT 窗口模态</h2><h3 id="模态种类"><a href="#模态种类" class="headerlink" title="模态种类"></a>模态种类</h3><pre><code>enum WindowModality &#123;
    NonModal,
    WindowModal,
    ApplicationModal
&#125;;
</code></pre>
<table>
<thead>
<tr>
<th>状态</th>
<th>Constant</th>
<th>Value</th>
<th>描述</th>
<th>QDialog代表方法</th>
</tr>
</thead>
<tbody><tr>
<td>非模态</td>
<td>Qt::NonModal</td>
<td>0</td>
<td>窗口不是模态，不会阻止其他窗口的操作</td>
<td>QDialog::show()</td>
</tr>
<tr>
<td>窗口模态</td>
<td>Qt::WindowModal</td>
<td>1</td>
<td>窗口对单个窗口层次结构是模态，会阻止对其所有长辈（父窗口、祖父窗口、他们的兄弟姐妹）的操作，其子窗口不会阻止</td>
<td>QDialog::open()</td>
</tr>
<tr>
<td>应用模态</td>
<td>Qt::ApplicationModal</td>
<td>2</td>
<td>窗口对应用程序是模态，并阻止对所有窗口的操作</td>
<td>QDialog::exec()</td>
</tr>
</tbody></table>
<p><strong>注意</strong>：窗口模态与应用模态都属于模态，只是<code>WindowModal</code>对局部模态，<code>ApplicationModal</code>对整个程序模态。</p>
<h3 id="设置模态"><a href="#设置模态" class="headerlink" title="设置模态"></a>设置模态</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><pre><code>class Q_WIDGETS_EXPORT QWidget : public QObject, public QPaintDevice
&#123;
public:
    void setWindowModality(Qt::WindowModality windowModality);
&#125;
</code></pre>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre><code>QDialog dialog;
dialog.setWindowModality(Qt::ApplicationModal);
</code></pre>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt的QVaiant中使用非QMetaType类型缺少Q_DECLARE_METATYPE宏定义错误</title>
    <url>/2017/12/05/QVaiantQ_DECLARE_METATYPE/</url>
    <content><![CDATA[<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\Qt\Qt5.9.3\5.9.3\mingw53_32\include\QtCore\qglobal.h:738: error: static assertion failed: Type is not registered, please use the Q_DECLARE_METATYPE macro to make it known to Qt&#x27;s meta-object system</span><br><span class="line"> #define Q_STATIC_ASSERT_X(Condition, Message) static_assert(bool(Condition), Message)</span><br><span class="line">                                               ^</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/Q_DECLARE_METATYPE.png"></p>
<h2 id="报错代码"><a href="#报错代码" class="headerlink" title="报错代码"></a>报错代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const QCameraInfo &amp;cameraInfo</span><br><span class="line">...</span><br><span class="line">QVariant::fromValue(cameraInfo)</span><br></pre></td></tr></table></figure>

<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>QVaiant 不能识别自定义类型和其他非 QMetaType 内置类型， 而 QCameraInfo 是非 QMetaType 内置类型，因此使用 <code>QVariant::fromValue(cameraInfo)</code> 之前，需要使用 <code>Q_DECLARE_METATYPE</code> 宏对 QCameraInfo 进行声明。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在代码中加个宏定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Q_DECLARE_METATYPE(QCameraInfo)</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>Q_DECLARE_METATYPE<ul>
<li>如果要使自定义类型或其他非 QMetaType 内置类型在 QVaiant 中使用，必须使用该宏</li>
<li>该类型必须有公有的 构造、析构、复制构造 函数</li>
</ul>
</li>
<li>qRegisterMetaType 必须使用该函数的两种情况<ul>
<li>如果非 QMetaType 内置类型要在 Qt 的属性系统中使用</li>
<li>如果非 QMetaType 内置类型要在 queued 信号与槽 中使用</li>
</ul>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.sina.com.cn/s/blog_640531380100yfei.html">Q_DECLARE_METATYPE与qRegisterMetaType学习</a></li>
<li><a href="https://stackoverflow.com/questions/34278017/how-to-use-qvariantfromvalue-with-qstring">How to use QVariant::fromValue with QString?</a></li>
<li><a href="http://doc.qt.io/qt-5/qmetatype.html#Q_DECLARE_METATYPE">QMetaType Class - Q_DECLARE_METATYPE(Type)</a></li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>QT 无法链接动态库 dyld library not loaded ... libhdf5.100.dylib</title>
    <url>/2017/06/05/QtDyldLibraryNotLoaded/</url>
    <content><![CDATA[<h2 id="qt-dyld-library-not-loaded-…-libhdf5-100-dylib"><a href="#qt-dyld-library-not-loaded-…-libhdf5-100-dylib" class="headerlink" title="qt dyld library not loaded …&#x2F;libhdf5.100.dylib"></a>qt dyld library not loaded …&#x2F;libhdf5.100.dylib</h2><p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/DyldLibraryNotLoaded.png" alt="DyldLibraryNotLoaded"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>无法链接动态库，考虑手动添加链接。</p>
<span id="more"></span>

<h2 id="找到-libhdf5-100-dylib-文件及路径"><a href="#找到-libhdf5-100-dylib-文件及路径" class="headerlink" title="找到 libhdf5.100.dylib 文件及路径"></a>找到 libhdf5.100.dylib 文件及路径</h2><p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/hdf5-lib-dylib.jpg"></p>
<pre><code>/usr/local/opt/hdf5/lib
</code></pre>
<h2 id="添加到-QT-Run-Environment"><a href="#添加到-QT-Run-Environment" class="headerlink" title="添加到 QT Run Environment"></a>添加到 QT Run Environment</h2><p>把路径添加到<code>Run Environment</code>中的<code>DYLD_LIBRARY_PATH</code>变量的值中。</p>
<p>若无此变量则添加，若已有则按编辑并在后面加上路径。</p>
<p>Run!</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/QTRunEnvironment.jpg"></p>
<h2 id="补充：添加到构建设置-构建环境中"><a href="#补充：添加到构建设置-构建环境中" class="headerlink" title="补充：添加到构建设置-构建环境中"></a>补充：添加到构建设置-构建环境中</h2><p>如果添加到 <code>Run Environment</code> 中还是不行，可以添加到<code>Build</code>-<code>构建设置</code>-<code>构建环境</code>中。</p>
<p>Debug!</p>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/QtDebugEnvironment.jpg"></p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><p><a href="http://stackoverflow.com/questions/13611740/qt-mac-osx-10-8-dyld-library-not-loaded-image-not-found">stackoverflow . qt mac osx 10.8 dyld: library not loaded…image not found</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>链接装载库</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt GDB 无法调试 MSVC 编译的程序而报错：file format not recognized</title>
    <url>/2018/06/02/QtNotInExecutableFormat/</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Windows 10 x64</li>
<li>Visual Studio 2017</li>
<li>Qt 5.11</li>
</ul>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>Qt Debug 时提示异常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qt not in executable format. file format not recognized</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/qt-not-in-executable-format-file-format-not-recognized.PNG" alt="qt-not-in-executable-format-file-format-not-recognized"></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>编译器（Compiler）使用了 64 位版本的 MSVC，调试器（Debugger）却使用了 32 位的 MinGW 的 GDB，从而 GDB 不能调试 64 位程序而报错。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul>
<li>在 Qt 的 <code>工具</code> - <code>选项</code> - <code>构建和运行</code> - <code>Debuggers</code> 选择 CDB（Debugging Tools for Windows），</li>
<li>不能自动检测到则手动添加，如：<code>C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\cdb.exe</code>，</li>
<li>没有 cdb 则下载：<a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk">Windows Driver Kit (WDK)</a>（下载装好后重启 Qt 一般就可以自动检测到）</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>解决七牛云链接失效以及批量下载图片并迁移阿里云 OSS</title>
    <url>/2018/11/08/SolveInvalidQiniuLinksAndDownloadImagesInBatchesAndMigrateAliOSS/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>七牛云对测试域名进行回收，而我博文中图片用的链接仍然是测试域名的链接，因此导致部分链接失效，浏览器返回如下错误：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;error&quot;</span><span class="punctuation">:</span><span class="string">&quot;no such domain&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="找回图片对象"><a href="#找回图片对象" class="headerlink" title="找回图片对象"></a>找回图片对象</h2><p>经过提交工单与七牛云工程师协商，知道了失效的图片并没有丢失，可通过某些方法找回，解决办法如下：</p>
<ol>
<li>绑定自定义域名：<a href="https://developer.qiniu.com/kodo/kb/5158/how-to-transition-from-test-domain-name-to-a-custom-domain-name">如何从测试域名过渡到自定义域名</a>（绑定后则可用自定义域名访问失效的图片）</li>
<li>下载单个图片：<a href="https://developer.qiniu.com/kodo/tools/1300/qrsctl">命令行辅助工具(qrsctl)</a>（使用 qrsctl 工具的 get 下载），如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\qrsctl.exe login huihut@outlook.com 123   # 假设密码为 123</span><br><span class="line">.\qrsctl.exe get temp H.png ./H.png         # 下载 temp 存储空间的 H.png 文件，保存到当前目录下</span><br></pre></td></tr></table></figure></li>
<li>下载多个对象<ol>
<li>先新建一个同区域存储空间，会分配一个新的测试域名到新空间</li>
<li>通过 qshell batchcopy 到有域名的同区域空间然后再进行 qdownload 下载操作：<a href="https://developer.qiniu.com/kodo/tools/1302/qshell">命令行工具(qshell)</a><ol>
<li><code>qshell listbucket &lt;原bucket名&gt; list.txt</code> （list 出全部文件）<br> <a href="https://github.com/qiniu/qshell/blob/master/docs/listbucket.md">https://github.com/qiniu/qshell/blob/master/docs/listbucket.md</a></li>
<li><code>cat list.txt | awk &#39;&#123;print $1&#125;&#39; &gt;list_final.txt</code> （ 用awk获取list结果的第一列）</li>
<li><code>qshell batchcopy &lt;原bucket名&gt; &lt;新bucket名&gt; list_final.txt</code> （复制到新bucket的文件和原bucket文件名一致）<br> <a href="https://github.com/qiniu/qshell/blob/master/docs/batchcopy.md">https://github.com/qiniu/qshell/blob/master/docs/batchcopy.md</a></li>
<li><code>qshell qdownload newfilelist.txt</code> （newfilelist.txt 为下载的配置文档）<br> <a href="https://github.com/qiniu/qshell/blob/master/docs/qdownload.md">https://github.com/qiniu/qshell/blob/master/docs/qdownload.md</a></li>
</ol>
</li>
</ol>
</li>
</ol>
<blockquote>
<p><a href="https://developer.qiniu.com/kodo/kb/3858/video-of-how-to-use-qrs-tools">视频教程 – qshell qrsctl qfetch 命令行工具使用</a></p>
</blockquote>
<h2 id="准备迁移阿里云-OSS"><a href="#准备迁移阿里云-OSS" class="headerlink" title="准备迁移阿里云 OSS"></a>准备迁移阿里云 OSS</h2><p>上面的解决方法中，要想继续使用七牛云存储作为图床，必须要有个实名认证的域名（解决方法一），然后绑定之</p>
<p>而我并没有，因此我打算把我的图片对象迁移到 <a href="https://cn.aliyun.com/product/oss">阿里云 OSS 存储</a></p>
<p>上们的解决方法二、三都可以，但是二非常麻烦，三需要两个存储空间，也就需要对七牛账号进行实名认证</p>
<p>而我又不想另外实名认证（<del>瞎折腾</del>），因此我用了第二种方法：下载单个图片！[捂脸]</p>
<h2 id="C-程序下载七牛存储的对象"><a href="#C-程序下载七牛存储的对象" class="headerlink" title="C++ 程序下载七牛存储的对象"></a>C++ 程序下载七牛存储的对象</h2><p>使用 qrsctl 工具只能单个文件下载，为了避免重复的工作，我写了个 C++ 程序解决。</p>
<h3 id="获取包含所有对象名的-html-文件"><a href="#获取包含所有对象名的-html-文件" class="headerlink" title="获取包含所有对象名的 html 文件"></a>获取包含所有对象名的 html 文件</h3><p>首先进入七牛云要下载的 bucket（存储空间）的 web 界面，把内容管理列表中全部对象显示出来（点底部加载更多直到全部显示），在 Chrome 浏览器 <code>右键</code> - <code>检查</code>，如下图，选中 <code>tbody</code> - <code>右键</code> - <code>Copy</code> - <code>Copy element</code></p>
<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/QiniuStorageSpaceTbody.png" alt="QiniuStorageSpaceTbody"></p>
<p>然后把复制到的内容保存成 <code>html.html</code> 文件，放到一个目录下，如我的 <code>D:\code\test\</code>（以下均以此目录为工程目录）</p>
<h3 id="下载并登录-qrsctl"><a href="#下载并登录-qrsctl" class="headerlink" title="下载并登录 qrsctl"></a>下载并登录 qrsctl</h3><p>下载 <a href="https://developer.qiniu.com/kodo/tools/1300/qrsctl">命令行辅助工具(qrsctl)</a>，保存到 <code>D:\code\test\</code> 目录，并重命名为 <code>qrsctl.exe</code></p>
<p>在 <code>D:\code\test\</code> 目录的 CMD 或 PowerShell 中输入如下命令登录你的七牛账号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\qrsctl.exe login huihut@outlook.com 123   # 假设密码为 123</span><br></pre></td></tr></table></figure>

<h3 id="编写批量下载程序"><a href="#编写批量下载程序" class="headerlink" title="编写批量下载程序"></a>编写批量下载程序</h3><p>在 <code>D:\code\test\</code> 下创建个 <code>QrsctlGet.cpp</code>，把下面 C++ 代码保存到刚创建的文件，修改存储空间名为你的存储空间名的名字（本文为 <code>temp</code>），用 <code>VS Code</code> 或其他工具编译运行，七牛存储的文件即会下载到同目录下。</p>
<p>Github 仓库：<a href="https://github.com/huihut/QrsctlGet">huihut&#x2F;QrsctlGet</a>（有 <code>QrsctlGet.Cpp</code>、<code>qrsctl.exe</code>、<code>.vscode环境</code>）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//==============================================================</span></span><br><span class="line"><span class="comment">//  作者：huihut</span></span><br><span class="line"><span class="comment">//  邮箱：huihut@outlook.com</span></span><br><span class="line"><span class="comment">//  时间：2018-11-08 14:28:00</span></span><br><span class="line"><span class="comment">//  说明：匹配 HTML 的七牛云存储的文件名，并使用 qrsctl 下载文件</span></span><br><span class="line"><span class="comment">//==============================================================</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 存储空间名【需要修改为你的存储空间名】</span></span><br><span class="line">	string bucket = <span class="string">&quot;temp&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打开 html 文件</span></span><br><span class="line">	ifstream fhtml;</span><br><span class="line">	fhtml.<span class="built_in">open</span>(<span class="string">&quot;html.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 统计下载的文件对象数</span></span><br><span class="line">	<span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (fhtml)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// tbody 里面符合 reg 的奇数为文件对象，偶数是文件类型，因此只取奇数匹配项</span></span><br><span class="line">		<span class="type">bool</span> isObj = <span class="literal">true</span>;</span><br><span class="line">		std::stringstream buffer;</span><br><span class="line">		buffer &lt;&lt; fhtml.<span class="built_in">rdbuf</span>();</span><br><span class="line">		<span class="function">std::string <span class="title">contents</span><span class="params">(buffer.str())</span></span>;</span><br><span class="line">		std::smatch match;</span><br><span class="line">		<span class="function">std::regex <span class="title">reg</span><span class="params">(<span class="string">&quot;\\b(edit-word ng-binding\&quot;&gt;)([^&lt;]*)&quot;</span>)</span></span>;</span><br><span class="line">		<span class="keyword">while</span> (std::<span class="built_in">regex_search</span>(contents, match, reg)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (isObj)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">// 匹配到的文件对象</span></span><br><span class="line">				string objfile = match.format(<span class="string">&quot;$2&quot;</span>);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Matched &quot;</span> + objfile &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 合成下载命令</span></span><br><span class="line">				string command = <span class="string">&quot;qrsctl.exe get &quot;</span> + bucket + <span class="string">&quot; &quot;</span> + objfile + <span class="string">&quot; ./&quot;</span> + objfile;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 下载文件</span></span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Download &quot;</span> + objfile + <span class="string">&quot;...&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="built_in">system</span>(command.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 文件个数加一</span></span><br><span class="line">				num++;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 下一个非文件对象</span></span><br><span class="line">				isObj = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">// 下一个是文件对象</span></span><br><span class="line">				isObj = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			contents = match.<span class="built_in">suffix</span>().<span class="built_in">str</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cerr &lt;&lt; <span class="string">&quot;Failed to read html file!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Downloaded &quot;</span> + <span class="built_in">to_string</span>(num) + <span class="string">&quot; files.&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/QiniuQrsctlDownload.png" alt="QiniuQrsctlDownload"></p>
<h2 id="迁移阿里云-OSS"><a href="#迁移阿里云-OSS" class="headerlink" title="迁移阿里云 OSS"></a>迁移阿里云 OSS</h2><p>在 <a href="https://cn.aliyun.com/product/oss">阿里云 OSS 存储</a> 创建阿里云账号，并在 OSS 中新建 Bucket，其中读写权限选中公共读（public-read），以便能在博文中读取</p>
<p>把上面下载的图片上传到阿里云 OSS，可以使用客户端上传下载：<a href="https://github.com/aliyun/oss-browser">aliyun&#x2F;oss-browser</a></p>
<p>然后获取外链，批量修改我的博文，把所有七牛云链接改为阿里云就好了</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>OSS</tag>
      </tags>
  </entry>
  <entry>
    <title>WinRT(C++/CX) Platform::String^ 与 std::string 的类型转换</title>
    <url>/2018/08/23/TypeConversionBetweenPlatformStringAndStdstring/</url>
    <content><![CDATA[<p>Gist 仓库地址：<a href="https://gist.github.com/huihut/aa90bd3a202090e25b9a4792c80e6920">https://gist.github.com/huihut/aa90bd3a202090e25b9a4792c80e6920</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">Managed_Str_To_Std_Str</span><span class="params">(Platform::String^ ms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::wstring <span class="title">w_str</span><span class="params">(ms-&gt;Begin())</span></span>;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">string</span>(w_str.<span class="built_in">begin</span>(), w_str.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Platform::String^ <span class="built_in">Std_Str_To_Managed_Str</span>(<span class="type">const</span> std::string &amp; input)</span><br><span class="line">&#123;</span><br><span class="line">    std::wstring w_str = std::<span class="built_in">wstring</span>(input.<span class="built_in">begin</span>(), input.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">const</span> <span class="type">wchar_t</span>* w_chars = w_str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="keyword">return</span> (ref <span class="keyword">new</span> Platform::<span class="built_in">String</span>(w_chars));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>std::map error: implicit instantiation of undefined template 不能识别std::map迭代器指针</title>
    <url>/2017/07/17/StdMapTheIteratorPointerIsNotRecognized/</url>
    <content><![CDATA[<h2 id="std-map-error-implicit-instantiation-of-undefined-template-不能识别std-map迭代器指针"><a href="#std-map-error-implicit-instantiation-of-undefined-template-不能识别std-map迭代器指针" class="headerlink" title="std::map error: implicit instantiation of undefined template 不能识别std::map迭代器指针"></a>std::map error: implicit instantiation of undefined template 不能识别std::map迭代器指针</h2><p>代码如下：</p>
<pre><code>std::map&lt;std::string, int&gt;::iterator map_iter;
map_iter-&gt;first
</code></pre>
<p>QT中报错：</p>
<pre><code>/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/utility:258: error: implicit instantiation of undefined template &#39;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&#39;
_T1 first;
    ^
    
</code></pre>
<p>发现是引入头文件错误。</p>
<span id="more"></span>

<p>我原本头文件引入如下：</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;map&gt;
</code></pre>
<p>应该 <code>#include &lt;string&gt;</code>，而不是 <code>#include &lt;string.h&gt;</code>，修改为如下：</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;map&gt;
</code></pre>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>WinRT(C++/CX) UTF8类型转换为std::string和Platform::String^的Unicode字符串</title>
    <url>/2018/08/23/UTF8ToStdStrAndUTF8ToManagedStr/</url>
    <content><![CDATA[<p>Gist 仓库地址：<a href="https://gist.github.com/huihut/8f75e2332e05673ff7e1248ad5e85339">https://gist.github.com/huihut/8f75e2332e05673ff7e1248ad5e85339</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">UTF8_To_Std_Str</span><span class="params">(<span class="type">const</span> std::string &amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> nwLen = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, str.<span class="built_in">c_str</span>(), <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">wchar_t</span>* pwBuf = <span class="keyword">new</span> <span class="type">wchar_t</span>[nwLen + <span class="number">1</span>];</span><br><span class="line">	<span class="built_in">memset</span>(pwBuf, <span class="number">0</span>, nwLen * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, str.<span class="built_in">c_str</span>(), str.<span class="built_in">length</span>(), pwBuf, nwLen);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> nLen = <span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, pwBuf, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* pBuf = <span class="keyword">new</span> <span class="type">char</span>[nLen + <span class="number">1</span>];</span><br><span class="line">	<span class="built_in">memset</span>(pBuf, <span class="number">0</span>, nLen + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, pwBuf, nwLen, pBuf, nLen, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	std::string retStr = pBuf;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">delete</span>[] pBuf;</span><br><span class="line">	<span class="keyword">delete</span>[] pwBuf;</span><br><span class="line"></span><br><span class="line">	pBuf = <span class="literal">NULL</span>;</span><br><span class="line">	pwBuf = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> retStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Platform::String^ <span class="built_in">UTF8_To_Managed_Str</span>(<span class="type">const</span> std::string &amp; str)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> nwLen = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, str.<span class="built_in">c_str</span>(), <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">wchar_t</span>* pwBuf = <span class="keyword">new</span> <span class="type">wchar_t</span>[nwLen + <span class="number">1</span>];</span><br><span class="line">	<span class="built_in">memset</span>(pwBuf, <span class="number">0</span>, nwLen * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, str.<span class="built_in">c_str</span>(), str.<span class="built_in">length</span>(), pwBuf, nwLen);</span><br><span class="line"></span><br><span class="line">	Platform::String^ pStr = ref <span class="keyword">new</span> Platform::<span class="built_in">String</span>(pwBuf);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">delete</span>[] pwBuf;</span><br><span class="line">	pwBuf = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> pStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>UWP 动画改变控件大小（高度）</title>
    <url>/2018/07/18/UWPAnimationChangesControlHeight/</url>
    <content><![CDATA[<p>有这样一个需求：</p>
<ul>
<li>鼠标移动到（悬停在）控件上（PointerEntered），控件大小（高度）发生变化，以显示更多内容；</li>
<li>鼠标移出控件（PointerExited），控件大小恢复原状。</li>
</ul>
<p>本文通过 UWP 动画，用两种方法实现这个效果，用于改变周贡献榜和粉丝榜的 Grid 的高度。</p>
<span id="more"></span>

<h2 id="方法一：XAML-实现动画"><a href="#方法一：XAML-实现动画" class="headerlink" title="方法一：XAML 实现动画"></a>方法一：XAML 实现动画</h2><h3 id="XAML："><a href="#XAML：" class="headerlink" title="XAML："></a>XAML：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserControl.Resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--周贡、粉丝榜下拉恢复动画--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Storyboard</span> <span class="attr">x:Name</span>=<span class="string">&quot;SeeMoreAnimation&quot;</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;WeekFansGrid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span> <span class="attr">EnableDependentAnimation</span>=<span class="string">&quot;True&quot;</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Height&quot;</span> <span class="attr">From</span>=<span class="string">&quot;140&quot;</span> <span class="attr">To</span>=<span class="string">&quot;400&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Storyboard</span> <span class="attr">x:Name</span>=<span class="string">&quot;RestoreAnimation&quot;</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;WeekFansGrid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DoubleAnimation</span>  <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span> <span class="attr">EnableDependentAnimation</span>=<span class="string">&quot;True&quot;</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Height&quot;</span> <span class="attr">From</span>=<span class="string">&quot;400&quot;</span> <span class="attr">To</span>=<span class="string">&quot;140&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">UserControl.Resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">x:Name</span>=<span class="string">&quot;WeekFansGrid&quot;</span> <span class="attr">Background</span>=<span class="string">&quot;White&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Top&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;140&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">PointerEntered</span>=<span class="string">&quot;Grid_PointerEntered&quot;</span> <span class="attr">PointerExited</span>=<span class="string">&quot;Grid_PointerExited&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Grid 里面的一些内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="C-："><a href="#C-：" class="headerlink" title="C#："></a>C#：</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标悬停周贡、粉丝榜的 Grid</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Grid_PointerEntered</span>(<span class="params"><span class="built_in">object</span> sender, PointerRoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        SeeMoreAnimation.Begin();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e1)</span><br><span class="line">    &#123;</span><br><span class="line">        System.Diagnostics.Debug.WriteLine(<span class="string">&quot;Grid_PointerEntered &quot;</span> + e1.Message.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标离开周贡、粉丝榜的 Grid</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Grid_PointerExited</span>(<span class="params"><span class="built_in">object</span> sender, PointerRoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        RestoreAnimation.Begin();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e1)</span><br><span class="line">    &#123;</span><br><span class="line">        System.Diagnostics.Debug.WriteLine(<span class="string">&quot;Grid_PointerExited &quot;</span> + e1.Message.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法二：后台实现动画"><a href="#方法二：后台实现动画" class="headerlink" title="方法二：后台实现动画"></a>方法二：后台实现动画</h2><h3 id="XAML：-1"><a href="#XAML：-1" class="headerlink" title="XAML："></a>XAML：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">x:Name</span>=<span class="string">&quot;WeekFansGrid&quot;</span> <span class="attr">Background</span>=<span class="string">&quot;White&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Top&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;140&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">PointerEntered</span>=<span class="string">&quot;Grid_PointerEntered&quot;</span> <span class="attr">PointerExited</span>=<span class="string">&quot;Grid_PointerExited&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Grid 里面的一些内容--&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="C-：-1"><a href="#C-：-1" class="headerlink" title="C#："></a>C#：</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标悬停周贡、粉丝榜的 Grid</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Grid_PointerEntered</span>(<span class="params"><span class="built_in">object</span> sender, PointerRoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Grid grid = sender <span class="keyword">as</span> Grid;</span><br><span class="line">        <span class="keyword">if</span> (grid != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DoubleAnimation SeeMoreAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">            <span class="keyword">if</span> (SeeMoreAnimation != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 高度从 140 变化到 400</span></span><br><span class="line">                SeeMoreAnimation.From = <span class="number">140</span>;</span><br><span class="line">                SeeMoreAnimation.To = <span class="number">400</span>;</span><br><span class="line">                <span class="comment">// 用时 200 毫秒</span></span><br><span class="line">                SeeMoreAnimation.Duration = <span class="keyword">new</span> Duration(TimeSpan.FromMilliseconds(<span class="number">200</span>));</span><br><span class="line">                SeeMoreAnimation.EnableDependentAnimation = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 目标 Grid 的 Height</span></span><br><span class="line">                Storyboard.SetTarget(SeeMoreAnimation, grid);</span><br><span class="line">                Storyboard.SetTargetProperty(SeeMoreAnimation, <span class="string">&quot;Height&quot;</span>);</span><br><span class="line"></span><br><span class="line">                Storyboard storyboard = <span class="keyword">new</span> Storyboard();</span><br><span class="line">                <span class="keyword">if</span> (storyboard != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    storyboard.Children.Add(SeeMoreAnimation);</span><br><span class="line">                    <span class="comment">// 执行动画</span></span><br><span class="line">                    storyboard.Begin();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e1)</span><br><span class="line">    &#123;</span><br><span class="line">        System.Diagnostics.Debug.WriteLine(<span class="string">&quot;Grid_PointerEntered &quot;</span> + e1.Message.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标离开周贡、粉丝榜的 Grid</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Grid_PointerExited</span>(<span class="params"><span class="built_in">object</span> sender, PointerRoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Grid grid = sender <span class="keyword">as</span> Grid;</span><br><span class="line">        <span class="keyword">if</span> (grid != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DoubleAnimation SeeMoreAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">            <span class="keyword">if</span> (SeeMoreAnimation != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 高度从 400 变化到 140</span></span><br><span class="line">                SeeMoreAnimation.From = <span class="number">400</span>;</span><br><span class="line">                SeeMoreAnimation.To = <span class="number">140</span>;</span><br><span class="line">                <span class="comment">// 用时 200 毫秒</span></span><br><span class="line">                SeeMoreAnimation.Duration = <span class="keyword">new</span> Duration(TimeSpan.FromMilliseconds(<span class="number">200</span>));</span><br><span class="line">                SeeMoreAnimation.EnableDependentAnimation = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 目标 Grid 的 Height</span></span><br><span class="line">                Storyboard.SetTarget(SeeMoreAnimation, grid);</span><br><span class="line">                Storyboard.SetTargetProperty(SeeMoreAnimation, <span class="string">&quot;Height&quot;</span>);</span><br><span class="line"></span><br><span class="line">                Storyboard storyboard = <span class="keyword">new</span> Storyboard();</span><br><span class="line">                <span class="keyword">if</span> (storyboard != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    storyboard.Children.Add(SeeMoreAnimation);</span><br><span class="line">                    <span class="comment">// 执行动画</span></span><br><span class="line">                    storyboard.Begin();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e1)</span><br><span class="line">    &#123;</span><br><span class="line">        System.Diagnostics.Debug.WriteLine(<span class="string">&quot;Grid_PointerExited &quot;</span> + e1.Message.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/GridSeeMoreAnimation1.gif" alt="GridSeeMoreAnimation"></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Dotnet</tag>
        <tag>UWP</tag>
      </tags>
  </entry>
  <entry>
    <title>gcc/mpicc 编译器 undefined reference to ... 问题的解决</title>
    <url>/2017/07/18/UndefinedReferenceTo/</url>
    <content><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>我的代码中使用了<code>libcstl</code>库，在代码中声明：</p>
<pre><code>#include &lt;cstl/cmap.h&gt;
</code></pre>
<p>可是出现这个问题，无法识别<code>libcstl</code>库里调用的函数，如下图：</p>
<span id="more"></span>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/UndefinedReference.png"></p>
<h2 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h2><ol>
<li><code>#include &lt;cstl/cmap.h&gt;</code>这句话不报错说明库已经装好，环境变量也没有问题。</li>
<li>可能是链接时的错误。</li>
</ol>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>查看<code>Makefile</code>文件发现忘记添加cstl的链接库了。</p>
<pre><code>-lcstl
</code></pre>
<p>原来的代码是：</p>
<pre><code>mpicc -c main.c -std=c99 -lstdc++ -fopenmp -lm -o main.o
</code></pre>
<p>应该改为：</p>
<pre><code>mpicc -c main.c -std=c99 -lcstl -lstdc++ -fopenmp -lm -o main.o
</code></pre>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/UndefinedReferenceMakefile.png"></p>
<p>如上图，改好之后就解决了！</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>链接装载库</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity3D 编辑器调试无响应问题</title>
    <url>/2019/05/17/Unity3DEditorDebuggingNoResponse/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>使用 VS 在 Unity 编辑器中调试代码，点击 VS 的 <code>附加到 Unity</code>，Unity 编辑器按下 <code>Play</code> 之后，就会一直等待并且无其他响应，只能结束 Unity 进程。</p>
<span id="more"></span>

<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%ADUnity%E6%97%A0%E5%93%8D%E5%BA%94.png" alt="任务管理器中 Unity 无响应"></p>
<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>经过分析与测试，发现去掉代码中一个单例类的析构方法中的断点即可调试了，具体原因未知。</p>
<p>再测试了一下，在那个单例类的构造、析构方法中分别打断点，如下表：</p>
<table>
<thead>
<tr>
<th>测试</th>
<th>构造</th>
<th>析构</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td></td>
<td></td>
<td>可调试</td>
</tr>
<tr>
<td>2</td>
<td>*</td>
<td></td>
<td>可调试</td>
</tr>
<tr>
<td>3</td>
<td></td>
<td>*</td>
<td>无响应</td>
</tr>
<tr>
<td>4</td>
<td>*</td>
<td>*</td>
<td>无响应</td>
</tr>
</tbody></table>
<blockquote>
<p>表中 <code>*</code> 代表打断点 </p>
</blockquote>
<p>可发现只要在那个单例类的析构中打断点就会造成 Unity 无响应。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>删除析构方法中的断点，或者所有断点，再调试。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity3D Plugin xxx is used from several locations 错误</title>
    <url>/2019/01/07/Unity3DPluginXXXIsUsedFromSeveralLocations/</url>
    <content><![CDATA[<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Plugin &#x27;opencvforunity.dll&#x27; is used from several locations:</span><br><span class="line"> Assets/OpenCVForUnity/Plugins/x86/opencvforunity.dll would be copied to &lt;PluginPath&gt;/opencvforunity.dll</span><br><span class="line"> Assets/OpenCVForUnity/Plugins/x86_64/opencvforunity.dll would be copied to &lt;PluginPath&gt;/opencvforunity.dll</span><br><span class="line">Please fix plugin settings and try again.</span><br><span class="line"></span><br><span class="line">UnityEditor.Modules.DefaultPluginImporterExtension:CheckFileCollisions(String)</span><br><span class="line">UnityEditorInternal.PluginsHelper:CheckFileCollisions(BuildTarget) (at D:/unity/Editor/Mono/Plugins/PluginsHelper.cs:25)</span><br><span class="line">UnityEditor.BuildPlayerWindow:BuildPlayerAndRun()</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>我使用的 <code>opencvforunity.dll</code> 库的 32 位版本与 64 位版本在 Unity 编辑器中没有明确指定，所以 Unity 不知道 32 位或者 64 位系统下用哪个 <code>opencvforunity.dll</code> 库。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul>
<li>为 x86 的 <code>opencvforunity.dll</code> 取消 x86_64 平台，只勾选 x86 平台，Apply</li>
<li>为 x86_64 的 <code>opencvforunity.dll</code> 取消 x86 平台，只勾选 x86_64 平台，Apply</li>
</ul>
<p><img src="https://huihut-img.oss-cn-shenzhen.aliyuncs.com/Unity3DOpencvforunity.dll.png" alt="Unity3DOpencvforunity.dll"></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unreal 源码编译运行 Missing cached shader map... 的问题</title>
    <url>/2017/07/28/UnrealMissingCachedShaderMap/</url>
    <content><![CDATA[<h2 id="Unreal-源码编译运行-Missing-cached-shader-map…-的问题"><a href="#Unreal-源码编译运行-Missing-cached-shader-map…-的问题" class="headerlink" title="Unreal 源码编译运行 Missing cached shader map… 的问题"></a>Unreal 源码编译运行 Missing cached shader map… 的问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Unreal 源码是 Github-release 分支，版本是4.16。</p>
<p>编译运行Unreal引擎源码的时候，出现虚幻编辑器的窗口，但是卡在45%不动。</p>
<span id="more"></span>

<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/UnrealLunch45Missing.png"></p>
<p>并在调试窗口输出：</p>
<pre><code>Missing cached shader map for material WorldGridMaterial, compiling. Is special engine material.
</code></pre>
<p><img src="http://huihut-img.oss-cn-shenzhen.aliyuncs.com/MissingCachedShaderMap.png"></p>
<h3 id="同类问题"><a href="#同类问题" class="headerlink" title="同类问题"></a>同类问题</h3><p>同样这个问题，在unrealengine社区有人遇到，但没有说明具体原因及解决方案。</p>
<p><a href="https://answers.unrealengine.com/questions/184696/ue47-source-build-missing-cached-shader.html">answers.unrealengine.com - UE4.7 source build, missing cached shader</a></p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>结果我没有进行任何操作，<strong>再等会儿</strong> 居然成功运行了起来！</p>
<p>我猜测可能是WorldGridMaterial这个材质需要联网下载，然后由于网络问题在45%处卡住了一会儿。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Unreal</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 生成带标签数据集的 CSV 文件</title>
    <url>/2018/06/17/UsingPythonToCreateCSV/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 生成 CSV 文件</span></span><br><span class="line"><span class="comment"># Python 生成 CSV 文件，可用于生成带标签的数据集 CSV 文件，标签从0开始自动升序：0,1,2,3...</span></span><br><span class="line"><span class="comment"># 作者：huihut</span></span><br><span class="line"><span class="comment"># 仓库：https://gist.github.com/huihut/9881c98a1d9279d4fa9dfd8475e3fe4b</span></span><br><span class="line"><span class="comment"># 参考：https://github.com/opencv/opencv_attic/blob/master/opencv/modules/contrib/doc/facerec/src/create_csv.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用脚本：</span></span><br><span class="line"><span class="string">* python create_csv.py &lt;base_path&gt; [save_path]</span></span><br><span class="line"><span class="string">例如：</span></span><br><span class="line"><span class="string">* python create_csv.py /Users/xx/code/dataset</span></span><br><span class="line"><span class="string">* python create_csv.py /Users/xx/code/dataset ./dataset_csv.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">目录结构（使用 tree 命令查看）：</span></span><br><span class="line"><span class="string">xx@xxs-MacBook-Pro:~/code/dataset$ tree</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">├── README</span></span><br><span class="line"><span class="string">├── dataset_csv.txt</span></span><br><span class="line"><span class="string">├── s01</span></span><br><span class="line"><span class="string">│   ├── 01.pgm</span></span><br><span class="line"><span class="string">│   ├── ...</span></span><br><span class="line"><span class="string">│   └── 10.pgm</span></span><br><span class="line"><span class="string">├── s02</span></span><br><span class="line"><span class="string">│   ├── 01.pgm</span></span><br><span class="line"><span class="string">│   ├── ...</span></span><br><span class="line"><span class="string">│   └── 10.pgm</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">└── s10</span></span><br><span class="line"><span class="string">    ├── 01.pgm</span></span><br><span class="line"><span class="string">    ├── ...</span></span><br><span class="line"><span class="string">    └── 10.pgm</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">生成的 CSV 文件内容（使用 cat 命令查看 dataset_csv.txt 文件内容）：</span></span><br><span class="line"><span class="string">xx@xxs-MacBook-Pro:~/code/dataset$ cat dataset_csv.txt</span></span><br><span class="line"><span class="string">/Users/xx/code/dataset/s01/01.pgm;0</span></span><br><span class="line"><span class="string">/Users/xx/code/dataset/s01/02.pgm;0</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">/Users/xx/code/dataset/s01/10.pgm;0</span></span><br><span class="line"><span class="string">/Users/xx/code/dataset/s02/01.pgm;1</span></span><br><span class="line"><span class="string">/Users/xx/code/dataset/s02/02.pgm;1</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">/Users/xx/code/dataset/s10/01.pgm;9</span></span><br><span class="line"><span class="string">/Users/xx/code/dataset/s10/02.pgm;9</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">/Users/xx/code/dataset/s10/10.pgm;9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    </span><br><span class="line">    SAVE_PATH = <span class="string">&quot;./dataset_csv.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(sys.argv) != <span class="number">2</span> <span class="keyword">and</span> <span class="built_in">len</span>(sys.argv) != <span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;usage:&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;* python create_csv.py &lt;base_path&gt; [save_path]&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;example:&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;* python create_csv.py /Users/xx/code/dataset&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;* python create_csv.py /Users/xx/code/dataset ./dataset_csv.txt&quot;</span></span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> (<span class="built_in">len</span>(sys.argv) == <span class="number">3</span>):</span><br><span class="line">        SAVE_PATH = sys.argv[<span class="number">2</span>]</span><br><span class="line">    </span><br><span class="line">    BASE_PATH = sys.argv[<span class="number">1</span>]</span><br><span class="line">    SEPARATOR = <span class="string">&quot;;&quot;</span></span><br><span class="line">    fh = <span class="built_in">open</span>(SAVE_PATH,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    label = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> dirname, dirnames, filenames <span class="keyword">in</span> os.walk(BASE_PATH):</span><br><span class="line">        <span class="keyword">for</span> subdirname <span class="keyword">in</span> dirnames:</span><br><span class="line">            subject_path = os.path.join(dirname, subdirname)</span><br><span class="line">            <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(subject_path):</span><br><span class="line">                abs_path = <span class="string">&quot;%s/%s&quot;</span> % (subject_path, filename)</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;%s%s%d&quot;</span> % (abs_path, SEPARATOR, label)</span><br><span class="line">                fh.write(abs_path + SEPARATOR + <span class="built_in">str</span>(label) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            label = label + <span class="number">1</span></span><br><span class="line">    fh.close()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 使用 Qt 生成带标签数据集的 CSV 文件</title>
    <url>/2018/06/12/UsingQtToCreateCSV/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ 使用 Qt 生成 CSV 文件</span></span><br><span class="line"><span class="comment">// 以下函数实现生成特定类型的 CSV 文件，可用于生成带标签的数据集 CSV 文件，标签为图片上一级的文件夹名字。</span></span><br><span class="line"><span class="comment">// 作者：huihut</span></span><br><span class="line"><span class="comment">// 仓库：https://gist.github.com/huihut/c9f43e276ef7652f0471725482a1e4f6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">目录结构（使用 tree 命令查看）：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">xx@xxs-MacBook-Pro:~/code/dataset$ tree</span></span><br><span class="line"><span class="comment">.</span></span><br><span class="line"><span class="comment">├── README</span></span><br><span class="line"><span class="comment">├── dataset_csv.txt</span></span><br><span class="line"><span class="comment">├── s01</span></span><br><span class="line"><span class="comment">│   ├── 01.pgm</span></span><br><span class="line"><span class="comment">│   ├── ...</span></span><br><span class="line"><span class="comment">│   └── 10.pgm</span></span><br><span class="line"><span class="comment">├── s02</span></span><br><span class="line"><span class="comment">│   ├── 01.pgm</span></span><br><span class="line"><span class="comment">│   ├── ...</span></span><br><span class="line"><span class="comment">│   └── 10.pgm</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">└── s10</span></span><br><span class="line"><span class="comment">    ├── 01.pgm</span></span><br><span class="line"><span class="comment">    ├── ...</span></span><br><span class="line"><span class="comment">    └── 10.pgm</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-----------------------------------------------------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">生成的 CSV 文件内容（使用 cat 命令查看 dataset_csv.txt 文件内容）：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">xx@xxs-MacBook-Pro:~/code/dataset$ cat dataset_csv.txt</span></span><br><span class="line"><span class="comment">/Users/xx/code/dataset/s01/01.pgm,s01</span></span><br><span class="line"><span class="comment">/Users/xx/code/dataset/s01/02.pgm,s01</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">/Users/xx/code/dataset/s01/10.pgm,s01</span></span><br><span class="line"><span class="comment">/Users/xx/code/dataset/s02/01.pgm,s02</span></span><br><span class="line"><span class="comment">/Users/xx/code/dataset/s02/02.pgm,s02</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">/Users/xx/code/dataset/s10/01.pgm,s10</span></span><br><span class="line"><span class="comment">/Users/xx/code/dataset/s10/02.pgm,s10</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">/Users/xx/code/dataset/s10/10.pgm,s10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDir&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDirIterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CreateCSV</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 数据集的基础路径</span></span><br><span class="line">    QString datasetdir = <span class="string">&quot;/Users/xx/code/dataset&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成的 CSV 文件的名字</span></span><br><span class="line">    QString csvName = <span class="string">&quot;dataset_csv.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据集路径与数据集名字的分隔符</span></span><br><span class="line">    <span class="type">char</span> separator = <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数据集路径、数据集名字</span></span><br><span class="line">    QString datasetPath, datasetName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件迭代器：获取指定类型（以下是 pgm、png、jpg 三种类型）的数据集文件</span></span><br><span class="line">    <span class="function">QDirIterator <span class="title">it</span><span class="params">(datasetdir, QStringList() &lt;&lt; <span class="string">&quot;*.pgm&quot;</span> &lt;&lt; <span class="string">&quot;*.png&quot;</span> &lt;&lt; <span class="string">&quot;*.jpg&quot;</span>, QDir::Files, QDirIterator::Subdirectories)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!it.<span class="built_in">hasNext</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;当前路径下数据集为空！\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建及打开 CSV 文件</span></span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(datasetdir + QDir::toNativeSeparators(<span class="string">&quot;/&quot;</span>) + csvName)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">open</span>(QIODevice::WriteOnly | QIODevice::Text))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;打开 CSV 文件失败！\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 文件写的文本流</span></span><br><span class="line">    <span class="function">QTextStream <span class="title">csv_ts</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件迭代器中有指定数据集文件则依次迭代</span></span><br><span class="line">    <span class="keyword">while</span> (it.<span class="built_in">hasNext</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 数据集路径</span></span><br><span class="line">        datasetPath = it.<span class="built_in">next</span>();</span><br><span class="line">        <span class="comment">// 数据集名字</span></span><br><span class="line">        datasetName = datasetPath.<span class="built_in">section</span>(QDir::<span class="built_in">toNativeSeparators</span>(<span class="string">&quot;/&quot;</span>), <span class="number">-2</span>, <span class="number">-2</span>);</span><br><span class="line">        <span class="comment">// 写入文本流</span></span><br><span class="line">        csv_ts &lt;&lt; datasetPath &lt;&lt; separator &lt;&lt; datasetName &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 关闭文本流</span></span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>QT</tag>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 的 C/C++ 调试环境的 launch.json、 tasks.json 文件</title>
    <url>/2018/06/12/VSCodeCppLaunchTasks/</url>
    <content><![CDATA[<h2 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Configuring tasks.json for C/C++ debugging</span></span><br><span class="line"><span class="comment">// author: huihut</span></span><br><span class="line"><span class="comment">// repo: https://gist.github.com/huihut/9548fe7e1084cf8e844120c5668b8177</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Available variables which can be used inside of strings.</span></span><br><span class="line"><span class="comment">// $&#123;workspaceRoot&#125;: the root folder of the team        </span></span><br><span class="line"><span class="comment">// $&#123;file&#125;: the current opened file                     </span></span><br><span class="line"><span class="comment">// $&#123;fileBasename&#125;: the current opened file&#x27;s basename </span></span><br><span class="line"><span class="comment">// $&#123;fileDirname&#125;: the current opened file&#x27;s dirname    </span></span><br><span class="line"><span class="comment">// $&#123;fileExtname&#125;: the current opened file&#x27;s extension  </span></span><br><span class="line"><span class="comment">// $&#123;cwd&#125;: the current working directory of the spawned process</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;(gdb) Launch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;program&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;externalConsole&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="string">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;gdb.exe&quot;</span>,</span><br><span class="line">            <span class="string">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Configuring tasks.json for C/C++ debugging </span></span><br><span class="line"><span class="comment">// author: huihut</span></span><br><span class="line"><span class="comment">// repo: https://gist.github.com/huihut/887d3c28db92617bd5148c20a5ff112a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Available variables which can be used inside of strings.</span></span><br><span class="line"><span class="comment">// $&#123;workspaceRoot&#125;: the root folder of the team        </span></span><br><span class="line"><span class="comment">// $&#123;file&#125;: the current opened file                     </span></span><br><span class="line"><span class="comment">// $&#123;fileBasename&#125;: the current opened file&#x27;s basename </span></span><br><span class="line"><span class="comment">// $&#123;fileDirname&#125;: the current opened file&#x27;s dirname    </span></span><br><span class="line"><span class="comment">// $&#123;fileExtname&#125;: the current opened file&#x27;s extension  </span></span><br><span class="line"><span class="comment">// $&#123;cwd&#125;: the current working directory of the spawned process</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;label&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line">            <span class="string">&quot;group&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">                <span class="string">&quot;isDefault&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;presentation&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;echo&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;reveal&quot;</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">                <span class="string">&quot;focus&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;panel&quot;</span>: <span class="string">&quot;shared&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;windows&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;command&quot;</span>: <span class="string">&quot;g++&quot;</span>,</span><br><span class="line">                <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">                    <span class="string">&quot;-ggdb&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;\&quot;$&#123;file&#125;\&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;--std=c++11&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;-o&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;\&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe\&quot;&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows编译构建CEF发行版</title>
    <url>/2020/03/07/WindowsBuildCEF/</url>
    <content><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>在 CEF 发行版网站（<a href="http://opensource.spotify.com/cefbuilds/index.html">Chromium Embedded Framework (CEF) Automated Builds</a>）下载对应的 Standard Distribution 版本，本文以 CEF 75.1.14（<a href="http://opensource.spotify.com/cefbuilds/cef_binary_75.1.8%2Bg84fed5d%2Bchromium-75.0.3770.100_windows32.tar.bz2">cef_binary_75.1.8+g84fed5d+chromium-75.0.3770.100_windows32.tar.bz2</a>）为例</p>
<span id="more"></span>

<h2 id="使用-CMake-构建"><a href="#使用-CMake-构建" class="headerlink" title="使用 CMake 构建"></a>使用 CMake 构建</h2><p>打开 cmake-gui，设置源码和生成路径：</p>
<ul>
<li>Where is the source code: <code>D:/code/git/cef-builds/cef_binary_75.1.14+gc81164e+chromium-75.0.3770.100_windows32</code></li>
<li>Where to build the binaries: <code>D:/code/git/cef-builds/cef_binary_75.1.14+gc81164e+chromium-75.0.3770.100_windows32/build</code></li>
</ul>
<p>点击 Configure 生成配置，修改：</p>
<ul>
<li>生成动态库（个人偏好）：<code>CEF_RUNTIME_LIBRARY_FLAG</code> 从 <code>/MT</code> 改为 <code>/MD</code></li>
<li>不用沙盒（原因见 <a href="https://bitbucket.org/chromiumembedded/cef/wiki/Tutorial#markdown-header-windows-build-steps">这里</a>）：不勾选 <code>USE_SANDBOX</code></li>
</ul>
<p>点击 Configure、Generate 生成 VS 工程</p>
<h2 id="使用-VS-编译"><a href="#使用-VS-编译" class="headerlink" title="使用 VS 编译"></a>使用 VS 编译</h2><p>ceftests 项目会有文件格式错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&gt;------ 已启动生成: 项目: ceftests, 配置: Debug Win32 ------</span><br><span class="line">1&gt;os_rendering_unittest.cc</span><br><span class="line">1&gt;D:\code\git\cef-builds\cef_binary_75.1.14+gc81164e+chromium-75.0.3770.100_windows32\tests\ceftests\os_rendering_unittest.cc(794): error C2220: 警告被视为错误 - 没有生成“object”文件</span><br><span class="line">1&gt;D:\code\git\cef-builds\cef_binary_75.1.14+gc81164e+chromium-75.0.3770.100_windows32\tests\ceftests\os_rendering_unittest.cc(794): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失</span><br><span class="line">1&gt;D:\code\git\cef-builds\cef_binary_75.1.14+gc81164e+chromium-75.0.3770.100_windows32\tests\ceftests\os_rendering_unittest.cc(955): error C2001: 常量中有换行符</span><br><span class="line">1&gt;D:\code\git\cef-builds\CEF 79.1.38\cef_binary_75.1.14+gc81164e+chromium-75.0.3770.100_windows32\tests\ceftests\os_rendering_unittest.cc(998): error C2001: 常量中有换行符</span><br><span class="line">1&gt;D:\code\git\cef-builds\cef_binary_75.1.14+gc81164e+chromium-75.0.3770.100_windows32\tests\ceftests\os_rendering_unittest.cc(998): fatal error C1075: “&#123;”: 未找到匹配令牌</span><br><span class="line">1&gt;已完成生成项目“ceftests.vcxproj”的操作 - 失败。</span><br></pre></td></tr></table></figure>

<p>用记事本打开 <code>os_rendering_unittest.cc</code> 文件，另存为 <code>带有 BOM 的 UTF-8</code> 编码，覆盖原文件。</p>
<p>重新编译则会编译通过。</p>
<p>然后设置 <code>cefclient</code> 为启动项目，F5，则可看到 Google 为主页的一个浏览器 Demo</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>CEF</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 下 CLion 编写调用 C++ 共享库</title>
    <url>/2018/07/20/WritingCppSharedLibraryOnLinuxCLion/</url>
    <content><![CDATA[<h2 id="编写-MySharedLib-共享库"><a href="#编写-MySharedLib-共享库" class="headerlink" title="编写 MySharedLib 共享库"></a>编写 MySharedLib 共享库</h2><p>创建一个名为 MySharedLib 的共享库</p>
<p>CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(MySharedLib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(MySharedLib SHARED library.cpp library.h)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>library.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYSHAREDLIB_LIBRARY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYSHAREDLIB_LIBRARY_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 Hello World!</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用可变模版参数求和</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Types&gt;</span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T first, Types ... rest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> first + <span class="built_in">sum</span>&lt;T&gt;(rest...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>library.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;library.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="被-TestSharedLib-可执行项目调用"><a href="#被-TestSharedLib-可执行项目调用" class="headerlink" title="被 TestSharedLib 可执行项目调用"></a>被 TestSharedLib 可执行项目调用</h2><p>创建一个名为 TestSharedLib 的可执行项目</p>
<p>CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(TestSharedLib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># C++11 编译</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 头文件路径</span></span><br><span class="line"><span class="keyword">set</span>(INC_DIR /home/xx/code/clion/MySharedLib)</span><br><span class="line"><span class="comment"># 库文件路径</span></span><br><span class="line"><span class="keyword">set</span>(LIB_DIR /home/xx/code/clion/MySharedLib/cmake-build-debug)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;INC_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;LIB_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">link_libraries</span>(MySharedLib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(TestSharedLib main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接 MySharedLib 库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(TestSharedLib MySharedLib)</span><br></pre></td></tr></table></figure>

<p>main.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;library.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">hello</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1 + 2 = &quot;</span> &lt;&lt; <span class="built_in">sum</span>(<span class="number">1</span>,<span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1 + 2 + 3 = &quot;</span> &lt;&lt; <span class="built_in">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello, World!</span><br><span class="line">1 + 2 = 3</span><br><span class="line">1 + 2 + 3 = 6</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>一加 3T ROM、内核、固件、Recovery、框架、软件（APP）总结</title>
    <url>/2018/05/11/awesome-oneplus-3t/</url>
    <content><![CDATA[<p>一加 3T ROM、内核（Kernel）、固件（Firmware）、Recovery、框架（Framework）、软件（APP），以备茶余饭后手贱刷机之用。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li>Github Repository： <a href="https://github.com/huihut/awesome-oneplus-3t">huihut&#x2F;awesome-oneplus-3t</a></li>
<li>之前的相关博文：<a href="https://blog.huihut.com/2017/08/27/Oneplus3TBrushAndPlay/">一加3T的刷机流程及玩机一些事</a></li>
</ul>
<span id="more"></span>

<h1 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h1><h2 id="基于-Android-8-1"><a href="#基于-Android-8-1" class="headerlink" title="基于 Android 8.1"></a>基于 Android 8.1</h2><ul>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-nitrogen-os-beta-t3737654">NitrogenOS</a> | <a href="https://sourceforge.net/projects/nitrogen-project/files/oneplus3/oneplus3_test/8.1/">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/8-x-omni-oneplus-3t-t3695992">Omni 8.1</a> | <a href="http://dl.omnirom.org/oneplus3/">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-kernel-resurrectionremix-n-t3524715">[Official] ResurrectionRemix v6.0.0</a> | <a href="https://sourceforge.net/projects/resurrectionremix-oreo/files/oneplus3/">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-aospextended-rom-v3-1-t3557363">AOSP Extended 5.4</a> | <a href="https://downloads.aospextended.com/oneplus3/">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-lineageos-15-1-oneplus-3-3t-t3739169">LineageOS 15.1</a> | <a href="https://download.lineageos.org/oneplus3">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-havoc-os-t3782811">Havoc-OS</a> | <a href="https://sourceforge.net/projects/havoc-os/files/oneplus3/">下载</a></li>
<li><a href="https://forum.xda-developers.com/ground-zero-roms/ground-zero-roms-feature-development/rom-tesla-n-t3481561">Validus 2.2</a> | <a href="https://androidfilehost.com/?w=files&flid=239521&sort_by=date&sort_dir=DESC">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/wip-official-aicp-13-0-t3713637">AICP 13.1</a> | <a href="http://dwnld.aicp-rom.com/?device=oneplus3">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-android-source-illusion-project-t3735128">AOSiP</a> | <a href="https://get.aosiprom.com/oneplus3/">下载</a></li>
<li><a href="https://forum.xda-developers.com/ground-zero-roms/ground-zero-roms-feature-development/gzosp-aio-thread-t3679343">GZOSP 1.0</a> | <a href="https://androidfilehost.com/?w=files&flid=217699&sort_by=date&sort_dir=DESC">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-candy8-1-alpha-t3743214">Candy 8.1</a> | <a href="https://androidfilehost.com/?w=files&flid=235075&sort_by=date&sort_dir=DESC">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/op3t-o-s-c-p-cypheros-t3744182">A.O.S.C.P : CypherOS</a> | <a href="http://get.cypheros.co/">官方下载</a> | <a href="https://mega.nz/#F!I1BUGSQY!yJoh7pjahDUM-NTBaq2_xA">非官方下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/cardinal-aosp-5-0-android-8-0-pre-t3693585">MSM Xtended</a> | <a href="https://androidfilehost.com/?w=files&flid=252432&sort_by=date&sort_dir=DESC">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-cosmic-os-v3-1-universe-t3749543">Cosmic-OS 3.1</a> | <a href="https://sourceforge.net/projects/cosmic-os/files/oneplus3/">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/op3-3t-resurrection-remix-t3754941">[Unoffical] Resurrection Remix (LuisROM)</a> | <a href="http://luis-builds.de/downloads/lineageos/rr/oneplus3/">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-android-kang-project-aokp-t3571944/page16">AOKP Oreo</a> | <a href="http://xfer.aokp.co/?developer=AOKP&folder=oneplus3">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3t/development/rom-nlos-15-1-20180223-t3754855">NLOS-15.1 beta</a> | <a href="https://drive.google.com/drive/folders/1kJFApe-XZaRwOyJFXgbsff0fE65SFi_7">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-tugapower-4-0-t3755049">Tugapower</a> | <a href="https://androidfilehost.com/?w=files&flid=246534&sort_by=date&sort_dir=DESC">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3t/how-to/rom-mokee-source-project-t3683456/post74031157#post74031157">MoKee Open Source Project</a> | <a href="https://download.mokeedev.com/?device=oneplus3">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/op3-t-romcrdroid-t3763119">crDroid</a> | <a href="https://androidfilehost.com/?w=files&flid=256882&sort_by=date&sort_dir=DESC">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-bootleggersrom-2-1-stable-t3765818">BootleggersROM</a> | <a href="https://androidfilehost.com/?w=files&flid=258189&sort_by=date&sort_dir=DESC">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-aquarios-8-1-0-live-support-volte-t3768806">AquariOS</a> | <a href="https://androidfilehost.com/?w=files&flid=259680&sort_by=date&sort_dir=DESC">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-carbonrom-noct-weeklies-t3771205">CarbonROM</a> | <a href="https://get.carbonrom.org/device-oneplus3.html">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-resurrectionremix-v6-0-0-t3769387">[Unofficial] ResurrectionRemix v6.0.0</a> | <a href="https://androidfilehost.com/?w=files&flid=256927&sort_by=date&sort_dir=DESC">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/rom-pixel-experience-t3729897">Pixel Experience</a> | <a href="https://download.pixelexperience.org/oneplus3/">下载</a></li>
</ul>
<h2 id="基于-Android-8-0"><a href="#基于-Android-8-0" class="headerlink" title="基于 Android 8.0"></a>基于 Android 8.0</h2><ul>
<li><a href="https://downloads.oneplus.com/oneplus-3t/oneplus_3t_oxygenos_5.0.1/">[一加官方] OnePlus 3T 氧OS(OxygenOS) 5.0.1</a> | <a href="http://oxygenos.oneplus.net.s3.amazonaws.com/OnePlus3TOxygen_28_OTA_062_all_1712272248_d28093577f324959.zip">下载</a></li>
<li><a href="https://downloads.oneplus.com/oneplus-3t/oneplus_3t_oxygenos_openbeta_26/">[一加官方] OnePlus 3T 氧OS(OxygenOS) beta 26</a> | <a href="http://oxygenos.oneplus.net.s3.amazonaws.com/OnePlus3TOxygen_28_OTA_048_all_1804231749_97b9d0fb0a704853.zip">下载</a></li>
<li><a href="https://www.h2os.com/download">[一加官方] OnePlus 3T 氢OS(H2OS) 稳定版第7版</a> | <a href="http://download.h2os.com/OnePlus%203T/MP/OnePlus3THydrogen_28_OTA_051_all_1804292239_98839986dcaa492b.zip">下载</a></li>
<li><a href="https://www.h2os.com/download">[一加官方] OnePlus 3T 氢OS(H2OS) 公测版第11版</a> | <a href="http://download.h2os.com/OnePlus%203T/OPEN/OnePlus3THydrogen_28_OTA_048_all_1804241243_248d11ac3cd1408d.zip">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/development/rom-experience-rom-v1-0-t3522259">ExperienceOS (OP3 only) [OOS 5.0.1 + OB35 Based]</a> | <a href="https://jamal2367.com/downloads/?dir=OnePlus%203/ExperienceOS">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3t/development/rom-theone3tos-v1-0-t3730932">theOne3TOS - [OOS 5.0.1 + OB26 Based]</a> | <a href="https://androidfilehost.com/?w=files&flid=240431&sort_by=date&sort_dir=DESC">OOS 下载</a> | <a href="https://androidfilehost.com/?w=files&flid=240431&sort_by=date&sort_dir=DESC">Open Based 下载</a></li>
</ul>
<h2 id="其他-ROM"><a href="#其他-ROM" class="headerlink" title="其他 ROM"></a>其他 ROM</h2><ul>
<li><a href="https://forum.xda-developers.com/oneplus-3t/development#romList">OnePlus 3T ROMs</a></li>
</ul>
<h2 id="救砖工具包（基于-Android-6-0）"><a href="#救砖工具包（基于-Android-6-0）" class="headerlink" title="救砖工具包（基于 Android 6.0）"></a>救砖工具包（基于 Android 6.0）</h2><ul>
<li><a href="http://www.shuame.com/faq/restore-tutorial/15302-3t-a3010--60.html">一加3T (A3010&#x2F;全网通) 官方恢复兼救砖 （安卓6.0）</a> | <a href="https://pan.baidu.com/s/1skAC79r">下载地址一</a> | <a href="https://pan.baidu.com/s/1D35m7CUgXK2qDOQ6tFV-GA">下载地址二</a></li>
</ul>
<h1 id="内核-Kernel"><a href="#内核-Kernel" class="headerlink" title="内核 Kernel"></a>内核 Kernel</h1><ul>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/kernel-caesium-kernel-op3-op3t-t3672090">Caesium - CadaverousCherry</a> | <a href="https://github.com/MSF-Jarvis/oneplus3/releases/">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/derp-kernel-oxygenos-oreo-unified-3-18-t3691960">Derp 4.0 (OOS)</a> | <a href="https://downloads.akhilnarang.me/kernel/oneplus3/Stable/">下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3t/development/kernel-flash-kernel-r3-t3574681">Flash</a> | <a href="https://androidfilehost.com/?w=files&flid=256253&sort_by=date&sort_dir=DESC">下载(OOS)</a> | <a href="https://androidfilehost.com/?w=files&flid=256253&sort_by=date&sort_dir=DESC">下载(Custom)</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3t/development/kernel-boeffla-kernel-xx-12-2016-t3520455">Boeffla kernel 3.0 beta 5 (OOS)</a> | <a href="http://kernel.boeffla.de/oneplus3t/boeffla-kernel-oos/oos5xx_download/Test/">OP3T 下载</a> | <a href="http://kernel.boeffla.de/oneplus3/boeffla-kernel-oos/oos5xx_download/Test/">OP3 下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3t/development/kernel-boeffla-kernel-xx-12-2016-t3520455">Boeffla kernel 3.0 beta 5 (LOS 15.1) </a> | <a href="http://kernel.boeffla.de/oneplus3t/boeffla-kernel-lineage/lineage15_download/Test/">OP3T 下载</a> | <a href="http://kernel.boeffla.de/oneplus3/boeffla-kernel-lineage/lineage15_download/Test/">OP3 下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/op3-3t-kernel-white-wolf-kernel-29-05-t3614601">White Wolf (OOS)</a> | <a href="https://androidfilehost.com/?w=files&flid=233922&sort_by=date&sort_dir=DESC">OP3T 下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/kernel-yarpiin-kernel-22-11-2016-t3524162">White Wolf (Custom)</a> | <a href="https://androidfilehost.com/?w=files&flid=154993&sort_by=date&sort_dir=DESC">OP3T 下载</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/kernel-holydragon-kernel-t3732974">HolyDragon</a> | <a href="https://androidfilehost.com/?w=files&flid=213131&sort_by=date&sort_dir=DESC">下载 (OOS&#x2F;H2OS) </a> | <a href="https://androidfilehost.com/?w=files&flid=249668&sort_by=date&sort_dir=DESC">下载 (Omni&#x2F;AOSP)</a></li>
<li><a href="%E4%B8%8B%E8%BD%BD">MadysXtended [Android 8.1 Only]</a> | <a href="https://androidfilehost.com/?w=files&flid=243002&sort_by=date&sort_dir=DESC"></a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3t/development/kernel-franco-kernel-r1-12nd-december-t3517519">Franco Kernel</a> | 下载 (OOS) <a href="https://kernels.franco-lnx.net/OnePlus3T/8.0.0/anyKernel/">OP3T</a> <a href="https://kernels.franco-lnx.net/OnePlus3/8.0.0/anyKernel/">OP3</a> | 下载 (Custom) <a href="https://kernels.franco-lnx.net/OnePlus3T/8.1.0/anyKernel/">OP3T</a> <a href="https://kernels.franco-lnx.net/OnePlus3/8.1.0/anyKernel/">OP3</a></li>
</ul>
<h1 id="固件-Firmware"><a href="#固件-Firmware" class="headerlink" title="固件 Firmware"></a>固件 Firmware</h1><ul>
<li>OP3T | <a href="https://forum.xda-developers.com/oneplus-3t/how-to/firmware-beta-10-t3631166">[OP3T][FIRMWARE+MODEM] Open Beta 26 - Oreo</a> | <a href="https://androidfilehost.com/?fid=745849072291697659">下载 (OOS)</a> | <a href="https://androidfilehost.com/?fid=818070582850509980">下载 (Open Beta)</a></li>
<li>OP3 | <a href="https://forum.xda-developers.com/oneplus-3t/how-to/firmware-beta-10-t3631166">[FIRMWARE&#x2F;MODEM] Collection - Flashable Zips!</a> | <a href="https://jamal2367.com/downloads/?dir=OnePlus%203/Firmware%20+%20Modems/Android%208.0.0/OxygenOS">下载 (OOS)</a> | <a href="https://jamal2367.com/downloads/?dir=OnePlus%203/Firmware%20+%20Modems/Android%208.0.0/Open%20Beta">下载 (Open Beta)</a></li>
</ul>
<h1 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a>Recovery</h1><ul>
<li><a href="http://oxygenos.oneplus.net.s3.amazonaws.com/recovery_op3t.img">[一加官方] Oxygen Recovery</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3/oneplus-3--3t-cross-device-development/recovery-official-twrp-touch-recovery-t3742894">Official TWRP 3.2.1-0 (unified)</a> | <a href="https://twrp.me/oneplus/oneplusthree.html">下载</a></li>
</ul>
<h1 id="ADB"><a href="#ADB" class="headerlink" title="ADB"></a>ADB</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="Windows-版"><a href="#Windows-版" class="headerlink" title="Windows 版"></a>Windows 版</h3><ul>
<li>官方下载：<a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">https://dl.google.com/android/repository/platform-tools-latest-windows.zip</a></li>
<li>网盘下载链接：<a href="http://pan.baidu.com/s/1eRG8gXs">http://pan.baidu.com/s/1eRG8gXs</a> 密码：72ac</li>
</ul>
<h3 id="MacOS-版"><a href="#MacOS-版" class="headerlink" title="MacOS 版"></a>MacOS 版</h3><ul>
<li>官方下载：<a href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip">https://dl.google.com/android/repository/platform-tools-latest-darwin.zip</a></li>
<li>网盘下载链接：<a href="http://pan.baidu.com/s/1pLQFvrt">http://pan.baidu.com/s/1pLQFvrt</a> 密码：7qav</li>
</ul>
<h3 id="Linux-版"><a href="#Linux-版" class="headerlink" title="Linux 版"></a>Linux 版</h3><ul>
<li>官方下载：<a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip">https://dl.google.com/android/repository/platform-tools-latest-linux.zip</a></li>
<li>网盘下载链接：<a href="http://pan.baidu.com/s/1nu8mvrF">http://pan.baidu.com/s/1nu8mvrF</a> 密码：giug</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ul>
<li><a href="https://www.xda-developers.com/install-adb-windows-macos-linux/">How to Install ADB on Windows, macOS, and Linux</a></li>
</ul>
<h1 id="框架-Framework"><a href="#框架-Framework" class="headerlink" title="框架 Framework"></a>框架 Framework</h1><h2 id="Xposed"><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><ul>
<li><a href="https://forum.xda-developers.com/showthread.php?t=3034811">[zip] Xposed for Oreo</a> | <a href="https://dl-xda.xposed.info/framework/sdk26/arm64/">SDK26 Android 8.0 下载</a> | <a href="https://dl-xda.xposed.info/framework/sdk27/arm64/">SDK27 Android 8.1 下载</a></li>
<li><a href="https://dl-xda.xposed.info/framework/uninstaller/">[zip] Xposed Uninstaller</a></li>
<li><a href="https://forum.xda-developers.com/attachment.php?attachmentid=4393082&d=1516301692">[apk] Xposed Installer</a></li>
<li><a href="https://forum.xda-developers.com/xposed/material-design-xposed-installer-t3137758">[apk] Material Design Xposed Installer</a> | <a href="https://forum.xda-developers.com/devdb/project/?id=13191#downloads">下载</a></li>
</ul>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul>
<li><a href="https://www.zhihu.com/question/22063862">Android 系统上的 Xposed 框架中都有哪些值得推荐的模块？</a></li>
</ul>
<h2 id="Magisk"><a href="#Magisk" class="headerlink" title="Magisk"></a>Magisk</h2><h3 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h3><ul>
<li><a href="https://github.com/topjohnwu/Magisk/releases/download/v16.0/Magisk-v16.0.zip">[zip] Latest Magisk</a></li>
<li><a href="https://github.com/topjohnwu/Magisk/releases/download/v16.4/Magisk-uninstaller-20180429.zip">[zip] Latest Uninstaller</a> (Support all versions)</li>
<li><a href="https://github.com/topjohnwu/MagiskManager/releases/download/v5.7.0/MagiskManager-v5.7.0.apk">[apk] Latest Magisk Manager</a></li>
</ul>
<h3 id="模块-1"><a href="#模块-1" class="headerlink" title="模块"></a>模块</h3><ul>
<li><a href="http://www.oneplusbbs.com/thread-3302341-1-1.html">[教程] (搬运XDA)magisk框架教程以及模块-xposed的替代品</a></li>
</ul>
<h1 id="软件-APP"><a href="#软件-APP" class="headerlink" title="软件 APP"></a>软件 APP</h1><h2 id="应用市场"><a href="#应用市场" class="headerlink" title="应用市场"></a>应用市场</h2><ul>
<li><a href="https://play.google.com/store">Google Play</a></li>
<li><a href="https://www.coolapk.com/">酷安</a></li>
</ul>
<h2 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h2><ul>
<li><a href="https://github.com/shadowsocks/shadowsocks-android/releases">Github . shadowsocks&#x2F;shadowsocks-android</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.github.shadowsocks">Google Play . Shadowsocks</a></li>
</ul>
<h2 id="ShadowsocksR"><a href="#ShadowsocksR" class="headerlink" title="ShadowsocksR"></a>ShadowsocksR</h2><ul>
<li><a href="https://github.com/shadowsocksr-backup/shadowsocksr-android/releases">Github . shadowsocksr-backup&#x2F;shadowsocksr-android</a></li>
</ul>
<h2 id="GAPPS"><a href="#GAPPS" class="headerlink" title="GAPPS"></a>GAPPS</h2><ul>
<li><a href="http://opengapps.org/">Open Gapps (8.0&#x2F;8.1)</a></li>
</ul>
<h2 id="Pixel2Mod-Google-Camera"><a href="#Pixel2Mod-Google-Camera" class="headerlink" title="Pixel2Mod Google Camera"></a>Pixel2Mod Google Camera</h2><ul>
<li><a href="https://forum.xda-developers.com/oneplus-3/how-to/modded-google-camera-hdr-60fps-video-t3658552">Pixel2Mod Google Camera</a></li>
</ul>
<h2 id="Google-Pixel-实时动态壁纸"><a href="#Google-Pixel-实时动态壁纸" class="headerlink" title="Google Pixel 实时动态壁纸"></a>Google Pixel 实时动态壁纸</h2><ul>
<li><a href="https://forum.xda-developers.com/android/apps-games/port-live-earth-wallpapers-t3481640">[Google Pixel&#x2F;2] Live Wallpapers</a></li>
</ul>
<h2 id="绿色守护"><a href="#绿色守护" class="headerlink" title="绿色守护"></a>绿色守护</h2><ul>
<li><a href="https://play.google.com/store/apps/details?id=com.oasisfeng.greenify&hl=zh">Google Play . 绿色守护 (Greenify)</a></li>
<li><a href="https://www.coolapk.com/apk/com.oasisfeng.greenify">酷安 . Greenify绿色守护</a></li>
</ul>
<h3 id="教程-1"><a href="#教程-1" class="headerlink" title="教程"></a>教程</h3><p><a href="https://greenify.uservoice.com/knowledgebase/articles/749142">How to grant permissions required by some features on non-root device?</a></p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>Android 7.0+ 非 root 开启嗜睡模式授权命令（其他命令见教程）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb -d shell pm grant com.oasisfeng.greenify android.permission.WRITE_SECURE_SETTINGS</span><br></pre></td></tr></table></figure>

<h2 id="冰箱"><a href="#冰箱" class="headerlink" title="冰箱"></a>冰箱</h2><ul>
<li><a href="https://play.google.com/store/apps/details?id=com.catchingnow.icebox&hl=zh">Google Play . 冰箱 Ice Box —自动冻结应用</a></li>
<li><a href="https://www.coolapk.com/apk/com.catchingnow.icebox">酷安 . 冰箱 Ice Box</a></li>
</ul>
<h3 id="教程-2"><a href="#教程-2" class="headerlink" title="教程"></a>教程</h3><p><a href="https://github.com/heruoxin/Ice-Box-Docs/blob/master/Device%20Owner%20%EF%BC%88%E5%85%8D%20root%EF%BC%89%E6%A8%A1%E5%BC%8F%E8%AE%BE%E7%BD%AE.md">冰箱免 Root（设备管理员模式）使用配置方法</a></p>
<h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell dpm set-device-owner com.catchingnow.icebox/.receiver.DPMReceiver</span><br></pre></td></tr></table></figure>

<h2 id="黑域"><a href="#黑域" class="headerlink" title="黑域"></a>黑域</h2><ul>
<li><a href="https://play.google.com/store/apps/details?id=me.piebridge.brevent&hl=zh">Google Play . 黑阈</a></li>
<li><a href="https://www.coolapk.com/apk/me.piebridge.brevent">酷安 . 黑阈</a></li>
</ul>
<h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb -d shell sh /data/data/me.piebridge.brevent/brevent.sh</span><br></pre></td></tr></table></figure>

<h1 id="教程博文"><a href="#教程博文" class="headerlink" title="教程博文"></a>教程博文</h1><ul>
<li><a href="https://forum.xda-developers.com/oneplus-3t/how-to/info-list-oreo-roms-kernels-available-3-t3688139">[INFO] List of all Oreo roms&#x2F;kernels&#x2F;recovery for 3&#x2F;3T (UPDATED : 2018-05-06)</a></li>
<li><a href="https://forums.oneplus.com/threads/guide-oneplus-3t-how-to-unlock-bootloader-flash-twrp-root-nandroid-efs-backup-and-more.475142/">[GUIDE] OnePlus 3T: How to Unlock Bootloader | Flash TWRP | Root | Nandroid &amp; EFS Backup and More !!</a></li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>刷机</tag>
      </tags>
  </entry>
</search>
